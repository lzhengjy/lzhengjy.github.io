<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="/2024/03/11/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/03/11/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo搭建个人博客"><a href="#Hexo搭建个人博客" class="headerlink" title="Hexo搭建个人博客"></a>Hexo搭建个人博客</h2><br/><hr><h3 id="1-Git的下载安装"><a href="#1-Git的下载安装" class="headerlink" title="1. Git的下载安装"></a>1. Git的下载安装</h3><p>下载地址为 <a href="https://git-scm.com/">git-scm.com</a>或者<a href="http://gitforwindows.org/">gitforwindows.org</a>，或者<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">阿里镜像</a></p><p>git-scm为官方下载地址，gitforwindows只能下载Windows版本</p><br/><hr><h3 id="2-nodejs的下载"><a href="#2-nodejs的下载" class="headerlink" title="2. nodejs的下载"></a>2. nodejs的下载</h3><p><a href="https://nodejs.org/en">Node.js (nodejs.org)</a></p><img src="hexo个人博客的搭建/20231005142742.png" alt="'" style="zoom:67%;" /><p>LTS:长期支持版本</p><br/><hr><h3 id="3-nodejs的安装"><a href="#3-nodejs的安装" class="headerlink" title="3. nodejs的安装"></a>3. nodejs的安装</h3><p>一直下一步就行了</p><img src="hexo个人博客的搭建/20231005143046.png" style="zoom:60%;" /><p>安装成功</p><br/><hr><h3 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4. 安装hexo"></a>4. 安装hexo</h3><p> 以管理员身份打开powershell或者打开git</p><img src="hexo个人博客的搭建/20231005143325.png" style="zoom: 50%;" /><p>查看node版本node -v</p><p><img src="/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/20231005143619.png"></p><br/><p>由于 npm在国内的镜像powwer源的速度很慢，所以我们先安装cnpm（淘宝镜像源）。由于使用powershell报错，所以接下来使用git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">npm install -g cnpm --registry=https://registry.npm.taobao.org<br># 查看cnpm版本<br>cnpm -v<br></code></pre></td></tr></table></figure><p><img src="/./hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/20231006104324.png"></p><br/><p>用cnpm全局安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><img src="./hexo个人博客的搭建/20231006104806.png" style="zoom:67%;" /><br/><p>用hexo -v指令才确认是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo -v<br></code></pre></td></tr></table></figure><img src="./hexo个人博客的搭建/20231006105038.png" style="zoom:80%;" /><br/><p>创建一个blog文件夹并切换到该文件夹</p><p><img src="/./hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/20231006105309.png"></p><p>初始化博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo init<br></code></pre></td></tr></table></figure><p><img src="/./hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/20231006105757.png"></p><br/><p>初始化后会在blog文件夹中生成一些文件</p><img src="./hexo个人博客的搭建/20231006105844.png" style="zoom:67%;" /><br/><p>在本地启动博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo s<br></code></pre></td></tr></table></figure><img src="./hexo个人博客的搭建/20231006110112.png" style="zoom:67%;" /><p>访问4000端口</p><img src="./hexo个人博客的搭建/20231006110205.png" style="zoom:67%;" /><br/><p>新建文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo n &quot;&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OAuth2</title>
    <link href="/2024/02/15/OAuth2/"/>
    <url>/2024/02/15/OAuth2/</url>
    
    <content type="html"><![CDATA[<p>该笔记学习b站视频制作而成:<a href="https://www.bilibili.com/video/BV14b4y1A7Wz/?share_source=copy_web&vd_source=db8e7458ec195ac74979ce5478cbc624">OAuth2</a></p><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p> OAuth2是一种开放授权协议。，使应用程序能够访问其它公司提供的资源，允许用户在第三方应用访问存储在其他服务器上的私密资源，而在整个过程不需要提供用户名和密码给到第三方应用，可以通过提供一个令牌(token)实现该功能</p><br/><p><strong>OAuth2协议包含以下角色</strong>：</p><ul><li>资源所有者（Resource Owner）：即用户，资源的拥有人，想要通过客户应用访问资源服务器上的资源。</li><li>客户应用（Client）：通常是一个Web或者无线应用，它需要访问用户的受保护资源。</li><li>资源服务器（Resource Server）：存储受保护资源的服务器或定义了可以访问到资源的API，接收并验证客户端的访问令牌，以决定是否授权访问资源。</li><li>授权服务器（Authorization Server）：负责验证资源所有者的身份并向客户端颁发访问令牌。</li></ul><br/><p><img src="/./OAuth2/image-20240311143544782.png"></p><br/><p><strong>OAuth2的使用场景</strong></p><p><strong>开放系统间授权</strong></p><p>社交登录</p><p>在传统的身份验证中，用户需要提供用户名和密码，还有很多网站登录时，允许使用第三方网站的身份，这称为”第三方登录”。所谓第三方登录，实质就是 OAuth 授权。用户想要登录 A 网站，A 网站让用户提供第三方网站的数据，证明自己的身份。获取第三方网站的身份数据，就需要 OAuth 授权。</p><p><img src="/./OAuth2/image-20240312113012599.png"></p><br/><p>开放API</p><p>例如云冲印服务的实现</p><p><img src="/./OAuth2/image-20240312113053760.png"></p><br/><p><strong>现代微服务安全</strong></p><p>单块应用安全</p><p><img src="/./OAuth2/image-20240312113139214.png"></p><p>微服务安全</p><p><img src="/./OAuth2/image-20240312113159332.png"></p><br/><p><strong>企业内部应用认证授权</strong></p><ul><li><p>SSO：Single Sign On 单点登录</p></li><li><p>IAM：Identity and Access Management 身份识别与访问管理</p></li></ul><br/><hr><h4 id="2-四种授权模式"><a href="#2-四种授权模式" class="headerlink" title="2. 四种授权模式"></a>2. 四种授权模式</h4><ul><li>授权码（authorization-code）</li><li>隐藏式（implicit）</li><li>密码式（password）</li><li>客户端凭证（client credentials）</li></ul><br/><p><strong>授权码</strong></p><p>授权码（authorization code），指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</p><p>这种方式是最常用，最复杂，也是最安全的，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><p><img src="/./OAuth2/image-20240312114148859.png"></p><br/><p><strong>隐藏式</strong></p><p>隐藏式（implicit），也叫简化模式，有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端</p><p>RFC 6749 规定了这种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为隐藏式。这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了</p><p><img src="/./OAuth2/image-20240312114245519.png"></p><br/><p><strong>密码式</strong></p><p>密码式（Resource Owner Password Credentials）：如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌</p><p>这种方式需要用户给出自己的用户名&#x2F;密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用</p><p><img src="/./OAuth2/image-20240312114321770.png"></p><br/><p><strong>凭证式</strong></p><p>凭证式（client credentials）：也叫客户端模式，适用于没有前端的命令行应用，即在命令行下请求令牌。</p><p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌</p><p><img src="/./OAuth2/image-20240312114350948.png"></p><br/><hr><h4 id="3-授权模式的选择"><a href="#3-授权模式的选择" class="headerlink" title="3. 授权模式的选择"></a>3. 授权模式的选择</h4><img src="./OAuth2/image-20240312115537013.png" alt="image-20240312115537013" style="zoom:67%;" /><br/><hr><h4 id="4-Spring中OAuth2的实现"><a href="#4-Spring中OAuth2的实现" class="headerlink" title="4. Spring中OAuth2的实现"></a>4. Spring中OAuth2的实现</h4><p>官方文档：<a href="https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html">OAuth2 :: Spring Security</a></p><br/><p><strong>Spring Security</strong></p><ul><li>客户应用（OAuth2 Client）：OAuth2客户端功能中包含OAuth2 Login</li><li>资源服务器（OAuth2 Resource Server）</li></ul><p><strong>Spring</strong></p><ul><li>授权服务器（Spring Authorization Server）：它是在Spring Security之上的一个单独的项目。</li></ul><br/><p><strong>相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 资源服务器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 客户应用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 授权服务器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-authorization-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>a9f7db7266f11042e686</p><p>a9ef5aef572ac17ec6d45a5bbad909ca00950118</p><br/><hr><h4 id="5-Github授权登录案例"><a href="#5-Github授权登录案例" class="headerlink" title="5. Github授权登录案例"></a>5. Github授权登录案例</h4><p>登录GitHub，在开发者设置(点击用户头像，选择settings)中找到OAuth Apps，创建一个application，为客户应用创建访问GitHub的凭据：</p><p><img src="/./OAuth2/image-20240312122845556.png"></p><br/><p>填写应用信息：<code>默认的重定向URI模板为&#123;baseUrl&#125;/login/oauth2/code/&#123;registrationId&#125;</code>。registrationId是ClientRegistration的唯一标识符</p><p><img src="/./OAuth2/image-20240312122917326.png"></p><br><p>获取应用程序id，生成应用程序密钥：</p><p>生成后记得保存程序密钥，不然保存配置后密钥就会隐藏前面的数字</p><p><img src="/./OAuth2/image-20240312123004642.png" alt="image-20240312123004642"></p><br/><p><strong>创建测试项目</strong></p><p>引入相关的依赖</p><img src="./OAuth2/image-20240312123051807.png" alt="image-20240312123051807" style="zoom:67%;" /><br/><p>官方代码参考案例：示例代码参考：<a href="https://github.com/spring-projects/spring-security-samples/tree/6.2.x/servlet/spring-boot/java/oauth2/login">spring-security-samples&#x2F;servlet&#x2F;spring-boot&#x2F;java&#x2F;oauth2&#x2F;login at 6.2.x · spring-projects&#x2F;spring-security-samples (github.com)</a></p><br/><p><strong>在application.yml中写入相关配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">oauth2:</span><br>      <span class="hljs-attr">client:</span><br>        <span class="hljs-attr">registration:</span><br>          <span class="hljs-attr">github:</span><br>            <span class="hljs-attr">client-id:</span> <span class="hljs-string">a9f7db7266f11042e686</span><br>            <span class="hljs-attr">client-secret:</span> <span class="hljs-string">a9ef5aef572ac17ec6d45a5bbad909ca00950118</span><br></code></pre></td></tr></table></figure><br/><p><strong>创建controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.core.annotation.AuthenticationPrincipal;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.client.OAuth2AuthorizedClient;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.core.user.OAuth2User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(</span><br><span class="hljs-params">            Model model,</span><br><span class="hljs-params">            <span class="hljs-meta">@RegisteredOAuth2AuthorizedClient</span> OAuth2AuthorizedClient authorizedClient,</span><br><span class="hljs-params">            <span class="hljs-meta">@AuthenticationPrincipal</span> OAuth2User oauth2User)</span> &#123;<br>        model.addAttribute(<span class="hljs-string">&quot;userName&quot;</span>, oauth2User.getName());<br>        model.addAttribute(<span class="hljs-string">&quot;clientName&quot;</span>, authorizedClient.getClientRegistration().getClientName());<br>        model.addAttribute(<span class="hljs-string">&quot;userAttributes&quot;</span>, oauth2User.getAttributes());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>创建index页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;https://www.thymeleaf.org&quot;</span> <span class="hljs-attr">xmlns:sec</span>=<span class="hljs-string">&quot;https://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Spring Security - OAuth 2.0 Login<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: right&quot;</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;logout&quot;</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight:bold&quot;</span>&gt;</span>User: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:none&quot;</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/logout&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Logout&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>OAuth 2.0 Login with Spring Security<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    You are successfully logged in <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight:bold&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    via the OAuth 2.0 Client <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight:bold&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;clientName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight:bold&quot;</span>&gt;</span>User Attributes:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;userAttribute : $&#123;userAttributes&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight:bold&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userAttribute.key&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userAttribute.value&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br/><p><strong>启动程序</strong></p><ul><li>启动程序并访问localhost:8080。浏览器将被重定向到默认的自动生成的登录页面，该页面显示了一个用于GitHub登录的链接。</li><li>点击GitHub链接，浏览器将被重定向到GitHub进行身份验证。</li><li>使用GitHub账户凭据进行身份验证后，用户会看到授权页面，询问用户是否允许或拒绝客户应用访问GitHub上的用户数据。点击允许以授权OAuth客户端访问用户的基本个人资料信息。</li><li>此时，OAuth客户端访问GitHub的获取用户信息的接口获取基本个人资料信息，并建立一个已认证的会话。</li></ul><br/><p>访问localhost:8080,会直接跳转到github授权登录页面</p><img src="./OAuth2/image-20240312124808269.png" alt="image-20240312124808269" style="zoom: 50%;" /><br/><p>访问localhost:8080&#x2F;login</p><img src="./OAuth2/image-20240312124923984.png" alt="image-20240312124923984" style="zoom:67%;" /><p>点击GIthub登录</p><img src="./OAuth2/image-20240312125003753.png" alt="image-20240312125003753" style="zoom: 50%;" /><br/><p>上面这种直接显示账号是因为我已经在Github登录了</p><p>退出GIthub后再次测试登录</p><img src="./OAuth2/image-20240312125157054.png" alt="image-20240312125157054" style="zoom:50%;" /><br/><p>登录成功后会获取相关信息</p><img src="./OAuth2/image-20240312125929641.png" alt="image-20240312125929641" style="zoom: 67%;" /><br/><p><strong>登录流程</strong></p><ol><li><strong>A 网站让用户跳转到 GitHub，并携带参数ClientID 以及 Redirection URI。</strong></li><li>GitHub 要求用户登录，然后询问用户”A 网站要求获取用户信息的权限，你是否同意？”</li><li>用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码。</li><li><strong>A 网站使用授权码，向 GitHub 请求令牌。</strong></li><li>GitHub 返回令牌.</li><li><strong>A 网站使用令牌，向 GitHub 请求用户数据。</strong></li><li>GitHub返回用户数据</li><li><strong>A 网站使用 GitHub用户数据登录</strong></li></ol><img src="./OAuth2/image-20240312125944791.png" alt="image-20240312125944791" style="zoom: 80%;" /><br/><p><strong>CommonOAuth2Provider</strong></p><p>CommonOAuth2Provider是一个预定义的通用OAuth2Provider，为一些知名资源服务API提供商（如Google、GitHub、Facebook）预定义了一组默认的属性。</p><p>例如，<strong>授权URI、令牌URI和用户信息URI</strong>通常不经常变化。因此，提供默认值以减少所需的配置。</p><p>因此，当我们配置GitHub客户端时，只需要提供client-id和client-secret属性。</p><img src="./OAuth2/image-20240312130135072.png" alt="image-20240312130135072" style="zoom: 67%;" /><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">GITHUB &#123;<br>    <span class="hljs-keyword">public</span> ClientRegistration.Builder <span class="hljs-title function_">getBuilder</span><span class="hljs-params">(String registrationId)</span> &#123;<br>        ClientRegistration.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getBuilder(<br>        registrationId, <br>        ClientAuthenticationMethod.CLIENT_SECRET_BASIC, <br>        <br>        <span class="hljs-comment">//授权回调地址(GitHub向客户应用发送回调请求，并携带授权码)   </span><br><span class="hljs-string">&quot;&#123;baseUrl&#125;/&#123;action&#125;/oauth2/code/&#123;registrationId&#125;&quot;</span>);<br>        builder.scope(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;read:user&quot;</span>&#125;);<br>        <span class="hljs-comment">//授权页面</span><br>        builder.authorizationUri(<span class="hljs-string">&quot;https://github.com/login/oauth/authorize&quot;</span>);<br>        <span class="hljs-comment">//客户应用使用授权码，向 GitHub 请求令牌</span><br>        builder.tokenUri(<span class="hljs-string">&quot;https://github.com/login/oauth/access_token&quot;</span>);<br>        <span class="hljs-comment">//客户应用使用令牌向GitHub请求用户数据</span><br>        builder.userInfoUri(<span class="hljs-string">&quot;https://api.github.com/user&quot;</span>);<br>        <span class="hljs-comment">//username属性显示GitHub中获取的哪个属性的信息</span><br>        builder.userNameAttributeName(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-comment">//登录页面超链接的文本</span><br>        builder.clientName(<span class="hljs-string">&quot;GitHub&quot;</span>);<br>        <span class="hljs-keyword">return</span> builder;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security学习笔记</title>
    <link href="/2024/02/03/Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/03/Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>该笔记学习b站视频制作而成:<a href="https://www.bilibili.com/video/BV14b4y1A7Wz/?share_source=copy_web&vd_source=db8e7458ec195ac74979ce5478cbc624">Spring Security6</a></p><h3 id="一-Spring-Security-基本功能"><a href="#一-Spring-Security-基本功能" class="headerlink" title="一. Spring Security 基本功能"></a>一. Spring Security 基本功能</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p><a href="https://docs.spring.io/spring-security/reference/index.html">官方文档</a></p><p>Spring Security 是 Spring家族中的一个安全管理框架它提供了更丰富的功能如身份验证、授权、防御常见攻击</p><ul><li>身份验证：验证谁正在访问系统，判断用户使是否为合法用户</li><li>授权：用户在进行身份验证后系统会控制谁能访问哪些资源，这个过程叫授权。也就是权限管理，给不同权限的用户提供不同的功能</li><li>防御常见的攻击<ul><li>CSRF</li><li>HTTP Headers</li><li>HTTP Requests</li></ul></li></ul><br/><hr><h4 id="2-身份验证基础案例"><a href="#2-身份验证基础案例" class="headerlink" title="2. 身份验证基础案例"></a>2. 身份验证基础案例</h4><p><a href="https://github.com/spring-projects/spring-security-sampies/tree/main">官方代码实例</a></p><br/><p>导入先关依赖，这里用到的依赖有Spring Web、Spring Security和Thymeleaf。Spring Boot版本是3.2.0，JDK的版本是17</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;<br>            &lt;artifactId&gt;thymeleaf-extras-springsecurity6&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><br/><p>创建一个controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>创建一个html放在templates下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;https://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello Security!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello Security<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>Log out<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br/><p>启动项目并访问8080端口</p><p>可以看到访问8080端口时会自动跳转到Login页面，这个页面是Spring Security自带的</p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240226153202913.png" alt="image-20240226153202913"></p><br/><p>这里由于没有使用梯子，有css样式没有加载出来</p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240226153453346.png" alt="image-20240226153453346"></p><br/><p>默认的用户名是user，用户密码随机生成并打印在控制台上</p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240226153720217.png" alt="image-20240226153720217"></p><br/><p>登录后就是刚刚添加的index页面</p><p>点击Log out可以退出</p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240226153815915.png" alt="image-20240226153815915"></p><br/><p><strong>Spring Security默认做了许多</strong></p><ul><li>保护应用程序URL，要求对应用程序的任何交互进行身份验证</li><li>程序启动时生成一个默认的用户”user”</li><li>生成一个默认的随机密码，并打印在控制台上</li><li>生成默认的登录表单和注销页面</li><li>提供基于表单的登录和注销流程</li><li>对于Web请求，重新定向到登录页面</li><li>对于服务请求，返回401未授权</li></ul><hr><h4 id="3-SecurityProperties"><a href="#3-SecurityProperties" class="headerlink" title="3. SecurityProperties"></a>3. SecurityProperties</h4><p>SecurityProperties是Spring Security框架中的一个类，在这个类中定义了一些Security相关的属性，例如登录时的默认用户“user”和随机生成的密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(</span><br><span class="hljs-meta">    prefix = &quot;spring.security&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityProperties</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BASIC_AUTH_ORDER</span> <span class="hljs-operator">=</span> <span class="hljs-number">2147483642</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">IGNORED_ORDER</span> <span class="hljs-operator">=</span> Integer.MIN_VALUE;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_FILTER_ORDER</span> <span class="hljs-operator">=</span> -<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityProperties</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.user;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Filter <span class="hljs-title function_">getFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.filter;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Filter</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> -<span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">private</span> Set&lt;DispatcherType&gt; dispatcherTypes = EnumSet.allOf(DispatcherType.class);<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Filter</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.order;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOrder</span><span class="hljs-params">(<span class="hljs-type">int</span> order)</span> &#123;<br>            <span class="hljs-built_in">this</span>.order = order;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Set&lt;DispatcherType&gt; <span class="hljs-title function_">getDispatcherTypes</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dispatcherTypes;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDispatcherTypes</span><span class="hljs-params">(Set&lt;DispatcherType&gt; dispatcherTypes)</span> &#123;<br>            <span class="hljs-built_in">this</span>.dispatcherTypes = dispatcherTypes;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        <span class="hljs-keyword">private</span> List&lt;String&gt; roles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">passwordGenerated</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.password;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>            <span class="hljs-keyword">if</span> (StringUtils.hasLength(password)) &#123;<br>                <span class="hljs-built_in">this</span>.passwordGenerated = <span class="hljs-literal">false</span>;<br>                <span class="hljs-built_in">this</span>.password = password;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getRoles</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.roles;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoles</span><span class="hljs-params">(List&lt;String&gt; roles)</span> &#123;<br>            <span class="hljs-built_in">this</span>.roles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(roles);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPasswordGenerated</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.passwordGenerated;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>我们可以通过自定义配置在<code>application.properties</code>中来定义用户名和密码<br>设置好的用户名和登录密码会替换掉<code>SecurityProperties</code>类中的，控制台也不再打印密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prop">spring.security.user.name=zheng<br>spring.security.user.password=123456<br></code></pre></td></tr></table></figure><br/><hr><h3 id="二-自定义配置"><a href="#二-自定义配置" class="headerlink" title="二. 自定义配置"></a>二. 自定义配置</h3><h4 id="1-基于内存的用户认证"><a href="#1-基于内存的用户认证" class="headerlink" title="1. 基于内存的用户认证"></a>1. 基于内存的用户认证</h4><p>创建一个config类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建基于内存的用户信息管理器</span><br>        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>        <br>        <span class="hljs-comment">// 使用manager管理UserDetails对象</span><br>        manager.createUser(<br>                <span class="hljs-comment">// 创建UserDetails对象，用于管理用户名，用户密码，用户角色，用户权限等内容</span><br>                User.withDefaultPasswordEncoder().username(<span class="hljs-string">&quot;user&quot;</span>).password(<span class="hljs-string">&quot;password&quot;</span>).roles(<span class="hljs-string">&quot;USER&quot;</span>).build()<br>        );<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>启动应用程序</p><p>这时候在<code>application.properties</code>配置的用户名和密码生效，需要使用<code>config</code>类中的用户名和密码</p><br/><hr><h4 id="2-基于内存的用户认证流程"><a href="#2-基于内存的用户认证流程" class="headerlink" title="2. 基于内存的用户认证流程"></a>2. 基于内存的用户认证流程</h4><ul><li>程序启动时：<ul><li>创建<code>InMemoryUserDetailsManger</code>对象</li><li>创建<code>User</code>对象，封装用户名和密码</li><li>使用<code>InMemoryUserDetailsManager</code>将User存入<code>内存</code>中</li></ul></li><li>校验用户<ul><li>Spring Security自动使用<code>InMemoryUserDetailsManager</code>的<code>loadUserByUsername</code>方法从<code>内存</code>中获取User对象</li><li>在<code>UsernamePasswordAuthenticationFilter</code>过滤器中的<code>attemptAuthentication</code>方法中将用户输入的用户名、密码和内存中获取到的用户信息进行比对，进行用户认证</li><li><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240226161031758.png" alt="image-20240226161031758"></li></ul></li></ul><br/><hr><h4 id="3-基于数据库的数据流"><a href="#3-基于数据库的数据流" class="headerlink" title="3. 基于数据库的数据流"></a>3. 基于数据库的数据流</h4><p><strong>创建数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建数据库</span><br><span class="hljs-keyword">CREATE</span> DATABASE `security<span class="hljs-operator">-</span>demo`;<br>USE `security<span class="hljs-operator">-</span>demo`;<br><br><span class="hljs-comment">-- 创建用户表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`(<br>`id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>`username` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,<br>`password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`enabled` <span class="hljs-type">BOOLEAN</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><span class="hljs-comment">-- 唯一索引</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX `user_username_uindex` <span class="hljs-keyword">ON</span> `<span class="hljs-keyword">user</span>`(`username`); <br><br><span class="hljs-comment">-- 插入用户数据(密码是 &quot;password&quot; )</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>` (`username`, `password`, `enabled`) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;&#123;bcrypt&#125;$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#x27;</span>, <span class="hljs-literal">TRUE</span>),<br>(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;&#123;bcrypt&#125;$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#x27;</span>, <span class="hljs-literal">TRUE</span>),<br>(<span class="hljs-string">&#x27;zhengge&#x27;</span>, <span class="hljs-string">&#x27;&#123;bcrypt&#125;$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#x27;</span>, <span class="hljs-literal">TRUE</span>);<br></code></pre></td></tr></table></figure><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240226162231954.png" alt="image-20240226162231954"></p><br/><p><strong>引入依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;8.0.30&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;3.5.4.1&lt;/version&gt;<br>    &lt;exclusions&gt;<br>        &lt;exclusion&gt;<br>            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;<br>        &lt;/exclusion&gt;<br>    &lt;/exclusions&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;<br>    &lt;version&gt;3.0.3&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>    &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><br/><p><strong>配置数据源</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#MySQL数据源</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/security-demo</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">020427</span><br><span class="hljs-comment">#SQL日志</span><br><span class="hljs-attr">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><br/><p><strong>创建实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Boolean enabled;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>创建mapper层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zheng.securitydemo.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.zheng.securitydemo.entiry.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建对应的xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zheng.securitydemo.mapper.UserMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><br/><p><strong>创建service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zheng.securitydemo.service;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><span class="hljs-keyword">import</span> com.zheng.securitydemo.entiry.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zheng.securitydemo.service.ServiceImpl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.zheng.securitydemo.entiry.User;<br><span class="hljs-keyword">import</span> com.zheng.securitydemo.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.zheng.securitydemo.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>创建controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> UserService userService;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.list();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><br/><p><strong>测试</strong></p><p>登录后再访问&#x2F;user&#x2F;list，可以查询出刚刚数据库表中的数据</p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240226170455832.png" alt="image-20240226170455832"></p><br/><hr><h4 id="4-基于数据库的用户认证流程分析"><a href="#4-基于数据库的用户认证流程分析" class="headerlink" title="4. 基于数据库的用户认证流程分析"></a>4. 基于数据库的用户认证流程分析</h4><p>可以看见基于内存的用户信息管理器是实现了<code>UserDetailsManager</code>接口和<code>UserDetailsPasswordService</code>接口，同时在<code>UserDetailsManager</code>接口中声明了创建user的相关方法。所以要创建基于数据库的用户认证，需要创建一个类<code>DBUserDetailsManger</code>来实现<code>UserDetailsManager</code>接口和<code>UserDetailsPasswordService</code>接口，充当用户信息管理器的身份</p><img src="./Spring-Security学习笔记/image-20240226170817342.png" alt="image-20240226170817342" style="zoom: 67%;" /><br/><img src="./Spring-Security学习笔记/image-20240226170956445.png" alt="image-20240226170956445" style="zoom:67%;" /><br/><p><strong>流程</strong></p><ul><li>程序启动时：<ul><li>创建<code>DBUserDetailsManger</code>类的对象，实现<code>UserDetailsManager</code>接口和<code>UserDetailsPasswordService</code>接口</li></ul></li><li>校验用户<ul><li>Spring Security自动使用<code>DBUserDetailsManger</code>的<code>loadUserByUsername</code>方法从<code>数据库</code>中获取User对象</li><li>在<code>UsernamePasswordAuthenticationFilter</code>过滤器中的<code>attemptAuthentication</code>方法中将用户输入的用户名、密码和内存中获取到的用户信息进行比对，进行用户认证</li></ul></li></ul><br/><h4 id="5-基于数据库的用户认证实现"><a href="#5-基于数据库的用户认证实现" class="headerlink" title="5. 基于数据库的用户认证实现"></a>5. 基于数据库的用户认证实现</h4><p>创建DBUserDetailsManger类并实现<code>UserDetailsManager</code>接口和<code>UserDetailsPasswordService</code>接口<br>用户登录验证的流程在<code>loadUserByUsername</code>方法中实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zheng.securitydemo.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.zheng.securitydemo.entiry.User;<br><span class="hljs-keyword">import</span> com.zheng.securitydemo.mapper.UserMapper;<br><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsPasswordService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.security.provisioning.UserDetailsManager;<br><br><span class="hljs-keyword">import</span> java.util.ArrayDeque;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DBUserDetailsManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsManager</span>, UserDetailsPasswordService &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(UserDetails user, String newPassword)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createUser</span><span class="hljs-params">(UserDetails user)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(UserDetails user)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(String username)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassword</span><span class="hljs-params">(String oldPassword, String newPassword)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">userExists</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>: 从数据库中获取用户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br><br>        <span class="hljs-comment">// 组装查询条件</span><br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;username&quot;</span>, username);<span class="hljs-comment">// 通过usernam查询</span><br>        <span class="hljs-comment">// 获取用户信息</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<br><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 没有获取到用户信息</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(username);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            Collection&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<span class="hljs-comment">// 权限列表</span><br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.core.userdetails.User(<br>                    user.getUsername(),<br>                    user.getPassword(),<br>                    user.getEnabled(),<br>                    <span class="hljs-literal">true</span>, <span class="hljs-comment">// user.isAccountNonExpired(), 用户账号是否过期</span><br>                    <span class="hljs-literal">true</span>, <span class="hljs-comment">// user.isCredentialsNonExpired(), 用户凭证是否过期</span><br>                    <span class="hljs-literal">true</span>, <span class="hljs-comment">//user.isAccountNonLocked(), 用户是否未被锁定</span><br>                    authorities <span class="hljs-comment">//user.getAuthorities()); 权限列表</span><br>            );<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>测试，把config中<code>UserDetailsService</code>的代码注释掉，然后启动程序</p><p>输入数据库中的账号密码然后登录成功</p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240226173539970.png" alt="image-20240226173539970"></p><br/><hr><h4 id="6-Spring-Security的默认配置"><a href="#6-Spring-Security的默认配置" class="headerlink" title="6. Spring Security的默认配置"></a>6. Spring Security的默认配置</h4><p>在Spring Security中有以下默认配置,默认的登录页面开启也是在这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <br>    <br>    <br>    <span class="hljs-comment">// 开启授权保护</span><br>    http.authorizeRequests(authorize -&gt; <br>                           authorize.anyRequest() <span class="hljs-comment">// anyRequest()：对所有请求开启授权保护</span><br>                           .authenticated()) <span class="hljs-comment">// authenticated()：已认证请求会自动被授权</span><br>        .formLogin(withDefaults()) <span class="hljs-comment">// 表单授权方式</span><br>        .httpBasic(withDefaults()); <span class="hljs-comment">// 基本授权方式</span><br><br>    <span class="hljs-keyword">return</span> http.build();<br>&#125;<br></code></pre></td></tr></table></figure><br/><hr><h4 id="7-添加用户功能实现"><a href="#7-添加用户功能实现" class="headerlink" title="7. 添加用户功能实现"></a>7. 添加用户功能实现</h4><p>在UserController中添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    userService.saveUserDetails(user);<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>在UserServiceImpl实现中添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> DBUserDetailsManager dbUserDetailsManager;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUserDetails</span><span class="hljs-params">(User user)</span> &#123;<br><br>    <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> org.springframework.security.core.userdetails.User<br>            .withDefaultPasswordEncoder()<br>            .username(user.getUsername()) <span class="hljs-comment">//自定义用户名</span><br>            .password(user.getPassword()) <span class="hljs-comment">//自定义密码</span><br>            .build();<br>    dbUserDetailsManager.createUser(userDetails);<br><br>&#125;<br></code></pre></td></tr></table></figure><br/><p>修改<code>DBUserDetailsManager</code>中的<code>createUser</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 向数据库中插入新的信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createUser</span><span class="hljs-params">(UserDetails userDetails)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(userDetails.getUsername());<br>    user.setPassword(userDetails.getPassword());<br>    user.setEnabled(<span class="hljs-literal">true</span>);<br><br>    userMapper.insert(user);<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>测试</strong></p><p>引入swagger依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--swagger测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br/><p>启动项目并登录，然后进入doc.html页面</p><img src="./Spring-Security学习笔记/image-20240226181234369.png" alt="image-20240226181234369" style="zoom: 50%;" /><br/><p>由于没有编写前端，无法向后端传递csrf验证，所以先关闭csrf防御</p><p>在上面的默认配置<code>filterChain</code>中添加一下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 关闭csrf攻击防御</span><br>http.csrf(csrf -&gt; csrf.disable());<br></code></pre></td></tr></table></figure><img src="./Spring-Security学习笔记/image-20240226181948070.png" alt="image-20240226181948070" style="zoom:67%;" /><br/><p>重新启动项目，进行调试</p><img src="./Spring-Security学习笔记/image-20240226182143008.png" alt="image-20240226182143008" style="zoom: 50%;" /><br/><p>发送请求后刷新数据库，可以看到zhangsan已经添加到数据库中</p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240226182241051.png" alt="image-20240226182241051"></p><br/><p>删除，修改用户的过程和添加大致一样</p><br/><hr><h4 id="8-密码加密算法"><a href="#8-密码加密算法" class="headerlink" title="8. 密码加密算法"></a>8. 密码加密算法</h4><p><strong>明文密码：</strong></p><p>最初，密码以明文形式存储在数据库中。但是恶意用户可能会通过SQL注入等手段获取到明文密码，或者程序员将数据库数据泄露的情况也可能发生。</p><br/><p><strong>Hash算法：</strong></p><p>Spring Security的<code>PasswordEncoder</code>接口用于对密码进行<code>单向转换</code>，从而将密码安全地存储。对密码单向转换需要用到<code>哈希算法</code>，例如MD5、SHA-256、SHA-512等，哈希算法是单向的，<code>只能加密，不能解密</code>。</p><p>因此，<code>数据库中存储的是单向转换后的密码</code>，Spring Security在进行用户身份验证时需要将用户输入的密码进行单向转换，然后与数据库的密码进行比较。</p><p>因此，如果发生数据泄露，只有密码的单向哈希会被暴露。由于哈希是单向的，并且在给定哈希的情况下只能通过<code>暴力破解的方式猜测密码</code>。</p><br/><p><strong>彩虹表：</strong></p><p>恶意用户创建称为<code>彩虹表</code>的查找表。</p><p>彩虹表就是一个庞大的、针对各种可能的字母组合预先生成的哈希值集合，有了它可以快速破解各类密码。越是复杂的密码，需要的彩虹表就越大，主流的彩虹表都是100G以上，目前主要的算法有LM, NTLM, MD5, SHA1, MYSQLSHA1, HALFLMCHALL, NTLMCHALL, ORACLE-SYSTEM, MD5-HALF。</p><br/><p><strong>加盐密码：</strong></p><p>为了减轻彩虹表的效果，开发人员开始使用加盐密码。不再只使用密码作为哈希函数的输入，而是为每个用户的密码生成随机字节（称为盐）。盐和用户的密码将一起经过哈希函数运算，生成一个唯一的哈希。盐将以明文形式与用户的密码一起存储。然后，当用户尝试进行身份验证时，盐和用户输入的密码一起经过哈希函数运算，再与存储的密码进行比较。唯一的盐意味着彩虹表不再有效，因为对于每个盐和密码的组合，哈希都是不同的。</p><br/><p><strong>自适应单向函数：</strong></p><p>随着硬件的不断发展，加盐哈希也不再安全。原因是，计算机可以每秒执行数十亿次哈希计算。这意味着我们可以轻松地破解每个密码。</p><p>现在，开发人员开始使用自适应单向函数来存储密码。使用自适应单向函数验证密码时，<code>故意占用资源（故意使用大量的CPU、内存或其他资源）</code>。自适应单向函数允许配置一个<code>“工作因子”</code>，随着硬件的改进而增加。我们建议将“工作因子”调整到系统中验证密码需要约一秒钟的时间。这种权衡是为了<code>让攻击者难以破解密码</code>。</p><p>自适应单向函数包括<code>bcrypt、PBKDF2、scrypt和argon2</code>。Spring Security 默认采用的是bcrypt</p><br/><p><strong>BCryptPasswordEncoder(bcryot)</strong></p><p>使用广泛支持的bcrypt算法来对密码进行哈希。为了增加对密码破解的抵抗力，bcrypt故意设计得较慢。和其他自适应单向函数一样，应该调整其参数，使其在您的系统上验证一个密码大约需要1秒的时间。BCryptPasswordEncoder的默认实现使用强度10。建议您在自己的系统上调整和测试强度参数，以便验证密码时大约需要1秒的时间。</p><br/><p><strong>Argon2PasswordEncoder(argon2)</strong></p><p>使用Argon2算法对密码进行哈希处理。Argon2是密码哈希比赛的获胜者。为了防止在自定义硬件上进行密码破解，Argon2是一种故意缓慢的算法，需要大量内存。与其他自适应单向函数一样，它应该在您的系统上调整为大约1秒来验证一个密码。当前的Argon2PasswordEncoder实现需要使用BouncyCastle库。</p><br/><p><strong>Pbkdf2PasswordEncoder(PBKDF2)</strong></p><p>使用PBKDF2算法对密码进行哈希处理。为了防止密码破解，PBKDF2是一种故意缓慢的算法。与其他自适应单向函数一样，它应该在您的系统上调整为大约1秒来验证一个密码。当需要FIPS认证时，这种算法是一个很好的选择。</p><br/><p><strong>SCryptPasswordEncoder(scrypt)</strong> </p><p>使用scrypt算法对密码进行哈希处理。为了防止在自定义硬件上进行密码破解，scrypt是一种故意缓慢的算法，需要大量内存。与其他自适应单向函数一样，它应该在您的系统上调整为大约1秒来验证一个密码。</p><br/><p><strong>在测试类进行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPassword</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">// 工作因子，默认值是10，最小值是4，最大值是31，值越大运算速度越慢</span><br>    <span class="hljs-type">PasswordEncoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-comment">//明文：&quot;password&quot;</span><br>    <span class="hljs-comment">//密文：result，即使明文密码相同，每次生成的密文也不一致</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> encoder.encode(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(result);<br><br>    <span class="hljs-comment">//密码校验</span><br>    Assert.isTrue(encoder.matches(<span class="hljs-string">&quot;password&quot;</span>, result), <span class="hljs-string">&quot;密码不一致&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="./Spring-Security学习笔记/image-20240226185017817.png" alt="image-20240226185017817" style="zoom:67%;" /><br/><hr><h4 id="9-自定义登录页"><a href="#9-自定义登录页" class="headerlink" title="9. 自定义登录页"></a>9. 自定义登录页</h4><p>创建LoginController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>在templates目录下创建login.html登录页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;https://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;param.error&#125;&quot;</span>&gt;</span><br>    错误的用户名和密码.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--method必须为&quot;post&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--th:action=&quot;@&#123;/login&#125;&quot; ，</span><br><span class="hljs-comment">使用动态参数，表单中会自动生成_csrf隐藏字段，用于防止csrf攻击</span><br><span class="hljs-comment">login: 和登录页面保持一致即可，SpringSecurity自动进行登录认证--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/login&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--name必须为&quot;username&quot;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--name必须为&quot;password&quot;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br/><p>修改filterChain中的配置,修改formLogin中的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 开启授权保护</span><br>        http.authorizeRequests(authorize -&gt;<br>                        authorize.anyRequest() <span class="hljs-comment">// anyRequest()：对所有请求开启授权保护</span><br>                                .authenticated()) <span class="hljs-comment">// authenticated()：已认证请求会自动被授权</span><br>                .formLogin(form -&gt; &#123;<br>                    form.loginPage(<span class="hljs-string">&quot;/login&quot;</span>).permitAll();<br>                &#125;); <span class="hljs-comment">// 使用表单授权登录方式</span><br><span class="hljs-comment">//                .httpBasic(withDefaults()); // 基本授权方式</span><br><br>        <span class="hljs-comment">// 关闭csrf攻击防御</span><br>        http.csrf(csrf -&gt; csrf.disable());<br><br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br></code></pre></td></tr></table></figure><img src="./Spring-Security学习笔记/image-20240226192523742.png" alt="image-20240226192523742" style="zoom:67%;" /><br/><p>运行项目，这是项目的登录页面已经改为自定义的登录页面</p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240226192702309.png" alt="image-20240226192702309"></p><br/><hr><h3 id="三-前后端分离"><a href="#三-前后端分离" class="headerlink" title="三. 前后端分离"></a>三. 前后端分离</h3><h4 id="1-用户认证成功代码实现"><a href="#1-用户认证成功代码实现" class="headerlink" title="1. 用户认证成功代码实现"></a>1. 用户认证成功代码实现</h4><p><strong>用户认证流程</strong></p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240304121307712.png" alt="image-20240304121307712"></p><br/><p><strong>引入<code>fastjson</code>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.37<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br/><p><strong>用户认证成功代码实现</strong></p><p>创建一个自定义类MyAuthenticationSuccessHandler实现接口<code>AuthenticationSuccessHandler</code>，并实现接口中的方法<code>onAuthenticationSuccess</code>，然后在方法中编写用户认证成功后的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 用户登录成功时返回的信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthenticationSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> authentication.getPrincipal(); <span class="hljs-comment">// 获取用户身份信息</span><br><span class="hljs-comment">//        Object credentials = authentication.getCredentials(); // 获取用户凭证信息</span><br><span class="hljs-comment">//        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities(); // 获取用户权限信息</span><br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        result.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 成功</span><br>        result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;登录成功&quot;</span>);<br>        result.put(<span class="hljs-string">&quot;data&quot;</span>, principal);<br><br>        <span class="hljs-comment">// 将结果对象转换成json字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br><br>        <span class="hljs-comment">// 返回json数据到前端</span><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        response.getWriter().println(json);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>在WebSecurityConfig类的<code>filterChain</code>方法中添加相关代码</strong></p><img src="./Spring-Security学习笔记/image-20240304124017181.png" alt="image-20240304124017181" style="zoom:67%;" /><br/><p><strong>测试</strong></p><p>登录成功后返回相关信息</p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240304124120562.png" alt="image-20240304124120562"></p><br/><hr><h4 id="2-用户认证失败代码实现"><a href="#2-用户认证失败代码实现" class="headerlink" title="2. 用户认证失败代码实现"></a>2. 用户认证失败代码实现</h4><p>创建一个自定义类MyAuthenticationFailureHandler实现接口<code>AuthenticationFailureHandler</code>，并实现接口中的方法<code>onAuthenticationFailure</code>，然后在方法中编写用户认证失败后的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthenticationFailureHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationFailureHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">localizedMessage</span> <span class="hljs-operator">=</span> exception.getLocalizedMessage();<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        result.put(<span class="hljs-string">&quot;code&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 失败</span><br>        result.put(<span class="hljs-string">&quot;message&quot;</span>, localizedMessage);<br><br>        <span class="hljs-comment">// 将结果对象转换成json字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br><br>        <span class="hljs-comment">// 返回json数据到前端</span><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        response.getWriter().println(json);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>在WebSecurityConfig类的<code>filterChain</code>方法中添加相关代码</strong></p><img src="./Spring-Security学习笔记/image-20240304124915432.png" alt="image-20240304124915432" style="zoom: 67%;" /><br/><p><strong>测试</strong></p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240304125601732.png"></p><br/><hr><h4 id="3-注销用户处理"><a href="#3-注销用户处理" class="headerlink" title="3. 注销用户处理"></a>3. 注销用户处理</h4><p>创建一个自定义类MyLogoutSuccessHandler实现接口<code>LogoutSuccessHandler</code>，并实现接口中的方法<code>onLogoutSuccess</code>，然后在方法中编写用户注销后的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLogoutSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LogoutSuccessHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLogoutSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        result.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 成功</span><br>        result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;注销成功&quot;</span>);<br><br>        <span class="hljs-comment">// 将结果对象转换成json字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br><br>        <span class="hljs-comment">// 返回json数据到前端</span><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        response.getWriter().println(json);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>在WebSecurityConfig类的<code>filterChain</code>方法中添加相关代码</strong></p><img src="./Spring-Security学习笔记/image-20240309143734049.png" alt="image-20240309143734049" style="zoom:67%;" /><br/><p><strong>测试</strong></p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240309143755391.png" alt="image-20240309143755391"></p><br/><hr><h4 id="4-请求未认证处理"><a href="#4-请求未认证处理" class="headerlink" title="4. 请求未认证处理"></a>4. 请求未认证处理</h4><p>创建一个自定义类MyAuthenticationEntryPoint实现接口<code>AuthenticationEntryPoint</code>，并实现接口中的方法<code>commence</code>，然后在方法中编写用户请求未认证处理的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthenticationEntryPoint</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">localizedMessage</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;需要登录&quot;</span>;<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        result.put(<span class="hljs-string">&quot;code&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 失败</span><br>        result.put(<span class="hljs-string">&quot;message&quot;</span>, localizedMessage);<br><br>        <span class="hljs-comment">// 将结果对象转换成json字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br><br>        <span class="hljs-comment">// 返回json数据到前端</span><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        response.getWriter().println(json);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>在WebSecurityConfig类的<code>filterChain</code>方法中添加相关代码</strong></p><img src="./Spring-Security学习笔记/image-20240309144613206.png" alt="image-20240309144613206" style="zoom:67%;" /><br/><p><strong>测试</strong></p><img src="./Spring-Security学习笔记/image-20240309144642539.png" alt="image-20240309144642539" style="zoom:80%;" /><br/><hr><h4 id="5-跨域处理"><a href="#5-跨域处理" class="headerlink" title="5. 跨域处理"></a>5. 跨域处理</h4><p>跨域全称是跨域资源共享(Cross-Origin Resources Sharing,CORS)，它是浏览器的保护机制，只允许网页请求统一域名下的服务，同一域名指&#x3D;&gt;协议、域名、端口号都要保持一致，如果有一项不同，那么就是跨域请求。在前后端分离的项目中，需要解决跨域的问题。</p><br/><p>在SpringSecurity中解决跨域很简单，在配置文件中添加如下配置即可,在WebSecurityConfig类的<code>filterChain</code>方法中添加相关代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//跨域</span><br>http.cors(withDefaults());<br></code></pre></td></tr></table></figure><img src="./Spring-Security学习笔记/image-20240309144920726.png" alt="image-20240309144920726" style="zoom:67%;" /><br/><hr><h4 id="6-用户认证信息"><a href="#6-用户认证信息" class="headerlink" title="6. 用户认证信息"></a>6. 用户认证信息</h4><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240309150919383.png" alt="image-20240309150919383"></p><p>在Spring Security框架中，SecurityContextHolder、SecurityContext、Authentication、Principal和Credential是一些与身份验证和授权相关的重要概念。它们之间的关系如下：</p><ol><li>SecurityContextHolder：SecurityContextHolder 是 Spring Security 存储已认证用户详细信息的地方。</li><li>SecurityContext：SecurityContext 是从 SecurityContextHolder 获取的内容，包含当前已认证用户的 Authentication 信息。</li><li>Authentication：Authentication 表示用户的身份认证信息。它包含了用户的Principal、Credential和Authority信息。</li><li>Principal：表示用户的身份标识。它通常是一个表示用户的实体对象，例如用户名。Principal可以通过Authentication对象的getPrincipal()方法获取。</li><li>Credentials：表示用户的凭证信息，例如密码、证书或其他认证凭据。Credential可以通过Authentication对象的getCredentials()方法获取。</li><li>GrantedAuthority：表示用户被授予的权限</li></ol><p>总结起来，SecurityContextHolder用于管理当前线程的安全上下文，存储已认证用户的详细信息，其中包含了SecurityContext对象，该对象包含了Authentication对象，后者表示用户的身份验证信息，包括Principal（用户的身份标识）和Credential（用户的凭证信息）。</p><br/><p><strong>在controller中获取用户信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext(); <span class="hljs-comment">// 存储认证对象的上下文</span><br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> context.getAuthentication(); <span class="hljs-comment">// 认证对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> authentication.getPrincipal(); <span class="hljs-comment">// 用户名</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">credentials</span> <span class="hljs-operator">=</span> authentication.getCredentials(); <span class="hljs-comment">// 身份</span><br>        Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; authorities = authentication.getAuthorities(); <span class="hljs-comment">// 凭证(脱敏)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> authentication.getName(); <span class="hljs-comment">// 权限</span><br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        result.put(<span class="hljs-string">&quot;username&quot;</span>, name);<br>        result.put(<span class="hljs-string">&quot;authorities&quot;</span>, authorities);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>测试</strong></p><img src="./Spring-Security学习笔记/image-20240309152816434.png" alt="image-20240309152816434" style="zoom:67%;" /><br/><hr><h4 id="7-会话并发处理"><a href="#7-会话并发处理" class="headerlink" title="7. 会话并发处理"></a>7. 会话并发处理</h4><p>创建一个自定义类MySessionInformationExpiredStrategy实现接口<code>SessionInformationExpiredStrategy</code>，并实现接口中的方法<code>onExpiredSessionDetected</code>，然后在方法中编写会话并发处理的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySessionInformationExpiredStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SessionInformationExpiredStrategy</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onExpiredSessionDetected</span><span class="hljs-params">(SessionInformationExpiredEvent event)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>        <span class="hljs-comment">//创建结果对象</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        result.put(<span class="hljs-string">&quot;code&quot;</span>, -<span class="hljs-number">1</span>);<br>        result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;该账号已从其他设备登录&quot;</span>);<br><br>        <span class="hljs-comment">//转换成json字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br><br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> event.getResponse();<br>        <span class="hljs-comment">//返回响应</span><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        response.getWriter().println(json);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>在WebSecurityConfig类的<code>filterChain</code>方法中添加相关代码</strong></p><img src="./Spring-Security学习笔记/image-20240309153516589.png" alt="image-20240309153516589" style="zoom:67%;" /><br/><p><strong>测试</strong></p><p>先在一个浏览器登录，然后再在另一个浏览器登录同一个用户，然后访问第一个浏览器登录后的主页会提升该账号已从其他设备登录，由于电脑只有一个浏览器，没有做测试了</p><br/><hr><h3 id="四-授权"><a href="#四-授权" class="headerlink" title="四. 授权"></a>四. 授权</h3><p>授权管理的实现在SpringSecurity中非常灵活，可以帮助应用程序实现以下两种常见的授权需求：</p><ul><li><p>用户-权限-资源：例如张三的权限是添加用户、查看用户列表，李四的权限是查看用户列表</p></li><li><p>用户-角色-权限-资源：例如 张三是角色是管理员、李四的角色是普通用户，管理员能做所有操作，普通用户只能查看信息</p></li></ul><br/><h4 id="1-基于request的授权"><a href="#1-基于request的授权" class="headerlink" title="1. 基于request的授权"></a>1. 基于request的授权</h4><p><strong>需求</strong></p><ul><li>具有USER_LIST权限的用户可以访问&#x2F;user&#x2F;list接口</li><li>具有USER_ADD权限的用户可以访问&#x2F;user&#x2F;add接口</li></ul><br/><p><strong>在WebSecurityConfig的<code>filterChain</code>方法中添加相关配置</strong></p><img src="./Spring-Security学习笔记/image-20240310131859424.png" alt="image-20240310131859424" style="zoom:67%;" /><ul><li>requestMatchers(“&#x2F;user&#x2F;list”).hasAuthority(“USER_LIST”)<ul><li>用户要有<code>USER_LIST</code>权限，才能访问<code>/user/list</code>,其它同理</li></ul></li></ul><br/><p><strong>实际开发中一般都会用一个数据库表来记录用户权限或者给用户表添加一个权限字段，这里为了方便测试，直接在用户登录时就给他赋予权限</strong></p><p><strong>在DBUserDetailsManager类中的<code>loadUserByUsername</code>方法中给用户赋予相关权限（方便测试）</strong></p><img src="./Spring-Security学习笔记/image-20240310132422436.png" alt="image-20240310132422436" style="zoom:67%;" /><br/><p><strong>测试</strong></p><p>登录后再访问&#x2F;user&#x2F;list</p><img src="./Spring-Security学习笔记/image-20240310132450603.png" alt="image-20240310132450603" style="zoom:50%;" /><br/><p>去掉list权限后重新启动再次访问</p><img src="./Spring-Security学习笔记/image-20240310132652899.png" alt="image-20240310132652899" style="zoom:80%;" /><br/><hr><h4 id="2-请求未授权处理"><a href="#2-请求未授权处理" class="headerlink" title="2. 请求未授权处理"></a>2. 请求未授权处理</h4><p>创建一个自定义类MyAccessDeniedHandler实现接口<code>AccessDeniedHandler</code>，并实现接口中的方法<code>handle</code>，然后在方法中编写用户请求未授权处理的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAccessDeniedHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        result.put(<span class="hljs-string">&quot;code&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 失败</span><br>        result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;没有访问权限&quot;</span>);<br><br>        <span class="hljs-comment">// 将结果对象转换成json字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br><br>        <span class="hljs-comment">// 返回json数据到前端</span><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        response.getWriter().println(json);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>在WebSecurityConfig类的<code>filterChain</code>方法中添加相关代码</strong></p><img src="./Spring-Security学习笔记/image-20240310134315047.png" alt="image-20240310134315047" style="zoom: 67%;" /><br/><p><strong>测试</strong></p><img src="./Spring-Security学习笔记/image-20240310134343272.png" alt="image-20240310134343272" style="zoom:67%;" /><br/><hr><h4 id="3-角色分配"><a href="#3-角色分配" class="headerlink" title="3. 角色分配"></a>3. 角色分配</h4><p><strong>需求：</strong>角色为ADMIN的用户才可以访问&#x2F;user&#x2F;**路径下的资源</p><br/><p><strong>在WebSecurityConfig的<code>filterChain</code>方法中添加相关配置</strong></p><img src="./Spring-Security学习笔记/image-20240310140642332.png" alt="image-20240310140642332" style="zoom:67%;" /><br/><p><strong>实际开发中一般都会用一个数据库表来记录用户权限或者给用户表添加一个权限字段，这里为了方便测试，直接在用户登录时就给他赋予权限</strong></p><p><strong>在DBUserDetailsManager类中的<code>loadUserByUsername</code>方法中给用户赋予相关权限（方便测试）</strong></p><img src="./Spring-Security学习笔记/image-20240310140908349.png" alt="image-20240310140908349" style="zoom:67%;" /><br/><p><strong>测试</strong></p><p>登录成功后可以看见用户的权限</p><img src="./Spring-Security学习笔记/image-20240310140951186.png" alt="image-20240310140951186" style="zoom:67%;" /><br/><p>访问<code>/user/list</code></p><img src="./Spring-Security学习笔记/image-20240310141023954.png" alt="image-20240310141023954" style="zoom:67%;" /><br/><p>修改用户登录时赋予的权限，再次访问</p><img src="./Spring-Security学习笔记/image-20240310141130289.png" alt="image-20240310141130289" style="zoom:67%;" /><br/><p>重新启动并登录</p><img src="./Spring-Security学习笔记/image-20240310141224679.png" alt="image-20240310141224679" style="zoom:67%;" /><br/><p>再次访问<code>user/list</code></p><img src="./Spring-Security学习笔记/image-20240310141259589.png" alt="image-20240310141259589" style="zoom:67%;" /><br/><hr><h4 id="4-RBAC"><a href="#4-RBAC" class="headerlink" title="4. RBAC"></a>4. RBAC</h4><p>RBAC（Role-Based Access Control，基于角色的访问控制）是一种常用的数据库设计方案，它将用户的权限分配和管理与角色相关联。以下是一个基本的RBAC数据库设计方案的示例：</p><ol><li>用户表（User table）：包含用户的基本信息，例如用户名、密码和其他身份验证信息。</li></ol><table><thead><tr><th>列名</th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>user_id</td><td>int</td><td>用户ID</td></tr><tr><td>username</td><td>varchar</td><td>用户名</td></tr><tr><td>password</td><td>varchar</td><td>密码</td></tr><tr><td>email</td><td>varchar</td><td>电子邮件地址</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><ol start="2"><li>角色表（Role table）：存储所有可能的角色及其描述。</li></ol><table><thead><tr><th>列名</th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>role_id</td><td>int</td><td>角色ID</td></tr><tr><td>role_name</td><td>varchar</td><td>角色名称</td></tr><tr><td>description</td><td>varchar</td><td>角色描述</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><ol start="3"><li>权限表（Permission table）：定义系统中所有可能的权限。</li></ol><table><thead><tr><th>列名</th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>permission_id</td><td>int</td><td>权限ID</td></tr><tr><td>permission_name</td><td>varchar</td><td>权限名称</td></tr><tr><td>description</td><td>varchar</td><td>权限描述</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><ol start="4"><li>用户角色关联表（User-Role table）：将用户与角色关联起来。</li></ol><table><thead><tr><th>列名</th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>user_role_id</td><td>int</td><td>用户角色关联ID</td></tr><tr><td>user_id</td><td>int</td><td>用户ID</td></tr><tr><td>role_id</td><td>int</td><td>角色ID</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><ol start="5"><li>角色权限关联表（Role-Permission table）：将角色与权限关联起来。</li></ol><table><thead><tr><th>列名</th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>role_permission_id</td><td>int</td><td>角色权限关联ID</td></tr><tr><td>role_id</td><td>int</td><td>角色ID</td></tr><tr><td>permission_id</td><td>int</td><td>权限ID</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>在这个设计方案中，用户可以被分配一个或多个角色，而每个角色又可以具有一个或多个权限。通过对用户角色关联和角色权限关联表进行操作，可以实现灵活的权限管理和访问控制。</p><p>当用户尝试访问系统资源时，系统可以根据用户的角色和权限决定是否允许访问。这样的设计方案使得权限管理更加简单和可维护，因为只需调整角色和权限的分配即可，而不需要针对每个用户进行单独的设置。</p><p>RABC的详细介绍可以参考这篇文章<a href="http://t.csdnimg.cn/Tl60Y">http://t.csdnimg.cn/Tl60Y</a></p><br/><hr><h4 id="5-基于方法的授权"><a href="#5-基于方法的授权" class="headerlink" title="5. 基于方法的授权"></a>5. 基于方法的授权</h4><p>开启方法授权注解，在<code>WebSecurityConfig</code>配置类中开启</p><img src="./Spring-Security学习笔记/image-20240310144001999.png" alt="image-20240310144001999" style="zoom:67%;" /><br/><p>把之前的权限给注释掉</p><img src="./Spring-Security学习笔记/image-20240310144059051.png" alt="image-20240310144059051" style="zoom:67%;" /><br/><p>在方法上添加注解</p><img src="./Spring-Security学习笔记/image-20240310144230391.png" alt="image-20240310144230391" style="zoom:67%;" /><Br/><p><strong>测试</strong></p><img src="./Spring-Security学习笔记/image-20240310144326806.png" alt="image-20240310144326806" style="zoom:67%;" /><p>访问&#x2F;user&#x2F;list</p><img src="./Spring-Security学习笔记/image-20240310144531297.png" alt="image-20240310144531297" style="zoom: 50%;" /><br/><p>可以在方法注解中添加authentication属性</p><ul><li>@PreAuthorize(“hasRole(‘ADMIN’) and authentication.name &#x3D; ‘admin’”)<ul><li>用户要用于AMDIN权限，并且用户名为admin，才能访问次方法</li></ul></li></ul><img src="./Spring-Security学习笔记/image-20240310144650970.png" alt="image-20240310144650970" style="zoom:67%;" /><br/><p><strong>还可以使用另一种注解方式</strong></p><p>@PreAuthorize(“hasAuthority(‘USER_ADD’)”)，权限认证，上面的是角色认证</p><p>这时候需要给User(Security框架中的User)分配相关的权限</p><img src="./Spring-Security学习笔记/image-20240310145624304.png" alt="image-20240310145624304" style="zoom:67%;" /><br/><p><strong>重启登录后发现，角色权限ADMIN没了，因为authorities配置覆盖了roles配置（谁在后面谁生效），这两个不能同时使用</strong></p><p><img src="/./Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240310145712509.png" alt="image-20240310145712509"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus</title>
    <link href="/2024/01/02/MyBatis-Plus/"/>
    <url>/2024/01/02/MyBatis-Plus/</url>
    
    <content type="html"><![CDATA[<p>MyBatis-Plus （简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><a href="https://baomidou.com/">官方文档</a></p><hr><h3 id="1-常见注解"><a href="#1-常见注解" class="headerlink" title="1. 常见注解"></a>1. 常见注解</h3><p>MyBatis-Plus通过扫描实体类，并基于反射来获取实体类信息作为数据库表信息(基础BaseMapper时添加泛型)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String info;<br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-keyword">private</span> Integer balance;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>映射规则：</p><ul><li>类名驼峰下划线作为表明</li><li>名为id的字段作为表的主键</li><li>变量名驼峰下换线作为表的字段名</li></ul><p>mp通过反射获取到数据库表信息后就可以帮我们生成SQL语句</p><br/><p>MyBatis-Plus中比较常用的几个注解：</p><ul><li>@TableName：指定数据库表名称</li><li>@TableId：指定数据库表中的主键<ul><li>可以设置主键生成类型，通过在注解中添加type属性实现，type属性的值封装在IdType中<ul><li>AUTO：自增</li><li>INPUT ：通过set方法自行输入</li><li>ASSIGN_ID：分配ID，通过接口IdentifierGenerator的方法nextId来生成ID，采用雪花算法</li></ul></li></ul></li><li>@TableFiled：指定数据库表中的普通字段信息<ul><li>使用场景：<ul><li>成员变量名与数据库字段名不一致</li><li>成员变量名以is开头并且是布尔值</li><li>成员变量名与数据库攻击值冲突</li><li>成员变量不是数据库字段</li></ul></li></ul></li></ul><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableName(&quot;tb_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-meta">@TableId(Value=&quot;u_id&quot;, type=&quot;IdType.AUTO&quot;)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-meta">@TableFileId(&quot;username&quot;)</span><br>    <span class="hljs-keyword">private</span> String Name;<br>    <span class="hljs-meta">@TableFileId(&quot;is_married&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isMarried;<br>    <span class="hljs-meta">@TableFiledId(&quot;`order`&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer order;<br>    <span class="hljs-meta">@TableFIledId(exist = false)</span><br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br></code></pre></td></tr></table></figure><br/><hr><h3 id="2-常见配置"><a href="#2-常见配置" class="headerlink" title="2. 常见配置"></a>2. 常见配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapping/*.xml</span> <span class="hljs-comment"># Mapper.xml文件地址（这里是默认值）</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.rainng.coursesystem.model</span> <span class="hljs-comment"># 别名扫描包</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否开启下划线和驼峰的映射</span><br>    <span class="hljs-attr">cache-enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否开启二级缓存</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">assign_id</span> <span class="hljs-comment"># id为雪花算法自动生成</span><br>      <span class="hljs-attr">update-strategy:</span> <span class="hljs-string">not_null</span> <span class="hljs-comment"># 更新策略：只更新非空的字段</span><br></code></pre></td></tr></table></figure><p>这里除了type-aliases-package，其它的都不需要配置，默认值即可（上面的值就是默认值），除非有需要</p><br/><hr><h3 id="3-CRUD接口"><a href="#3-CRUD接口" class="headerlink" title="3. CRUD接口"></a>3. CRUD接口</h3><p>官方文档：<a href="https://baomidou.com/pages/49cc81/#service-crud-%E6%8E%A5%E5%8F%A3">CRUD 接口 | MyBatis-Plus (baomidou.com)</a></p><p><strong>Service层</strong></p><p>Save</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 插入一条记录（选择字段，策略插入）</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">save</span><span class="hljs-params">(T entity)</span>;<br><span class="hljs-comment">// 插入（批量）</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveBatch</span><span class="hljs-params">(Collection&lt;T&gt; entityList)</span>;<br><span class="hljs-comment">// 插入（批量,设置插入批次）</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveBatch</span><span class="hljs-params">(Collection&lt;T&gt; entityList, <span class="hljs-type">int</span> batchSize)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Collection<T></td><td align="center">entityList</td><td align="center">实体对象集合</td></tr><tr><td align="center">int</td><td align="center">batchSize</td><td align="center">插入批次数量</td></tr></tbody></table><br/><p>SaveOrUpdate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TableId 注解存在更新记录，否插入一条记录</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveOrUpdate</span><span class="hljs-params">(T entity)</span>;<br><span class="hljs-comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveOrUpdate</span><span class="hljs-params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span>;<br><span class="hljs-comment">// 批量修改插入</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveOrUpdateBatch</span><span class="hljs-params">(Collection&lt;T&gt; entityList)</span>;<br><span class="hljs-comment">// 批量修改插入</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveOrUpdateBatch</span><span class="hljs-params">(Collection&lt;T&gt; entityList, <span class="hljs-type">int</span> batchSize)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Wrapper<T></td><td align="center">updateWrapper</td><td align="center">实体对象封装操作类 UpdateWrapper</td></tr><tr><td align="center">Collection<T></td><td align="center">entityList</td><td align="center">实体对象集合</td></tr><tr><td align="center">int</td><td align="center">batchSize</td><td align="center">插入批次数量</td></tr></tbody></table><br/><p>Remove</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据 queryWrapper 设置的条件，删除记录</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 ID 删除</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">removeById</span><span class="hljs-params">(Serializable id)</span>;<br><span class="hljs-comment">// 根据 columnMap 条件，删除记录</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">removeByMap</span><span class="hljs-params">(Map&lt;String, Object&gt; columnMap)</span>;<br><span class="hljs-comment">// 删除（根据ID 批量删除）</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">removeByIds</span><span class="hljs-params">(Collection&lt;? extends Serializable&gt; idList)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体包装类 QueryWrapper</td></tr><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键 ID</td></tr><tr><td align="center">Map&lt;String, Object&gt;</td><td align="center">columnMap</td><td align="center">表字段 map 对象</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center">主键 ID 列表</td></tr></tbody></table><br/><p>Update</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Wrapper&lt;T&gt; updateWrapper)</span>;<br><span class="hljs-comment">// 根据 whereWrapper 条件，更新记录</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">update</span><span class="hljs-params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span>;<br><span class="hljs-comment">// 根据 ID 选择修改</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">(T entity)</span>;<br><span class="hljs-comment">// 根据ID 批量更新</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">updateBatchById</span><span class="hljs-params">(Collection&lt;T&gt; entityList)</span>;<br><span class="hljs-comment">// 根据ID 批量更新</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">updateBatchById</span><span class="hljs-params">(Collection&lt;T&gt; entityList, <span class="hljs-type">int</span> batchSize)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">updateWrapper</td><td align="center">实体对象封装操作类 UpdateWrapper</td></tr><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Collection<T></td><td align="center">entityList</td><td align="center">实体对象集合</td></tr><tr><td align="center">int</td><td align="center">batchSize</td><td align="center">更新批次数量</td></tr></tbody></table><br/><p>Get</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据 ID 查询</span><br>T <span class="hljs-title function_">getById</span><span class="hljs-params">(Serializable id)</span>;<br><span class="hljs-comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span><br>T <span class="hljs-title function_">getOne</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper，查询一条记录</span><br>T <span class="hljs-title function_">getOne</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper, <span class="hljs-type">boolean</span> throwEx)</span>;<br><span class="hljs-comment">// 根据 Wrapper，查询一条记录</span><br>Map&lt;String, Object&gt; <span class="hljs-title function_">getMap</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper，查询一条记录</span><br>&lt;V&gt; V <span class="hljs-title function_">getObj</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="hljs-built_in">super</span> Object, V&gt; mapper)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键 ID</td></tr><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr><tr><td align="center">boolean</td><td align="center">throwEx</td><td align="center">有多个 result 是否抛出异常</td></tr><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr><tr><td align="center">Function&lt;? super Object, V&gt;</td><td align="center">mapper</td><td align="center">转换函数</td></tr></tbody></table><br/><p>List</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询所有</span><br>List&lt;T&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 查询列表</span><br>List&lt;T&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 查询（根据ID 批量查询）</span><br>Collection&lt;T&gt; <span class="hljs-title function_">listByIds</span><span class="hljs-params">(Collection&lt;? extends Serializable&gt; idList)</span>;<br><span class="hljs-comment">// 查询（根据 columnMap 条件）</span><br>Collection&lt;T&gt; <span class="hljs-title function_">listByMap</span><span class="hljs-params">(Map&lt;String, Object&gt; columnMap)</span>;<br><span class="hljs-comment">// 查询所有列表</span><br>List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">listMaps</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 查询列表</span><br>List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">listMaps</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 查询全部记录</span><br>List&lt;Object&gt; <span class="hljs-title function_">listObjs</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 查询全部记录</span><br>&lt;V&gt; List&lt;V&gt; <span class="hljs-title function_">listObjs</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> Object, V&gt; mapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper 条件，查询全部记录</span><br>List&lt;Object&gt; <span class="hljs-title function_">listObjs</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper 条件，查询全部记录</span><br>&lt;V&gt; List&lt;V&gt; <span class="hljs-title function_">listObjs</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="hljs-built_in">super</span> Object, V&gt; mapper)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center">主键 ID 列表</td></tr><tr><td align="center">Map&lt;String, Object&gt;</td><td align="center">columnMap</td><td align="center">表字段 map 对象</td></tr><tr><td align="center">Function&lt;? super Object, V&gt;</td><td align="center">mapper</td><td align="center">转换函数</td></tr></tbody></table><br/><p>Page</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 无条件分页查询</span><br>IPage&lt;T&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(IPage&lt;T&gt; page)</span>;<br><span class="hljs-comment">// 条件分页查询</span><br>IPage&lt;T&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 无条件分页查询</span><br>IPage&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">pageMaps</span><span class="hljs-params">(IPage&lt;T&gt; page)</span>;<br><span class="hljs-comment">// 条件分页查询</span><br>IPage&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">pageMaps</span><span class="hljs-params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IPage<T></td><td align="center">page</td><td align="center">翻页对象</td></tr><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr></tbody></table><br/><p>Count</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询总记录数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 根据 Wrapper 条件，查询总记录数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类 QueryWrapper</td></tr></tbody></table><br/><p>query</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 链式查询 普通</span><br>QueryChainWrapper&lt;T&gt; <span class="hljs-title function_">query</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 链式查询 lambda 式。注意：不支持 Kotlin</span><br>LambdaQueryChainWrapper&lt;T&gt; <span class="hljs-title function_">lambdaQuery</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">// 示例：</span><br>query().eq(<span class="hljs-string">&quot;column&quot;</span>, value).one();<br>lambdaQuery().eq(Entity::getId, value).list();<br></code></pre></td></tr></table></figure><br/><p>update</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 链式更改 普通</span><br>UpdateChainWrapper&lt;T&gt; <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 链式更改 lambda 式。注意：不支持 Kotlin</span><br>LambdaUpdateChainWrapper&lt;T&gt; <span class="hljs-title function_">lambdaUpdate</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">// 示例：</span><br>update().eq(<span class="hljs-string">&quot;column&quot;</span>, value).remove();<br>lambdaUpdate().eq(Entity::getId, value).update(entity);<br></code></pre></td></tr></table></figure><br/><p><strong>Mapper层</strong></p><p>Insert</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 插入一条记录</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(T entity)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象</td></tr></tbody></table><br/><p>Delete</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据 entity 条件，删除记录</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span>;<br><span class="hljs-comment">// 删除（根据ID 批量删除）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteBatchIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;<br><span class="hljs-comment">// 根据 ID 删除</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Serializable id)</span>;<br><span class="hljs-comment">// 根据 columnMap 条件，删除记录</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteByMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Wrapper<T></td><td align="center">wrapper</td><td align="center">实体对象封装操作类（可以为 null）</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center">主键 ID 列表(不能为 null 以及 empty)</td></tr><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键 ID</td></tr><tr><td align="center">Map&lt;String, Object&gt;</td><td align="center">columnMap</td><td align="center">表字段 map 对象</td></tr></tbody></table><br/><p>Update</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据 whereWrapper 条件，更新记录</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.ENTITY)</span> T updateEntity, <span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; whereWrapper)</span>;<br><span class="hljs-comment">// 根据 ID 修改</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.ENTITY)</span> T entity)</span>;<br></code></pre></td></tr></table></figure><p>使用提示:</p><p>在调用<code>updateById</code>方法前，需要在<code>T entity</code>（对应的实体类）中的主键属性上加上<code>@TableId</code>注解。</p><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">entity</td><td align="center">实体对象 (set 条件值,可为 null)</td></tr><tr><td align="center">Wrapper<T></td><td align="center">updateWrapper</td><td align="center">实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</td></tr></tbody></table><br/><p>Select</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据 ID 查询</span><br>T <span class="hljs-title function_">selectById</span><span class="hljs-params">(Serializable id)</span>;<br><span class="hljs-comment">// 根据 entity 条件，查询一条记录</span><br>T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;<br><br><span class="hljs-comment">// 查询（根据ID 批量查询）</span><br>List&lt;T&gt; <span class="hljs-title function_">selectBatchIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;<br><span class="hljs-comment">// 根据 entity 条件，查询全部记录</span><br>List&lt;T&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 查询（根据 columnMap 条件）</span><br>List&lt;T&gt; <span class="hljs-title function_">selectByMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;<br><span class="hljs-comment">// 根据 Wrapper 条件，查询全部记录</span><br>List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">selectMaps</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span><br>List&lt;Object&gt; <span class="hljs-title function_">selectObjs</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;<br><br><span class="hljs-comment">// 根据 entity 条件，查询全部记录（并翻页）</span><br>IPage&lt;T&gt; <span class="hljs-title function_">selectPage</span><span class="hljs-params">(IPage&lt;T&gt; page, <span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span><br>IPage&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">selectMapsPage</span><span class="hljs-params">(IPage&lt;T&gt; page, <span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper 条件，查询总记录数</span><br>Integer <span class="hljs-title function_">selectCount</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Serializable</td><td align="center">id</td><td align="center">主键 ID</td></tr><tr><td align="center">Wrapper<T></td><td align="center">queryWrapper</td><td align="center">实体对象封装操作类（可以为 null）</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center">主键 ID 列表(不能为 null 以及 empty)</td></tr><tr><td align="center">Map&lt;String, Object&gt;</td><td align="center">columnMap</td><td align="center">表字段 map 对象</td></tr><tr><td align="center">IPage<T></td><td align="center">page</td><td align="center">分页查询条件（可以为 RowBounds.DEFAULT）</td></tr></tbody></table><br/><hr><h3 id="4-条件构造器"><a href="#4-条件构造器" class="headerlink" title="4. 条件构造器"></a>4. 条件构造器</h3><p>官方文档：<a href="https://baomidou.com/pages/10c804/">条件构造器 | MyBatis-Plus (baomidou.com)</a></p><p><strong>allEq</strong></p><p>全部eq（或个别isNull）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">allEq(Map&lt;R, V&gt; params)<br>allEq(Map&lt;R, V&gt; params, <span class="hljs-type">boolean</span> null2IsNull)<br>allEq(<span class="hljs-type">boolean</span> condition, Map&lt;R, V&gt; params, <span class="hljs-type">boolean</span> null2IsNull)<br></code></pre></td></tr></table></figure><p>参数null2IsNull： 为<code>true</code>则在<code>map</code>的<code>value</code>为<code>null</code>时调用<code>isNull方法</code>,为<code>false</code>时则忽略<code>value</code>为<code>null</code>的</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">allEq(&#123;id:<span class="hljs-number">1</span>,name:<span class="hljs-string">&quot;老王&quot;</span>,age:<span class="hljs-literal">null</span>&#125;)  ---&gt;  id = <span class="hljs-number">1</span> <span class="hljs-type">and</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;老王&#x27;</span> and age is <span class="hljs-literal">null</span><br><span class="hljs-title function_">allEq</span><span class="hljs-params">(&#123;id:<span class="hljs-number">1</span>,name:<span class="hljs-string">&quot;老王&quot;</span>,age:<span class="hljs-literal">null</span>&#125;, <span class="hljs-literal">false</span>)</span>  ---&gt;  id = <span class="hljs-number">1</span> <span class="hljs-type">and</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;老王&#x27;</span><br></code></pre></td></tr></table></figure><br/><p><strong>eq</strong></p><p>等于<code>=</code></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">eq(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;老王&quot;</span>)---&gt;name = <span class="hljs-string">&#x27;老王&#x27;</span><br></code></pre></td></tr></table></figure><br/><p><strong>ne</strong></p><p>不等于<code>&lt;&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ne(R column, Object val)<br>ne(<span class="hljs-type">boolean</span> condition, R column, Object val)<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ne(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;老王&quot;</span>)---&gt;name &lt;&gt; <span class="hljs-string">&#x27;老王&#x27;</span><br></code></pre></td></tr></table></figure><br/><p><strong>gt</strong></p><p>大于</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">gt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>)---&gt;age &gt; <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><br/><p><strong>ge</strong></p><p>大于等于&gt;&#x3D;</p><p>例如：&#96;&#96;&#96; java</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">ge</span><span class="hljs-params">(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>)</span></span>`---&gt;`age &gt;= <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><br/><p><strong>lt</strong></p><p>小于&lt;</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">lt(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>)---&gt;age &lt; <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><br/><p><strong>le</strong></p><p>小于等于&lt;&#x3D;</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">le(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>)---&gt;age &lt;= <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><br/><p><strong>between</strong></p><p>在什么之间</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">between(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">30</span>)---&gt;age between <span class="hljs-number">18</span> and <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><br/><p>notBetween</p><p>不在什么之间</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">notBetween(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">30</span>)---&gt;age not between <span class="hljs-number">18</span> and <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><br/><p><strong>like</strong></p><p>模糊查询</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>)---&gt;name like <span class="hljs-string">&#x27;%王%&#x27;</span><br></code></pre></td></tr></table></figure><br/><p><strong>notLike</strong></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">notLike(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>)---&gt;name not like <span class="hljs-string">&#x27;%王%&#x27;</span><br></code></pre></td></tr></table></figure><br/><p><strong>likeLeft</strong></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">likeLeft(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>)---&gt;name like <span class="hljs-string">&#x27;%王&#x27;</span><br></code></pre></td></tr></table></figure><br/><p><strong>likeRight</strong></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">likeRight(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>)---&gt;name like <span class="hljs-string">&#x27;王%&#x27;</span><br></code></pre></td></tr></table></figure><br/><p><strong>notLikeLeft</strong></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">notLikeLeft(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>)---&gt;name not like <span class="hljs-string">&#x27;%王&#x27;</span><br></code></pre></td></tr></table></figure><br/><hr>]]></content>
    
    
    
    <tags>
      
      <tag>MybatisPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis分页插件</title>
    <link href="/2023/12/28/MyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/"/>
    <url>/2023/12/28/MyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>PageHelper是MyBatis中非常方便的第三方<strong>分页插件</strong></p><p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md">官网文档</a></p><br/><p><strong>添加依赖</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;  <br>&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">5.0</span><span class="hljs-number">.0</span>&lt;/version&gt; <span class="hljs-comment">//版本号</span><br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><br/><p><strong>配置分页插件</strong></p><p>在MyBatis的核心配置文件mybati-config-xml中添加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xm">&lt;plugins&gt;<br>&lt;!--分页插件--&gt;<br>&lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;&lt;/plugin&gt;<br>&lt;/plugins&gt;<br></code></pre></td></tr></table></figure><br/><p><strong>分页常用标签</strong></p><ul><li>pageSize：每页显示的条数</li><li>size：当前页显示的真实条数</li><li>total：总记录数</li><li>pages：总页数</li><li>prePage：上一页的页码</li><li>nextPage：下一页的页码</li><li>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页</li><li>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页</li><li>navigatepageNums：导航分页的页码</li></ul><p><strong>使用方法</strong></p><p>在查询方法前调用<code>PageHelper.startPage()</code>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectPageTest</span><span class="hljs-params">()</span> &#123;<br>     ...<br>     ...<br>     ...<br>     Page&lt;Object&gt; objects = PageHelper.startPage(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>);       <span class="hljs-comment">//创建分页插件对象</span><br>     List&lt;Stu&gt; list = mapper.selectStudent(<span class="hljs-literal">null</span>);           <span class="hljs-comment">//查询对象</span><br>     list.forEach(System.out::println);<br>     System.out.println(objects);<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射</title>
    <link href="/2023/12/23/Java%E5%8F%8D%E5%B0%84/"/>
    <url>/2023/12/23/Java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<p>该笔记基于<a href="https://www.bilibili.com/video/BV1ke4y1w7yn?vd_source=db8e7458ec195ac74979ce5478cbc624">B站视频</a>编写</p><br/><h3 id="1-动态代理的思想分析"><a href="#1-动态代理的思想分析" class="headerlink" title="1. 动态代理的思想分析"></a>1. 动态代理的思想分析</h3><p><strong>程序为什么需要代理？</strong></p><p>代理在程序设计中有很重要的作用，它可以帮助我们更好地管理和扩展代码，同时也能提高代码的安全性和隐私性</p><p>使用代理的好处：</p><ul><li>降低程序复杂度</li><li>易于业务扩展</li><li>代码高内聚低耦合</li><li>增强功能</li><li>增强安全性和隐私性</li></ul><br/><p>代理就像中介公司一样，它通过接口来自动要代理那些方法<br>代理和被代理的类要实现同一个接口</p><img src="./Java反射/image-20231224135938732.png" alt="image-20231224135938732" style="zoom: 67%;" /><br/><p><strong>代码实现</strong></p><p>定义一个接口（Star），里面放需要被代理的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 把所有需要代理的方法都定义在接口中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Star</span> &#123;<br>    <span class="hljs-comment">// 唱歌</span><br>    <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">sing</span><span class="hljs-params">(String name)</span>;<br>    <br>    <span class="hljs-comment">// 跳舞</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dance</span><span class="hljs-params">(String name)</span>;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><br/><p>创建一个需要被代理的类（BigStar）,实现接口Star</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigStar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Star</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BigStar</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 唱歌</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sing</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;正在唱&quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;谢谢&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 跳舞</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dance</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;正在跳舞&quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BigStar</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><br/><p><strong>创建代理对象</strong></p><p>java.lang.reflect.Proxy类：提供了为对象产生代理对象的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span><br></code></pre></td></tr></table></figure><ul><li>参数一：用于指定用哪个类加载器，去加载生成的代理类</li><li>参数二：指定接口，这些接口用于指定生成的代理会有哪些方法，以集合的形式添加</li><li>参数三：用来指定生成的代理对象要干什么事情</li></ul><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 这个类用于创建代理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>: 给一个明星对象创建一个代理</span><br><span class="hljs-comment">     *          形参：被代理的明星对象</span><br><span class="hljs-comment">     *          返回值：给明星创建代理</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *          需求：</span><br><span class="hljs-comment">     *          有人想请大明星唱歌</span><br><span class="hljs-comment">     *          1. 获取代理对象</span><br><span class="hljs-comment">     *              代理对象 = ProxyUtil.createProxy(大明星对象);</span><br><span class="hljs-comment">     *          2. 调用代理的唱歌方法</span><br><span class="hljs-comment">     *              代理对象。唱歌的方法();</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Star <span class="hljs-title function_">crateProxy</span><span class="hljs-params">(BigStar bigStar)</span> &#123;<br>        <span class="hljs-type">Star</span> <span class="hljs-variable">star</span> <span class="hljs-operator">=</span> (Star) Proxy.newProxyInstance(<br>                ProxyUtil.class.getClassLoader(),<span class="hljs-comment">// 用于指定用哪个类加载器，去加载生成的代理类</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Star.class&#125;,<span class="hljs-comment">// 指定接口，这些接口用于指定生成的代理会有哪些方法，以集合的形式添加</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<span class="hljs-comment">// 用来指定生成的代理对象要干什么事情</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-comment">/** </span><br><span class="hljs-comment">                         * 参数一：代理的对象</span><br><span class="hljs-comment">                         * 参数二：要运行的方法</span><br><span class="hljs-comment">                         * 参数三：调用要运行的方法时，传入的参数</span><br><span class="hljs-comment">                         */</span><br>                        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;sing&quot;</span>.equals(method)) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;准备话筒&quot;</span>);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;dance&quot;</span>.equals(method)) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;准备场地&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-comment">// 去找大明星开始唱歌或者跳舞</span><br>                        <span class="hljs-comment">// 调用大明星里面的唱歌或者跳舞</span><br>                        <span class="hljs-keyword">return</span> method.invoke(bigStar,args);<br>                    &#125;<br>                &#125;<br>        );<br>        <span class="hljs-keyword">return</span> star;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><br/><p><strong>编写测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 测试类</span><br><span class="hljs-comment"> *             需求：</span><br><span class="hljs-comment"> *              有人想请大明星唱歌</span><br><span class="hljs-comment"> *               1. 获取代理对象</span><br><span class="hljs-comment"> *                   代理对象 = ProxyUtil.createProxy(大明星对象);</span><br><span class="hljs-comment"> *               2. 调用代理的唱歌方法</span><br><span class="hljs-comment"> *                  代理对象。唱歌的方法();</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 获取代理对象</span><br>        <span class="hljs-type">BigStar</span> <span class="hljs-variable">bigStar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigStar</span>(<span class="hljs-string">&quot;鸡哥&quot;</span>);<br>        <span class="hljs-type">Star</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> ProxyUtil.crateProxy(bigStar);<br>        <span class="hljs-comment">// 2. 调用唱歌的方法</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proxy.sing(<span class="hljs-string">&quot;只因你太美&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>运行结果</p><img src="./Java反射/image-20231224145810847.png" alt="image-20231224145810847" style="zoom:67%;" /><br/><hr><h3 id="2-反射的概述"><a href="#2-反射的概述" class="headerlink" title="2. 反射的概述"></a>2. 反射的概述</h3><p>反射允许对封装类的字段，方法和构造函数的信息进行编程访问</p><img src="./Java反射/image-20231225115959606.png" alt="image-20231225115959606" style="zoom: 50%;" /><p>Java 反射，就是在运行状态中</p><ul><li>获取任意类的名称、package信息、所有属性、方法、注解、类型、类加载器等</li><li>获取任意对象的属性，并且能改变对象的属性</li><li>调用任意对象的方法</li><li>判断任意一个对象所属的类</li><li>实例化任意一个类的对象</li></ul><br/><hr><h3 id="3-获取class对象"><a href="#3-获取class对象" class="headerlink" title="3. 获取class对象"></a>3. 获取class对象</h3><ul><li>Class.forName(“全类名”)</li><li>类名.class</li><li>对象.getClass()</li></ul><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zheng.myreflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyReflectDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取class对象的三种方式</span><br><span class="hljs-comment">         * 1. Class.forName(&quot;全类名&quot;)</span><br><span class="hljs-comment">         * 2. 类名.class</span><br><span class="hljs-comment">         * 3. 对象.getClass()</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">// 第一种方式</span><br>        <span class="hljs-comment">// 最常见的</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.zheng.myreflect.Student&quot;</span>);<br><br>        <span class="hljs-comment">// 第二种方式</span><br>        <span class="hljs-comment">// 一般在作为参数的时候使用</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz2</span> <span class="hljs-operator">=</span> Student.class;<br><br>        <span class="hljs-comment">// 第三种方式</span><br>        <span class="hljs-comment">// 要有这个类的对象时才能使用</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz3</span> <span class="hljs-operator">=</span> stu.getClass();<br><br>        System.out.println(clazz1);<br>        System.out.println(clazz1==clazz2);<br>        System.out.println(clazz2==clazz3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Java%E5%8F%8D%E5%B0%84/image-20231225135632247.png" alt="image-20231225135632247"></p><br/><hr><h3 id="4-反射获取构造方式"><a href="#4-反射获取构造方式" class="headerlink" title="4. 反射获取构造方式"></a>4. 反射获取构造方式</h3><p>Class类中用于获取构造方法的方法</p><ul><li>Constructor&lt;?&gt;[]getConstructors()：返回所有公共构造方法对象的数组</li><li>Constructor&lt;?&gt;[]getDeclaredConstructors()：返回所有构造方法对象的数组</li><li>Constructor<T>getConstructor(Class&lt;?&gt;…parameterTypes)：返回单个公共构造方法对象</li><li>Constructor<T>getDeclaredConstructor(Class&lt;?&gt;…parameterTypes)：返回单个构造方法对象</li></ul><br/><p>Constructor类中用于创建对象的方法</p><ul><li>T newInstance(Object… initargs)：根据指定的构造方法创建对象</li><li>setAccessible（boolean flag）：设置为true，表示取消访问检查</li></ul><br/><p>JAVA反射机制中，getModifiers()方法返回int类型值表示该字段的修饰符</p><table><thead><tr><th>修饰符</th><th>对应的int类型</th></tr></thead><tbody><tr><td>public</td><td>1</td></tr><tr><td>private</td><td>2</td></tr><tr><td>protected</td><td>4</td></tr><tr><td>static</td><td>8</td></tr><tr><td>final</td><td>16</td></tr><tr><td>synchronized</td><td>32</td></tr><tr><td>volatile</td><td>64</td></tr><tr><td>transient</td><td>128</td></tr><tr><td>native</td><td>256</td></tr><tr><td>interface</td><td>512</td></tr><tr><td>abstract</td><td>1024</td></tr><tr><td>strict</td><td>2048</td></tr></tbody></table><br/><p>定义一个学生类，定义4个构造方法，其中两个公共的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><br/><p>定义测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Parameter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyReflectDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 获取字节码文件对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.zheng.myrelfect2.Student&quot;</span>);<br><br>        <span class="hljs-comment">// 获取构造方法</span><br>        <span class="hljs-comment">// 返回所有公共构造方法对象的数组</span><br>        Constructor[] cons1 = clazz.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor con : cons1) &#123;<br>            System.out.println(con);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 返回所有构造方法对象的数组</span><br>        Constructor[] cons2 = clazz.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor con : cons2) &#123;<br>            System.out.println(con);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 返回单个公共构造方法对象</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con1</span> <span class="hljs-operator">=</span> clazz.getConstructor();<span class="hljs-comment">// 无参</span><br>        System.out.println(con1);<br>        System.out.println(<span class="hljs-string">&quot;****************************&quot;</span>);<br><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con2</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class);<span class="hljs-comment">// 有参</span><br>        System.out.println(con2);<br>        System.out.println(<span class="hljs-string">&quot;****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 返回单个构造方法对象</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con3</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class);<br>        System.out.println(con3);<br>        System.out.println(<span class="hljs-string">&quot;分割线******************************************************************&quot;</span>);<br><br>        <span class="hljs-comment">// 获取构造方法对象的权限修饰等级</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> con3.getModifiers();<br>        System.out.println(modifiers);<br>        System.out.println(<span class="hljs-string">&quot;****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 获取构造方法对象的参数</span><br>        Parameter[] parameters = con3.getParameters();<br>        <span class="hljs-keyword">for</span> (Parameter parameter : parameters) &#123;<br>            System.out.println(parameter);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 用构造方法对象创建类</span><br>        con3.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 临时取消权限验证（private），暴力反射</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> (Student) con3.newInstance(<span class="hljs-string">&quot;正哥&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(stu);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><br/><p>运行结果</p><img src="./Java反射/image-20231225144534739.png" alt="image-20231225144534739" style="zoom:67%;" /><br/><hr><h3 id="5-反射获取成员变量"><a href="#5-反射获取成员变量" class="headerlink" title="5. 反射获取成员变量"></a>5. 反射获取成员变量</h3><p>Class类中用于获取成员变量的方式</p><ul><li>Field[] getFields()：返回所有公共成员变量对象的数组</li><li>Field[] getDeclaredFields()：返回所有成员变量对象的数组</li><li>Field[] getField(String name)：返回单个公共成员变量对象</li><li>Field getDeclaredField(String name)：返回单个成员变量对象</li></ul><br/><p>Field类中用于创建对象的方法</p><ul><li>void set(Object obj, Object value)：赋值</li><li>Object get(Object obj)：获取值</li></ul><br/><p>创建一个学生类，定义三个成员变量，一个公共的，两个私有的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String gender;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><br/><p>定义测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyReflectDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-comment">// 获取class字节码文件的对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.zheng.myrelflect3.Student&quot;</span>);<br><br>        <span class="hljs-comment">// 获取所有成员变量</span><br>        Field[] fields = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 获取单个的成员变量</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 获取权限修饰符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> name.getModifiers();<br>        System.out.println(modifiers);<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 获取成员变量名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> name.getName();<br>        System.out.println(n);<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 获取成员变量类型</span><br>        Class&lt;?&gt; type = name.getType();<br>        System.out.println(type);<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 获取成员变量的值，先有对象才有值</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;正哥&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 临时取消访问权限</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nameValue</span> <span class="hljs-operator">=</span> (String) name.get(stu);<br>        System.out.println(nameValue);<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 修改对象里面记录的值</span><br>        name.set(stu, <span class="hljs-string">&quot;正哥学Java&quot;</span>);<br>        System.out.println(stu);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><br/><p>测试结果</p><img src="./Java反射/image-20231225152725571.png" alt="image-20231225152725571" style="zoom:67%;" /><br/><hr><h3 id="6-反射获取成员方法"><a href="#6-反射获取成员方法" class="headerlink" title="6. 反射获取成员方法"></a>6. 反射获取成员方法</h3><p>Class类中用于获取成员方法的方法</p><ul><li>Method[] getMethods()：返回所有公共成员方法对象的数组，包括继承的（包含父类的）</li><li>Method[] getDeclaredMethods()：返回所有成员方法对象的数组，不包括继承的</li><li>Method[] getMethod(String name, Class&lt;?&gt;…parameterTypes)：返回单个公共成员方法对象</li><li>Method[] getDeclaredMethod(String name, Class&lt;?&gt;…paramenterTypes)：返回单个成员方法对象</li></ul><br/><p>Method类中用于创建对象的方法</p><p>Object invoke(Object obj, Object…args)：运行方法</p><ul><li>参数一：用obj对象调用该方法</li><li>参数二：调用方法的传递的参数（没有就不用写）</li><li>返回值：方法的返回值（没有就不用写）</li></ul><br/><p>定义一个student类，有两个成员方法，一个是公共方法sleep()，一个是私有方法eat()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zheng.myrelflect4;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">eat</span><span class="hljs-params">(String something)</span> <span class="hljs-keyword">throws</span> NullPointerException&#123;<br>        System.out.println(<span class="hljs-string">&quot;再吃&quot;</span> + something);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;太好吃了&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><br/><p>定义一个测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zheng.myrelflect4;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Parameter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyReflectDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 获取class字节码文件对象</span><br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.zheng.myrelflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">// 获取所有的公共方法对象（包括父类的）</span><br>        Method[] methods = clazz.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;分割线********************分割线&quot;</span>);<br><br>        <span class="hljs-comment">// 获取所有的方法对象（包括所有的，不包括父类的）</span><br>        Method[] declaredMethods = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method declaredMethod : declaredMethods) &#123;<br>            System.out.println(declaredMethod);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;分割线********************分割线&quot;</span>);<br><br>        <span class="hljs-comment">// 获取指定的单一方法</span><br>        <span class="hljs-comment">// 第一个参数是方法名，第二个参数是方法的参数类型</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;eat&quot;</span>,String.class);<br>        System.out.println(method);<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 获取方法的修饰符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> method.getModifiers();<br>        System.out.println(modifiers);<br><br>        <span class="hljs-comment">// 获取方法的名字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> method.getName();<br>        System.out.println(name);<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 获取方法的形参</span><br>        Parameter[] parameters = method.getParameters();<br>        <span class="hljs-keyword">for</span> (Parameter parameter : parameters) &#123;<br>            System.out.println(parameter);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取方法抛出的异常</span><br>        Class&lt;?&gt;[] exceptionTypes = method.getExceptionTypes();<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; exceptionType : exceptionTypes) &#123;<br>            System.out.println(exceptionType);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        <span class="hljs-comment">// 方法运行</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        method.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 参数一stu：表示方法的调用者</span><br>        <span class="hljs-comment">// 参数二“汉堡包”：表示在调用方法的时候传递的实际参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String) method.invoke(stu, <span class="hljs-string">&quot;汉堡&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果</p><img src="./Java反射/image-20231225213808019.png" alt="image-20231225213808019" style="zoom:80%;" /><p><img src="/./Java%E5%8F%8D%E5%B0%84/image-20231225214013575.png" alt="image-20231225214013575"></p><br/>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2023/12/13/Docker/"/>
    <url>/2023/12/13/Docker/</url>
    
    <content type="html"><![CDATA[<p>该笔记是根据<a href="https://www.bilibili.com/video/BV1HP4118797/?share_source=copy_web&vd_source=db8e7458ec195ac74979ce5478cbc624">B站视频</a>学习编写</p><h3 id="1-什么是Docker"><a href="#1-什么是Docker" class="headerlink" title="1. 什么是Docker"></a>1. 什么是Docker</h3><p>Docker 是一个用于构建、部署和管理容器化应用的开源平台。这些容器是标准化的可执行组件，结合了应用源代码以及在任何环境中运行该代码所需的操作系统 (OS) 库和依赖项。</p><p><strong>Docker的作用：</strong></p><ul><li>轻量级的虚拟化：Docker 容器提供了一种轻量级的虚拟化方式，相较于传统的虚拟机，Docker 容器启动速度更快，占用资源更少</li><li><strong>环境一致性</strong>：Docker 可以让开发者打包他们的应用以及依赖包到一个可移植的容器中，这样就可以确保应用在不同环境中的一致性</li><li><strong>提高资源利用率</strong>：开发人员使用容器在硬件上运行的应用副本数量是使用虚拟机的数倍。这可以减少云支出</li><li><strong>提高开发效率</strong>：Docker 容器化应用可以“一次编写，随处运行”。与虚拟机相比，容器的部署、配置和重启过程更迅速且更简单</li><li><strong>快速交付软件</strong>：Docker 可以让你将应用程序与基础架构分开，从而可以快速交付软件。你可以大大减少编写代码和在生产环境中运行代码之间的延迟</li></ul><br/><hr><h3 id="2-安装Docker"><a href="#2-安装Docker" class="headerlink" title="2. 安装Docker"></a>2. 安装Docker</h3><p><strong>卸载旧版</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs linxu">yum remove docker \<br>docker-client \<br>docker-ciient-latest \<br>docker-common \<br>docker-latest \<br>docker-latest-logrotate \<br>docker-logrotate \<br>docker-engine<br></code></pre></td></tr></table></figure><br/><p><strong>配置Docker的yum库</strong></p><p>安装一个yun工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">yum install -y yum-utils<br></code></pre></td></tr></table></figure><p>安装完毕后，执行命令，配置Docker的yum源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p>安装Docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><br/><p><strong>启动和校验</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs linux"># 启动docker<br>systemctl start docker<br><br># 停止docker<br>systemctl stop docker<br><br># 重启<br>systemctl restart docker<br><br># 开机自启<br>systemctl enable docker<br><br># 执行docker ps命令，如果不报错说明启动成功了<br></code></pre></td></tr></table></figure><br/><hr><h3 id="3-快速入门"><a href="#3-快速入门" class="headerlink" title="3. 快速入门"></a>3. 快速入门</h3><p>使用Docker来安装MySQL，先停掉Linux中的MySQL</p><p>安装MySQL的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs linux">docker run -d \<br>--name mysql \<br>-p 3306:3306 \<br>-e TZ=Asia/Shanghai \<br>-e MYSQL_ROOT_PASSWORD=020427 \<br>mysql<br></code></pre></td></tr></table></figure><br/><p>可以通过本机电脑连接到虚拟机的MySQL</p><img src="./Docker/image-20231217205124016.png" alt="image-20231217205124016" style="zoom:67%;" /><p><img src="/./Docker/image-20231217205218810.png" alt="image-20231217205218810"></p><p>当我们利用Docker安装应用时，Docker会自动搜索并下载应用镜像。镜像不仅包含应用本身，还包含应用运行所需要的环境、配置、系统函数库。Docker会在运行镜像时创建一个隔离环境，称为容器</p><p>Docker官网维护的公共<strong>镜像仓库</strong>：<a href="https://hub.docker.com/">Docker Hub Container Image Library | App Containerization</a></p><img src="./Docker/image-20231217204228958.png" alt="image-20231217204228958" style="zoom: 50%;" /><br/><p><strong>命令解读</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs linux">docker run -d \<br>--name mysql \<br>-p 3306:3306 \<br>-e TZ=Asia/Shanghai \<br>-e MYSQL_ROOT_PASSWORD=123 \<br>mysql<br></code></pre></td></tr></table></figure><ul><li><strong>docker run</strong> ：创建并运行一个容器，**-d**是让容器在后台运行</li><li><strong>–name mysql</strong> ：给容器起一个名字，必须唯一</li><li><strong>-p 3306:3306</strong> ：设置端口映射，前面是主机端口，后面是容器端口</li><li><strong>-e KEY&#x3D;VALUE</strong> : 设置环境变量，不同的容器需要不同的环境变量，可以在Docker的镜像仓库查看有容器哪些环境变量</li><li><strong>mysql</strong> ：指定运行的镜像名字，镜像名称一般由两部分组成：[repository]:[tag]<ul><li>repository是镜像名</li><li>tag是版本号</li><li>如果没有版本号则默认是最新版本的镜像</li></ul></li></ul><br/><hr><h3 id="4-常见命令"><a href="#4-常见命令" class="headerlink" title="4. 常见命令"></a>4. 常见命令</h3><p>Docker最常见的命令就是操作镜像和容器，详情见<a href="https://docs.docker.com/">官方文档</a></p><img src="./Docker/image-20231218163616881.png" alt="image-20231218163616881" style="zoom:67%;" /><ul><li>docker pull：从镜像仓库拉取或更新指定镜像</li><li>docker pull：把本地镜像推送到远程镜像仓库中去</li><li>docker images：列出本地存储的所有docker镜像</li><li>docker rmi：从主机节点中删除一个或多个镜像，-f是强制删除</li><li>docker build：根据DockerFile和context来自定义docker镜像</li><li>docker save：把打包好的镜像以压缩包的形式保存到本地</li><li>docker load：把压缩文件加载在本地镜像中</li><li>docker run：创建一个新的容器并运行</li><li>docker stop：停止容器</li><li>docker start：启动容器</li><li>docker logs：获取容器的日志</li><li>docker exec：通过这个命令可以在不需要进入容器的情况下直接与容器内的环境进行交互</li><li>docker ps：列出正在运行的docker容器,-a是显示所有容器包括未运行的</li><li>docker rm：删除一个或多个容器，添加-f可以强制删除正在运行的容器</li></ul><br/><hr><h3 id="5-数据卷挂载"><a href="#5-数据卷挂载" class="headerlink" title="5. 数据卷挂载"></a>5. 数据卷挂载</h3><p><strong>数据卷</strong>是一种用于持久化存储容器数据的机制，它是一个可供一个或多个容器使用的特殊目录，绕过了联合文件系统，有很多特性：</p><ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>对数据卷的更新不会影响镜像</li><li>数据卷默认会一直存在，即使容器被删除、</li></ul><br/><p><strong>数据卷挂载</strong>是将宿主机的数据卷挂载到Docker容器中的目录中（&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes），数据卷目录由Docker管理。这样做的好处是容器可以直接访问和使用这些数据，而且这些数据在容器之间是可以共享的</p><p>Docker提供了两种挂载方式，<code>-v</code>和<code>-mount</code></p><br/><p>数据卷是容器内目录和宿主机目录之间映射的桥梁</p><img src="./Docker/image-20231220161446653.png" alt="image-20231220161446653" style="zoom: 50%; " /><br/><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">docker volume create</td><td align="center">创建数据卷</td></tr><tr><td align="center">docker volume ls</td><td align="center">查看所有数据卷</td></tr><tr><td align="center">docker volume rm</td><td align="center">删除指定数据卷</td></tr><tr><td align="center">docker volume Inspect</td><td align="center">查看某个数据卷的详情</td></tr><tr><td align="center">docker volume prune</td><td align="center">清除数据卷</td></tr></tbody></table><br/><p><strong>通过案例——利用Nginx容器部署静态资源来实现数据卷的挂载</strong></p><p>需求：</p><ul><li>创建Nginx容器，修改nginx容器内的html目录下的index.html文件内容</li><li>将静态资源部署到nginx的html目录</li></ul><br/><p>当容器创建时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷</p><p>在执行docker run命令时，使用**-v 数据卷:容器内目录**可以完成数据卷挂载</p><br/><p><img src="/./Docker/image-20231220164110981.png" alt="image-20231220164110981"></p><ul><li>通过docker run -d –name nginx -p 180:180 -v html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx 创建并运行一个容器，并挂载数据卷</li><li>html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html   html容器名， &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html要挂载的容器中的目录</li><li>docker volume ls 查看所有数据卷</li><li>docker volume inspect html 查看html数据卷的详细信息</li><li>Mountpoint 挂载在宿主机中的位置</li></ul><p>这时候想修改nginx容器中的html目录下的文件只需要在宿主机中对应的文件中（MountPoint）修改就可以了</p><br/><hr><h3 id="6-本地目录挂载"><a href="#6-本地目录挂载" class="headerlink" title="6. 本地目录挂载"></a>6. 本地目录挂载</h3><p>本地目录挂载是指将设备文件中的顶级目录连接到Linux跟目录下的某一目录（最好是空目录），访问此目录就等同于访问设备文件。这个过程称为“挂载”</p><p>并不是根目录下任何一个目录都可以作为挂载点，由于挂载操作会使得原有目录中文件被隐藏，因此根目录以及系统原有目录都不要作为挂载点，会造成系统异常甚至崩溃，挂载点最好是新建的空目录</p><br/><ul><li>在执行docker run 命令时，使用**-v 本地目录:容器内目录**可以完成本地目录挂载</li><li>本地目录必须以<code>/</code>或<code>./</code>开头，如果直接以名称开头会被识别为数据卷而非本地目录<ul><li>-v mysql:&#x2F;var&#x2F;lib&#x2F;mysql会被识别为一个名为mysql的数据卷</li><li>-v &#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql会被识别为当前目录下的mysql目录</li></ul></li></ul><br/><hr><h3 id="7-自定义镜像"><a href="#7-自定义镜像" class="headerlink" title="7. 自定义镜像"></a>7. 自定义镜像</h3><p><strong>镜像结构</strong></p><p>镜像中包含了应用程序所需要的运行环境、函数库、配置、以及应用本身等各种文件，这些文件分层打包</p><img src="./Docker/image-20231223170500748.png" alt="image-20231223170500748" style="zoom: 67%;" /><br/><p><strong>DockerFile</strong><br>DockerFile是一个文本文件，其中包含一个个的指令，用来说明要执行什么操作来构建镜像</p><table><thead><tr><th align="center">指令</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">FROM</td><td align="center">指定基础镜像</td><td align="center">FROM centos:7</td></tr><tr><td align="center">ENV</td><td align="center">设置环境变量</td><td align="center">ENV key value</td></tr><tr><td align="center">COPY</td><td align="center">拷贝本地文件到镜像的指定目录</td><td align="center">COPY .&#x2F;jrell.tar.gz &#x2F;tmp</td></tr><tr><td align="center">RUN</td><td align="center">执行Linux的shell命令，一般是安装过程的命令</td><td align="center">RUN tar -zxvf &#x2F;tmp&#x2F;jrell.tar.gz &amp;&amp; EXPORTS path&#x3D;&#x2F;tmp&#x2F;jrell:$path</td></tr><tr><td align="center">EXPOSE</td><td align="center">指定容器运行时监听的端口</td><td align="center">EXPOSE 8080</td></tr><tr><td align="center">ENTRYPOINT</td><td align="center">镜像中应用的启动命令，容器运行时调用</td><td align="center">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p><a href="https://docs.docker.com/engine/reference/builder">官方文档</a></p><br/><p><strong>案例</strong></p><p>基于JDK为基础镜像，省略前面步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs linux"># 基础镜像<br>FROM openjdk:8.0-jre-buster<br># 拷贝jar包<br>COPY docker-demo.jar /app.jar<br># 入口<br>ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]<br></code></pre></td></tr></table></figure><br/><p><strong>自定义镜像</strong></p><p>当编写好DockerFile，可以利用下面命令来构建镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">docker build -t myImage:1.0 .<br></code></pre></td></tr></table></figure><ul><li>-t ：是给镜像起名，格式是repository:tag的格式，不指定tag时，默认为latest</li><li>. ：是指定Docker所在目录，如果就在当前目录，则指定为”.”</li></ul><br/><hr><h3 id="8-Docker网络"><a href="#8-Docker网络" class="headerlink" title="8. Docker网络"></a>8. Docker网络</h3><p>Docker网络是Docker容器之间以及容器和宿主机之间的网络连接的一种机制。在Docker中，每个容器都可以有自己的网络栈，包括网络接口、IP地址和网络配置。Docker网络提供了一种简单、可扩展的方式来组织和管理容器，使得它们可以在同一个网络中进行通信。Docker提供了几种网络模式，包括bridge、host、none和container。</p><ul><li><strong>Bridge模式</strong>：在该模式中，Docker守护进程创建了一个虚拟以太网桥docker0，新建的容器会自动桥接到这个接口，附加在其上的任何网卡之间都能自动转发数据包。</li><li><strong>Host模式</strong>：采用host网络模式的Docker容器，可以直接使用宿主机的IP地址与外界进行通信。</li><li><strong>None模式</strong>：none网络模式即不为Docker容器创建任何的网络环境，容器内部就只能使用loopback网络设备。</li><li><strong>Container模式</strong>：处于这个模式下的Docker容器会共享一个网络栈，这样两个容器之间可以使用localhost高效快速通信</li></ul><p><strong>默认情况下、所有容器都是以bridge方式连接到Docker的一个虚拟网桥上</strong></p><img src="./Docker/image-20231223202118445.png" alt="image-20231223202118445" style="zoom:67%;" /><br/><p>默认分配的容器ip地址是不固定的，服务器重启或者其它操作都有可以是容器的ip地址发生变化，所以需要加入自定义网络</p><p>加入自定义网络的容器才可以通过容器名互相访问，Docker的网络操作命令如下：</p><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">docker network create</td><td align="center">创建一个网络</td></tr><tr><td align="center">docker network ls</td><td align="center">查看所有网络</td></tr><tr><td align="center">docker network rm</td><td align="center">删除指定网络</td></tr><tr><td align="center">docker network prune</td><td align="center">清除未使用的网络</td></tr><tr><td align="center">docker network connect</td><td align="center">使指定容器连接加入某网络</td></tr><tr><td align="center">docker network disconnect</td><td align="center">使指定容器连接离开某网络</td></tr><tr><td align="center">docker network inspect</td><td align="center">查看网络详细信息</td></tr></tbody></table><br/><p>创建一个自定义网络</p><img src="./Docker/image-20231223203413708.png" alt="image-20231223203413708" style="zoom:80%;" /><br/><p>把mysql容器加入自定义网络中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">docker network connect zheng mysql<br></code></pre></td></tr></table></figure><p>通过docker inspect mysql查看mysql容器的网络</p><img src="./Docker/image-20231223204110631.png" alt="image-20231223204110631" style="zoom:80%;" /><p>可以看见已经把容器添加到自定义网络中了</p><br/><p>在创建容器时就加入自定义网络</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">docker run -d --name nginx -p 8081:8081 --network zheng nginx<br></code></pre></td></tr></table></figure><img src="./Docker/image-20231223205249964.png" alt="image-20231223205249964" style="zoom: 80%;" /><br/><p>然后就这两个容器就可以通过名字互相ping了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>InnoDB引擎</title>
    <link href="/2023/12/02/InnoDB%E5%BC%95%E6%93%8E/"/>
    <url>/2023/12/02/InnoDB%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<p>该笔记是基于b站视频学习制作:<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=133&vd_source=db8e7458ec195ac74979ce5478cbc624">MySQL数据库入门到精通</a></p><br/><hr><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p><strong>意义：</strong></p><ul><li>InnoDB是MySQL的一种存储引擎，它是MySQL 8.0的默认存储引擎。InnoDB存储引擎的主要特点是支持事务处理、回滚、崩溃修复能力和多版本并发控制的事务安全。它也是MySQL上第一个提供外键约束的表引擎</li><li>InnoDB存储引擎的设计目标是在高可靠性和高性能之间取得平衡。它将数据划分为若干页，以页作为磁盘与内存交互的基本单位，一般页的大小为16KB。这样的设计可以减少内存与磁盘的交互次数，从而提升性能</li><li>此外，InnoDB还支持ACID事务，即原子性、一致性、隔离性、持久性。这些特性使得InnoDB在处理事务方面具有优势</li><li>总的来说，InnoDB存储引擎在MySQL中的应用非常广泛，它的存在使得MySQL能够更好地处理复杂的事务和保证数据的安全性。如果你想查看自己的数据库默认使用的存储引擎，可以通过使用命令<code>SHOW VARIABLES LIKE &#39;storage_engine&#39;;</code></li></ul><br/><p><strong>作用：</strong></p><ul><li><strong>事务处理</strong>：InnoDB支持ACID事务，即原子性、一致性、隔离性、持久性。这些特性使得InnoDB在处理事务方面具有优势</li><li><strong>数据完整性</strong>：InnoDB是MySQL上第一个提供外键约束的表引擎，这有助于保证数据的完整性和一致性</li><li><strong>并发控制</strong>：InnoDB使用多版本并发控制(MVCC)来处理并发操作，这可以提高数据库的并发处理能力</li><li><strong>崩溃恢复</strong>：InnoDB具有崩溃恢复能力，可以在系统崩溃后恢复数据，保证数据的安全性</li><li><strong>性能优化</strong>：InnoDB将数据划分为若干页，以页作为磁盘与内存交互的基本单位，一般页的大小为16KB。这样的设计可以减少内存与磁盘的交互次数，从而提升性能</li></ul><br/><hr><h4 id="2-逻辑存储结构"><a href="#2-逻辑存储结构" class="headerlink" title="2. 逻辑存储结构"></a>2. 逻辑存储结构</h4><img src="./InnoDB引擎/image-20231202215131646.png" alt="image-20231202215131646" style="zoom:67%;" /><ul><li>表空间（ibd文件）：一个MySQL实例可以对应多个表空间，用于存储记录、索引等数据</li><li>段：分为数据段（Leaf node segment）、段索引（Non-leaf node segment）、回滚段（Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点，索引段即为B+树的非叶子节点。段用来管理多个Extent（区）</li><li>区：表空间的单元结构，每个区的大小为1M。默认情况下，InnoDB存储引擎页大小为16K，即一个区中一共有64个连续的页</li><li>页：是InnoDB存储引擎磁盘管理的最小单元，每个页的大小默认为16KB。为了保证页的连续性，InnoDB存储引擎每次从磁盘申请4-5个区</li><li>行：InnoDB存储引擎数据是按行进行存放的<ul><li>Trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值为trx_id隐藏列</li><li>Roll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息</li></ul></li></ul><br/><hr><h4 id="3-内存结构"><a href="#3-内存结构" class="headerlink" title="3. 内存结构"></a>3. 内存结构</h4><p>MySQL 5.5版本开始就默认使用InnoDB作为存储引擎，它擅长事务处理，具有崩溃恢复特性。下面是InnoDB架构图，左侧为内存结构，右侧为磁盘结构</p><img src="./InnoDB引擎/image-20231203140524143.png" alt="image-20231203140524143" style="zoom:67%;" /><br/><ul><li>Buffer Pool: 缓冲池是主内存中的一个区域，里面可以缓存磁盘上一些经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据，若缓冲池没有数据，则从磁盘中加载并缓存。然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度</li><li>缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型：<ul><li>free page：空闲page，未被使用</li><li>clean page：被使用page，数据没有被修改过</li><li>dirty page：脏页：没使用page，数据被修改过</li></ul></li><li>Change Buffer：更改缓冲区（针对于非唯一二级索引页），在执行DML语句（增删改）时，如果这些数据Page没有在Buffer Pool中，则不会直接操作数据库，而是将数据变更存在Change Buffer中，在未来数据被读取的时候，再将数据合并到Buffer Pool中，任何再将合并后的数据刷新到磁盘中去<ul><li>Change Buffer存在的意义：<ul><li>在InnoDB存储引擎中，change buffer的存在有着重要的意义。当索引字段内容发生更新时（例如update、insert、delete），如果对应的索引页在Buffer Pool中命中，就会直接更新缓存页。否则，InnoDB会将这些更新操作缓存在change buffer中，这样就无需从硬盘读入索引页。下次查询索引页时，会将索引页读入Buffer Pool，然后将change buffer中的操作应用到对应的缓存页，得到最新结果，这个过程称为merge。通过这种方式，可以保证数据逻辑的正确性。</li><li>此外，change buffer还有助于减少硬盘随机IO读取和提高内存利用率，从而提升数据库的并发能力。为了防止异常宕机丢失缓存，当事务提交时，InnoDB会将change buffer记录的内容持久化到磁盘（redo log），等待时机更新磁盘的数据文件（刷脏）。因此，change buffer在内存中，如果万一MySQL实例挂了或宕机了，这次的更新操作不会全部丢失。最后，MySQL可以通过ibdata1或redolog恢复change buffer。</li><li>总的来说，change buffer的存在可以提升索引性能，减少硬盘随机IO读取，提高内存利用率，以及保证数据逻辑</li></ul></li></ul></li><li>Adaptive Hash Index：自适应hash索引，用于优化Buffer Pool数据的查询。InnoDB存储引擎会监控对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立hash索引，称之为自适应hash索引</li><li>Log Buffer：日志缓冲区，用来保存要写入到磁盘中的log日志数据（redo log、 undo log），默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或者删除许多行的事务，增加日志缓冲区的大小可以节省磁盘I&#x2F;O。有两个参数如下：<ul><li>innodb_log_buffer_size：缓冲区大小</li><li>innodb_flush_log_at_trx_commit：日志刷新磁盘时机。有0,1,2三个值<ul><li>1：日志在每次事务提交时写入并刷新到磁盘（默认值）</li><li>0：日志每次将日志写入并刷新到磁盘一次</li><li>2：日志在每次事务提交后写入、并每秒刷新到磁盘一次</li></ul></li></ul></li></ul><br/><hr><h4 id="4-磁盘结构"><a href="#4-磁盘结构" class="headerlink" title="4. 磁盘结构"></a>4. 磁盘结构</h4><img src="./InnoDB引擎/image-20231203140612885.png" alt="image-20231203140612885" style="zoom: 67%;" /><ul><li><code>System Tablespace</code>：（系统表空间）是存储区域，用于存储<code>doublewriter buffer</code>（双写缓冲区）和<code>change buffer</code>（变更缓冲区）。如果用户创建的表在系统表空间中创建，而不是在文件每表或者通用表空间中创建，那么系统表空间也可能包含表和索引数据，在以前的MySQL版本中，系统表空间包含了InnoDB数据字典</li><li><code>File-Per-Table Tablespaces</code>：（每表一个文件的表空间）是一种数据存储方式。当启用了<code>innodb_file_per_table</code>配置选项时，每个InnoDB表和它的索引会被单独存储在<code>.ibd</code>数据文件中。这个<code>.ibd</code>数据文件代表一个单独的表空间</li><li><code>General Tablespaces</code>：（通用表空间）是一种可以存储多个表数据的共享表空间。它是使用CREATE TABLESPACE语法创建的</li><li><code>Undo Tablespaces</code>:（撤销表空间）包含撤销日志，这些日志是包含有关如何撤销事务对聚簇索引记录的最新更改的信息的记录集合。MySQL实例在初始化时会自动创建两个默认的表空间（初始大小16M），用于存储undo log日志</li><li><code>Temporary Tablespaces</code>：（临时表空间）是数据库中用于存储临时数据的空间</li><li><code>Doublewrite Buffer Files:</code>（双写缓冲区）InnoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区中，便于系统异常时恢复数据</li><li><code>Redo Log：</code>（重做日志），是用来实现事务的持久性。该日志由两部分组成：重做日志缓冲（redo log buffer）和重做日志文件（redo log file），前者是在内存中，后者在磁盘中。当事务提交之后会把所有的修改信息存储在该日志中</li></ul><br/><hr><h3 id="5-后台线程"><a href="#5-后台线程" class="headerlink" title="5. 后台线程"></a>5. 后台线程</h3><p>​                                                                                               </p><p><strong>Master Thread</strong></p><p>核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中去，保持数据的一致性，还包括赃页的刷新、合并插入缓存、undo页的回收</p><br/><p><strong>IO Thread</strong></p><p>在InnoDB存储引擎中大量使用了AIO来处理IO请求，这样可以极大地提高数据库的性能，而IO Thread主要负责这些IO请求的回调</p><br/><p><strong>Purge Thread</strong></p><p>主要用于回收事务已经提交了的undo log，在事务提交之后，undo log可能不用了，就用它来回收</p><br/><p><strong>Page Cleaner Thread</strong></p><p>协助Master Thread刷新赃页到磁盘的线程，它可以减轻Master Thread的工资压力，减少阻塞</p><br/><hr><h3 id="6-事务原理"><a href="#6-事务原理" class="headerlink" title="6. 事务原理"></a>6. 事务原理</h3><p><strong>事务：</strong>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或者撤销操作请求，即这些操作要么同时成功，要么同时失败</p><br/><p><strong>特性：</strong></p><ul><li><strong>原子性（Atomicity）：</strong>事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li><strong>一致性（Consistency）：</strong>事务完成时，必须使所有的数据都保持一致</li><li><strong>隔离性（Isolation）：</strong>数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li><strong>持久性（Durability）：</strong>事务一旦提交或者回滚，它对数据库中的数据的改变是永久的</li></ul><br/><p>redo log 和 undo log 保证了事务的原子性、一致性和持久性<br>锁和MVCC保证了隔离性</p><br/><p><strong>redo log</strong></p><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性</p><p>该日志由两部分组成：重做日志缓冲（redo log buffer）和重做日志文件（redo log file），前者是在内存中，后者在磁盘中。当事务提交之后会把所有的修改信息存储在该日志中，用于在刷新赃页到磁盘，发生错误时，进行数据恢复</p><img src="./InnoDB引擎/image-20231213202354900.png" alt="image-20231213202354900" style="zoom: 80%;" /><br/><p><strong>undo log</strong></p><p>回滚日志，用于记录数据被修改前的信息，作用主要有两个：提供回滚和MVCC</p><p>undo log是逻辑日志，它记录的是对数据的操作。当delete一条记录时，undo log中就会记录一条对应的insert记录，当update一条记录时，就会记录一条相反的update日志</p><p>undo log销毁：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC</p><p>undo log存储：undo log采用段的方式进行管理和记录</p><br/><hr><h3 id="7-MVCC"><a href="#7-MVCC" class="headerlink" title="7. MVCC"></a>7. MVCC</h3><p>MVCC，即多版本并发控制（Multi-Version Concurrency Control），是一种数据库管理系统中实现并发访问的方法。它允许在数据库中存在多个数据版本，从而使不同的事务能够同时访问同一数据的不同版本，提高了系统的并发性能。</p><br/><p><strong>当前读</strong></p><p>当前读是指读取数据的最新版本，并且在读取的过程中对数据加锁，以防止其他事务同时修改相同的记录。这种读取方式常用于需要保证数据一致性的场景，如更新、删除、插入操作，以及使用select … for update（都是排他锁）或select … lock in share mode（共享锁）进行的查询</p><br/><p><strong>快照读</strong></p><p>简单的select（不加锁）就是快照读，快照读读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读</p><ul><li>Read Committed：每次select，都生成一个快照读</li><li>Repeatable Read：开启事务后第一个select语句才是快照读的地方</li><li>Serializable：快照读会退回为当前读</li></ul><br/><p><strong>记录中的隐藏字段</strong></p><table><thead><tr><th align="center">隐藏字段</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">DB_TRX_ID</td><td align="center">最近修改事务ID，记录插入这条记录或者最后一次修改该记录的事务ID</td></tr><tr><td align="center">DB_ROLL_PTR</td><td align="center">回滚指针，指向这条记录的是一个版本，用于配合undo log，指向上一个版本</td></tr><tr><td align="center">DB_ROW_ID</td><td align="center">隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段（如果有主键就不生成）</td></tr></tbody></table><br/><p><strong>undo log</strong></p><p>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志</p><p>当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除</p><p>而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照时也需要，不会立即被删除</p><br/><p><strong>undo log版本链</strong></p><p>不同事务或相同事务对同一条记录进行修改，会导致该记录的undo log生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录</p><p>当一个事务对数据进行修改时，它会在undo log中记录下修改前的数据版本，并更新数据记录的<code>DB_TRX_ID</code>和<code>DB_ROLL_PTR</code>。如果另一个事务再次修改这条数据，它也会在undo log中记录下当前的数据版本，并更新<code>DB_ROLL_PTR</code>指向新的undo log。这样通过<code>DB_ROLL_PTR</code>指针串联起来的undo log就形成了一个版本链</p><p>这个版本链允许数据库在执行回滚操作时，根据事务的需要找到正确的数据版本，同时它也支持MVCC机制，使得不同的事务可以看到数据的不同历史版本，从而实现非阻塞的读取操作</p><br/><p><strong>ReadView</strong></p><p>ReadView（读视图）是快照读SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（为提交的）id</p><p>在数据库系统中，特别是在使用MVCC（多版本并发控制）机制的系统中，ReadView是用来实现不同隔离级别下的一致性读取的关键数据结构。ReadView的生成过程通常与事务的开始和查询操作紧密相关。</p><br/><p><strong>ReadView的生成过程</strong></p><ul><li><strong>事务开始</strong>：当一个事务开始时，数据库系统会为该事务分配一个唯一的事务ID（trx_id）</li><li><strong>活跃事务列表</strong>：系统会维护一个活跃事务列表，其中包含了所有尚未提交的事务的ID</li><li><strong>创建ReadView</strong>：在执行查询操作时，系统会创建一个ReadView</li><li><strong>确定数据版本可见性</strong>：ReadView会根据事务ID和数据版本的trx_id来确定哪些数据版本对当前事务是可见的</li></ul><br/><p>ReadView中包含了四个核心字段</p><table><thead><tr><th align="center">字段</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">m_ids</td><td align="center">当前活跃的事务ID集合</td></tr><tr><td align="center">min_trx_id</td><td align="center">最小活跃事务ID</td></tr><tr><td align="center">max_trx_id</td><td align="center">预分配事务ID，最大活跃事务ID+1（事务ID是自增的）</td></tr><tr><td align="center">creator_trx_id</td><td align="center">ReadView创建者的事务ID</td></tr></tbody></table><br/><p><strong>版本链访问规则</strong></p><p>trx_id表示的是当前<strong>被访问</strong>版本的ID</p><img src="./InnoDB引擎/image-20231213223050767.png" alt="image-20231213223050767" style="zoom:67%;" /><ul><li>如果被访问版本的<code>trx_id</code>与<code>ReadView</code>中的<code>creator_trx_id</code>值相同，说明当前事务在访问自己修改过的记录，该版本可以被当前事务访问</li><li>如果被访问版本的<code>trx_id</code>小于<code>ReadView</code>中的<code>min_trx_id</code>值，说明生成该版本的事务在当前事务生成<code>ReadView</code>前已经提交，该版本可以被当前事务访问</li><li>如果被访问版本的<code>trx_id</code>大于或等于<code>ReadView</code>中的<code>max_trx_id</code>值，说明生成该版本的事务在当前事务生成<code>ReadView</code>后才开启，该版本不可以被当前事务访问</li><li>如果被访问版本的<code>trx_id</code>值在<code>ReadView</code>的<code>min_trx_id</code>和<code>max_trx_id</code>之间，就需要判断<code>trx_id</code>属性值是否在<code>m_ids</code>列表中。如果在，说明创建<code>ReadView</code>时生成该版本的事务还是活跃的，该版本不可以被访问。如果不在，说明创建<code>ReadView</code>时生成该版本的事务已经被提交，该版本可以被访问</li></ul><br/><p>不同的隔离级别，生成的ReadView的时机不同：</p><ul><li>READ COMMITTED：在事务中每一次执行快照读时生成ReadView</li><li>REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView</li></ul><br/><p><strong>隔离级别为RC下，ReadView的工作原理</strong></p><p>RC（读已提交），它是指在这个隔离级别下，一个事务只能读取到其他事务已经提交的修改。这个级别的设计是为了防止脏读现象的发生</p><p>在RC隔离级别下，ReadView的工作原理是确保事务只能看到在该事务开始之前已经提交的更改。这是通过每次查询时都创建一个新的ReadView来实现的</p><br/><p><strong>隔离级别为RR下，ReadView的工作原理</strong></p><p>RR（可重复读），它是指这个隔离级别下，一个事务在其执行期间可以多次读取同一数据集，并且每次读取的结果都是相同的，即使在这期间其他事务对这些数据进行了修改或更新。这种特性保证了数据的一致性，避免了在一个事务中出现不可重复读的问题</p><p>当一个事务在RR隔离级别下开始时，它会创建一个ReadView，这个ReadView相当于是一个数据快照。在整个事务执行期间，无论其他事务如何修改数据，当前事务都只能看到ReadView中的数据版本。这就意味着，即使其他事务提交了更新，当前事务仍然能够读取到它最初看到的数据版本，从而实现了可重复读的效果。</p><p>在RR隔离级别下，可以避免不可重复读和幻读，但可能会牺牲一些并发性能。这是因为为了维持数据的一致性，系统需要对数据加锁或使用其他机制来保证在事务执行期间数据不会被其他事务修改。这样的设计是为了在数据一致性和系统性能之间取得平衡。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot3学习笔记</title>
    <link href="/2023/11/16/SpringBoot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/16/SpringBoot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>该笔记基于b站视频<a href="https://www.bilibili.com/video/BV1Es4y1q7Bf/?share_source=copy_web">SpringBoot零基础教程</a>学习完成</p><h3 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h3><h4 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h4><p><strong>环境要求</strong></p><table><thead><tr><th>环境&amp;工具</th><th>版本（or later）</th></tr></thead><tbody><tr><td>SpringBoot</td><td>3.0.5+</td></tr><tr><td>IDEA</td><td>2021.2.1+</td></tr><tr><td>Java</td><td>17+</td></tr><tr><td>Maven</td><td>3.5+</td></tr><tr><td>Tomcat</td><td>10.0+</td></tr><tr><td>Servlet</td><td>5.0+</td></tr><tr><td>GraalVM Community</td><td>22.3+</td></tr><tr><td>Native Build Tools</td><td>0.9.19+</td></tr></tbody></table><br/><p><strong>SpringBoot是什么</strong></p><p>SpringBoot 帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring 应用（说明：SpringBoot底层是Spring）</strong>大多数 SpringBoot 应用只需要编写少量配置即可快速整合 Spring 平台以及第三方技术</p><p><strong>特性：</strong>简化开发，简化配置，简化整合，简化部署，简化监控，简化运维</p><br/><h4 id="1-2-开发流程"><a href="#1-2-开发流程" class="headerlink" title="1.2 开发流程"></a>1.2 开发流程</h4><p><strong>创建项目</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    所有springboot项目都要继承spring-boot-starter-parent--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><br/><p><strong>导入场景</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    web开发场景启动器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><br/><p><strong>主程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>业务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello springboot3&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>测试</strong></p><p>启动项目，默认端口号8080</p><p><img src="/./SpringBoot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20231116151721264.png"></p><br/><p><strong>打包</strong></p><p>引入打包插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    springboot应用打包插件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>mvn-clean package</code> 把项目打成可自行的jar包，打包后可以在target中找到</p><p><img src="/./SpringBoot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20231116203134694.png"></p><br/><p><code>java -jar demo.jar</code> 启动项目</p><br/><h4 id="1-3-Spring-Initializr"><a href="#1-3-Spring-Initializr" class="headerlink" title="1.3 Spring Initializr"></a>1.3 Spring Initializr</h4><p>通过Spring Initializr 来创建springboot项目</p><img src="./SpringBoot3学习笔记/image-20231116202359617.png" style="zoom: 67%;" /><br/><p>选择需要的依赖</p><img src="./SpringBoot3学习笔记/image-20231116202838044.png" style="zoom:67%;" /><p><img src="/./SpringBoot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20231116203920906.png" alt="image-20231116203920906"></p><br/><hr><h3 id="2-应用分析"><a href="#2-应用分析" class="headerlink" title="2. 应用分析"></a>2. 应用分析</h3><h4 id="2-1-依赖管理机制"><a href="#2-1-依赖管理机制" class="headerlink" title="2.1 依赖管理机制"></a>2.1 依赖管理机制</h4><p>为什么导入<code>starter-web</code>所有相关的依赖都导入进来了？</p><ul><li>想要开发什么场景、就导入对应的场景启动器（依赖）</li><li>maven依赖传递原则，A依赖了B，B又依赖于C，所以A依赖于B和C。所以导入了场景启动器后，在场景启动器中会将所有需要的依赖都导入进来</li></ul><p>为什么版本号都不用写</p><ul><li>每个boot项目都会有一个父项目<code>spring-boot-starter-parent</code></li><li>parent的父项目是<code>spring-boot-dependencies</code></li><li>父项目 版本仲裁中心，把常见的jar的依赖版本都声明号了</li></ul><p>自定义版本号</p><ul><li>利用maven的就近原则，在导入依赖时手动声明版本，则该依赖的版本会替换父项目默认的版本</li><li>在项目pom文件中的<code>properties</code>属性中加入版本管理</li></ul><p>第三方的jar包</p><ul><li>boot父项目没有进行版本管理的要自定义版本号</li></ul><br/><h4 id="2-2-自动配置机制"><a href="#2-2-自动配置机制" class="headerlink" title="2.2 自动配置机制"></a>2.2 自动配置机制</h4><p><strong>初步理解</strong></p><ul><li>自动配置<code>Tomcat、SpringMVC</code>等<ul><li>导入什么场景，容器中就会自动配置好这个场景的核心组件</li><li>容器中有了什么组件就会有什么功能</li></ul></li><li>默认的包扫描规则<ul><li><code>@SprongBootApplication</code>标注的类就是主程序类</li><li><strong>SpringBoot只会扫描主程序所在的包及其下面的包</strong></li><li>自定义扫描路径<ul><li><code>@SpringBootApplication(scanBasePackages = &quot;com.zheng&quot;)</code>,在启动类的@SpringBootApplication注解上添加属性scanBasePackages,属性的值是需要扫描的包</li><li><code>@ComponentScan(&quot;com.zheng&quot;)</code>，在启动类中添加注解@ComponentScan，属性值是需要扫描的包</li></ul></li></ul></li><li>配置默认值<ul><li>配置文件的所有配置项是和某个<strong>类的对象</strong>值进行一一绑定的</li><li>绑定了配置文件中每一项值的类：<strong>属性类</strong></li><li>例如： <code>ServerProperties</code>绑定了所有Tomcat服务器有关的配置、<code>MultipartProperties</code>绑定了所有文件上传相关的配置</li></ul></li><li>按需加载自动配置<ul><li>导入场景<code>spring-boot-starter-web</code></li><li>场景启动器除了会导入相关的依赖，还会导入一个<code>spring-boot-starter</code>，它是所有<code>starter</code>的<code>starter</code>，是基础的<code>starter</code></li><li><code>spring-boot-starter</code>导入了一个包<code>spring-boot-autoconfigure</code>，这个包里面包含各种场景的<code>AutoConfiguration</code>自动配置类</li><li>虽然全场景的自动配置都在<code>spring-boot-autoconfigure</code>这个包，但是不是全部都开启的，只有需要的才会开启</li></ul></li></ul><p><strong>总结：</strong>导入场景启动器、触发<code>Spring-boot-autoconfigure</code>这个包的自动配置生效、容器中就会具有相关场景的功能</p><br/><hr><h3 id="3-核心技能"><a href="#3-核心技能" class="headerlink" title="3. 核心技能"></a>3. 核心技能</h3><h4 id="3-1-常见注解"><a href="#3-1-常见注解" class="headerlink" title="3.1 常见注解"></a>3.1 常见注解</h4><p><strong>组件注解</strong></p><p>@Configuration、@SpringBootConfiguration</p><p>@Bean、@Scope</p><p>@Controller、@Service、@Repository、@Component</p><p>@Import</p><p>@ComponentScan</p><p>配置类：</p><ol><li>@Configuration编写一个配置类</li><li>在配置类中，自定义方法给容器中注册组件。配合@Bean</li><li>使用@Import导入第三方的组件</li></ol><br/><p><strong>条件注解</strong></p><p>如果注解指定的条件成立，则触发指定行为</p><ul><li>@ConditionalOnClass：如果类路径中存在这个类，则触发指定行为</li><li>@ConditionalOnMissingClass：如果类路径中不存在这个类，则触发指定行为</li><li>@ConditionalOnBean：如果容器中存在这个Bean（组件），则触发指定行为</li><li>@ConditionalOnMissingBean：如果容器中不存在这个Bean（组件），则触发指定行为</li><li>@ConditionalOnBean(value&#x3D;组件类型，name&#x3D;组件名字)：判断容器中是否有这个类型的组件，并且名字是指定的值</li></ul><br/><p><strong>属性绑定</strong></p><p><code>@ConfigurationProperties</code></p><p>将容器中任意组件（Bean）的属性值和配置文件的配置项的值进行绑定</p><ul><li>给容器中注册组件（@Component、@Bean）</li><li>使用@ConfigurationProperties声明组件和配置文件的哪些配置进行绑定</li></ul><p><code>@EnableConfigurationProperties</code></p><ul><li>Springboot默认是不会扫描第三方包，如果导入了第三方的包，即时组件上标注了@ConfigurationProperties注解也没用，因为组件扫描不进来，这时候就需要@EnableConfigurationProperties注解来进行属性的绑定并把组件注册进容器</li></ul><br/><h4 id="3-2-YAML配置文件"><a href="#3-2-YAML配置文件" class="headerlink" title="3.2 YAML配置文件"></a>3.2 YAML配置文件</h4><p><strong>基本语法</strong></p><ul><li>大小写敏感</li><li>使用缩进表示层级关系，k: v，使用空格分割k，v</li><li>缩进的空格数随意，主要相同层级的元素左对齐即可</li><li><code>#</code>表示注解，从这个字符一直到行尾，都会被解析器忽略</li></ul><br/><p><strong>示例</strong></p><p>第一4个类</p><p><img src="/./SpringBoot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20231117155159086.png"></p><p>只有Person类需要注入到组件中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span> <span class="hljs-comment">//和配置文件person前缀的所有配置进行绑定</span><br><span class="hljs-meta">@Data</span> <span class="hljs-comment">//自动生成JavaBean属性的getter/setter</span><br><span class="hljs-comment">//@NoArgsConstructor //自动生成无参构造器</span><br><span class="hljs-comment">//@AllArgsConstructor //自动生成全参构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Date birthDay;<br>    <span class="hljs-keyword">private</span> Boolean like;<br>    <span class="hljs-keyword">private</span> Child child; <span class="hljs-comment">//嵌套对象</span><br>    <span class="hljs-keyword">private</span> List&lt;Dog&gt; dogs; <span class="hljs-comment">//数组（里面是对象）</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,Cat&gt; cats; <span class="hljs-comment">//表示Map</span><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Date birthDay;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; text; <span class="hljs-comment">//数组</span><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>获取person并输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> ioc.getBean(Person.class);<br>        System.out.println(<span class="hljs-string">&quot;person: &quot;</span> + person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>properties表示法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">person.name</span>=<span class="hljs-string">张三</span><br><span class="hljs-attr">person.age</span>=<span class="hljs-string">18</span><br><span class="hljs-attr">person.birthDay</span>=<span class="hljs-string">2010/10/12 12:12:12</span><br><span class="hljs-attr">person.like</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">person.child.name</span>=<span class="hljs-string">李四</span><br><span class="hljs-attr">person.child.age</span>=<span class="hljs-string">12</span><br><span class="hljs-attr">person.child.birthDay</span>=<span class="hljs-string">2018/10/12</span><br><span class="hljs-attr">person.child.text[0]</span>=<span class="hljs-string">abc</span><br><span class="hljs-attr">person.child.text[1]</span>=<span class="hljs-string">def</span><br><span class="hljs-attr">person.dogs[0].name</span>=<span class="hljs-string">小黑</span><br><span class="hljs-attr">person.dogs[0].age</span>=<span class="hljs-string">3</span><br><span class="hljs-attr">person.dogs[1].name</span>=<span class="hljs-string">小白</span><br><span class="hljs-attr">person.dogs[1].age</span>=<span class="hljs-string">2</span><br><span class="hljs-attr">person.cats.c1.name</span>=<span class="hljs-string">小蓝</span><br><span class="hljs-attr">person.cats.c1.age</span>=<span class="hljs-string">3</span><br><span class="hljs-attr">person.cats.c2.name</span>=<span class="hljs-string">小灰</span><br><span class="hljs-attr">person.cats.c2.age</span>=<span class="hljs-string">2</span><br></code></pre></td></tr></table></figure><br/><p>输出结果</p><p><img src="/./SpringBoot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20231117155514578.png" alt="image-20231117155514578"></p><br/><p>yaml表示法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">张三</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">birthDay:</span> <span class="hljs-number">2010</span><span class="hljs-string">/10/10</span> <span class="hljs-number">12</span><span class="hljs-string">:12:12</span><br>  <span class="hljs-attr">like:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">child:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">李四</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">birthDay:</span> <span class="hljs-number">2018</span><span class="hljs-string">/10/10</span><br>    <span class="hljs-attr">text:</span> [<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>]<br>  <span class="hljs-attr">dogs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">小黑</span><br>      <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">小白</span><br>      <span class="hljs-attr">age:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">cats:</span><br>    <span class="hljs-attr">c1:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">小蓝</span><br>      <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">c2:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">小绿</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">2</span>&#125; <span class="hljs-comment">#对象也可用&#123;&#125;表示</span><br></code></pre></td></tr></table></figure><br/><p>输出结果，要把application.properties中的数据注释掉在运行，否则会输出application.properties中的数据，因为properties的优先级大于yaml</p><p><img src="/./SpringBoot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20231117155731222.png"></p><br/><p><strong>细节</strong></p><ul><li>birthDay推荐写为brith-day</li><li>文本：<ul><li>单引号不会转义[会把\n作为普通字符输出]</li><li>双引号会转义[\n会显示为换行符]</li></ul></li><li>多文档合并<ul><li>使用<code>---</code>可以把多个yaml文档合并在一个文档中，每个文档区依然认为内容独立</li></ul></li></ul><br/><p><strong>lombok</strong></p><p>使用lombok创建可以简化JavaBean的开发。能自动生成setter、getter、构造器、toString方法、自动生成Builder模式等</p><p><code>@Data</code>默认只会生成无参构造器，如果需要有参构造器需要用注解自己添加</p><p>&#96;&#96;@NoArgsConstructor&#96; 自动生成无参构造器</p><p><code>@AllArgsConstructor</code> 自动生成全参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>    &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>    &lt;scope&gt;compile&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><img src="./SpringBoot3学习笔记/image-20231117160611543.png" style="zoom:67%;" /><br/><h4 id="3-3-日志配置"><a href="#3-3-日志配置" class="headerlink" title="3.3 日志配置"></a>3.3 日志配置</h4><p>项目开发不要编写<code>System.out.println()</code>，应该使用<code>日志</code>记录信息</p><br/><p><strong>简介</strong></p><ul><li>Spirng使用<code>commons-logging</code>作为内部日志，但底层日志实现是开放的，可以对接其它日志框架，从Spring5开始把<code>commons-logging</code>集成在spring中，不需要再引入</li><li>支持<code>jul</code>，<code>log4j2</code>，<code>logback</code>。SpringBoot提供了默认的控制台输出配置，也可以配置输出为文件</li><li><code>logback</code>是默认使用的</li></ul><br/><p><strong>SpringBoot是如何把日志默认配置好的</strong></p><ol><li>每个<code>starter</code>场景都会导入一个核心场景<code>spring-boot-starter</code></li><li>核心场景引用了日志的所有功能<code>spring-boot-starter-logging</code></li><li>默认使用了<code>logback + slf4j</code>作为默认底层日志</li><li>日志是系统一启动就要用的</li><li>日志是利用监听器机制配置好的，<code>ApplicationListener</code></li><li>日志所有的配置都是可以通过修改配置文件实现的。以<code>logging</code>开始所有的配置</li></ol><br/><p><strong>日志格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2023</span>-<span class="hljs-number">11</span>-17T15:<span class="hljs-number">57</span>:<span class="hljs-number">49.570</span>+08:<span class="hljs-number">00</span>  INFO <span class="hljs-number">17668</span> --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]<br><span class="hljs-number">2023</span>-<span class="hljs-number">11</span>-17T15:<span class="hljs-number">57</span>:<span class="hljs-number">49.570</span>+08:<span class="hljs-number">00</span>  INFO <span class="hljs-number">17668</span> --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/<span class="hljs-number">10.1</span><span class="hljs-number">.7</span>]<br></code></pre></td></tr></table></figure><p>默认输出格式：</p><ul><li>时间和容器：毫秒级精准2023-11-17T15:57:49.570+08:00</li><li>日志级别：<code>ERROR</code>,<code>WARN</code>,<code>INFO</code>,<code>DEBUG</code>,<code>TRACE</code>INFO</li><li>进程ID17668</li><li>消息分隔符—</li><li>线程名：使用[]包含[           main]</li><li>Logger名：通常是产生日志的类名o.apache.catalina.core.StandardService</li><li>消息：日志记录的内容Starting service [Tomcat]</li></ul><p>注意：logback没有FATAL级别，对应的是ERROR</p><br/><p>日志的格式是可以修改的，通过在配置文件中自定义日志格式</p><p><code>logging.pattern.console </code> 修改控制台日志的格式</p><p><code>logging.pattern.file</code> 修改日志文件中日志的格式</p><p><code>logging.pattern.dateformat</code> 修改日期格式</p><img src="./SpringBoot3学习笔记/image-20231117205638097.png" alt="image-20231117205638097" style="zoom:80%;" /><br/><p><strong>记录日志</strong></p><p>在类上加入注解<code>@Slf4j</code>后，可以通过<code>log.info()</code>在控制台打印日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;hello,Java&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2023</span>-<span class="hljs-number">11</span>-17T21:09:<span class="hljs-number">05.983</span>+08:<span class="hljs-number">00</span>  INFO <span class="hljs-number">16376</span> --- [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] c.z.logging.controller.HelloController   : hello,Java<br></code></pre></td></tr></table></figure><br/><p><strong>日志级别</strong></p><ul><li><p>由低到高：<code>ALL,TRACE,DEBUG,INFO,WARN,ERROR,FATAL,OFF</code></p><ul><li>只会打印指定级别及以上级别的日志</li><li>ALL：打印所有日志</li><li>TRACE：追踪框架详细流程日志，一般不使用</li><li>DEBUG：开发调试细节日志</li><li>INFO：关键、感兴趣的信息日志，一般通过手动INFO在控制台输出自己需要的提示信息</li><li>WARN：警告但不是错误的信息日志，比如版本过低警告</li><li>ERROR：业务错误日志，比如出现各种异常</li><li>FATAL：致命错误日志，比如JVM系统崩溃</li><li>OFF：关闭所有日志</li></ul></li><li><p>所有类的默认日志级别都使用root指定的级别作为默认级别</p></li><li><p>SpringBoot的日志默认级别是<code>INFO</code></p></li><li><p>可以修改所有类的日志级别和指定一个类的日志级别，通过配置<code>application.properties/yaml</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pro">logging.level.root=info<br>logging.level.com.zheng.logging.controller.HelloController=debug<br></code></pre></td></tr></table></figure><ul><li>logging.level.root&#x3D;info 设置所有类的日志级别为INFO</li><li>logging.level.com.zheng.logging.controller.HelloController&#x3D;debug 设置com.zheng.logging.controller.HelloController这个类的日志级别为DEBUG</li></ul></li></ul><br/><p><strong>日志分组</strong></p><p>将相关的logger分组在一起，统一配置。SpringBoot也支持。比如把Tomcat相关的日志统一设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prop">logging.group.tomcat=org.apache.catalina,org.apache.coyote,org.apache.tomcat<br>logging.level.tomcat=trace<br></code></pre></td></tr></table></figure><br/><p>SpringBoot预定义了两个分组<code>web</code>和<code>sql</code></p><table><thead><tr><th align="center">Name</th><th>Loggers</th></tr></thead><tbody><tr><td align="center">web</td><td>org.springframework.core.codec, org.springframework.http, org.springframework.web, org.springframework.boot.actuate.endpoint.web, org.springframework.boot.web.servlet.ServletContextInitializerBeans</td></tr><tr><td align="center">sql</td><td>org.springframework.jdbc.core, org.hibernate.SQL, org.jooq.tools.LoggerListener</td></tr></tbody></table><br/><p><strong>文件输出</strong></p><p>SpringBoot默认只把日志写在控制台，如果想额外记录日志到文件，可以在<code>application,properties</code>中添加<code>logging.file.name</code>或者<code>logging.file.path</code>配置项</p><table><thead><tr><th>logging.file.name</th><th>logging.file.path</th><th>示例</th><th>效果</th></tr></thead><tbody><tr><td>未指定</td><td>未指定</td><td></td><td>仅控制台输出</td></tr><tr><td><strong>指定</strong></td><td>未指定</td><td>my.log</td><td>写入指定文件。可以加路径</td></tr><tr><td>未指定</td><td><strong>指定</strong></td><td>&#x2F;var&#x2F;log</td><td>写入指定目录，文件名为spring.log</td></tr><tr><td><strong>指定</strong></td><td><strong>指定</strong></td><td></td><td>以logging.file.name为准</td></tr></tbody></table><p>当两个配置项都存在时以logging.file.name为准</p><br/><p><strong>文件归档与滚动切割</strong></p><p><strong>归档：</strong>每天的日志单独存放在一个文件中</p><p><strong>切割：</strong>指定每个文件的存储上限，超过上限时切割成另一个文件</p><ul><li><p>每天的日志应该单独分割出来存储。如果使用<code>logback</code>（SpringBoot默认整合），可以通过<code>application.properties/yaml</code>文件指定日志滚动规则</p></li><li><p>如果是其他日志系统，需要自行配置,添加log4j2.xml或log4j2-spring.xml</p></li><li><p>支持的滚动规则如下</p><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td>logging.logback.rollingpolicy.file-name-pattern</td><td>日志存档的文件名格式（默认值：${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz）</td></tr><tr><td>logging.logback.rollingpolicy.clean-history-on-start</td><td>应用启动时是否清除以前存档（默认值：false）</td></tr><tr><td>logging.logback.rollingpolicy.max-file-size</td><td>存档前，每个日志文件的最大大小（默认值：10MB）</td></tr><tr><td>logging.logback.rollingpolicy.total-size-cap</td><td>日志文件被删除之前，可以容纳的最大大小（默认值：0B）。设置1GB则磁盘存储超过 1GB 日志后就会删除旧日志文件</td></tr><tr><td>logging.logback.rollingpolicy.max-history</td><td>日志文件保存的最大天数(默认值：7).</td></tr></tbody></table></li></ul><br/><p><strong>自定义日志系统</strong></p><table><thead><tr><th>日志系统</th><th>自定义</th></tr></thead><tbody><tr><td>Logback</td><td>logback-spring.xml, logback-spring.groovy, logback.xml, or logback.groovy</td></tr><tr><td>Log4j2</td><td>log4j2-spring.xml or log4j2.xml</td></tr><tr><td>JDK (Java Util Logging)</td><td>logging.properties</td></tr></tbody></table><p>建议在日志配置中使用<code>-spring</code>变量，例如配置文件名用<code>logback-spring.xml</code>而不是<code>logback.xml</code>。如果不添加<code>-spring</code>，spring无法完全控制日志初始化</p><br/><hr><h3 id="4-Web开发"><a href="#4-Web开发" class="headerlink" title="4. Web开发"></a>4. Web开发</h3><h4 id="4-1-Web场景"><a href="#4-1-Web场景" class="headerlink" title="4.1 Web场景"></a>4.1 Web场景</h4><p>整合文web场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>引入了<code>autoconfigure</code>功能<br><code>@EnableAutoConfiguration</code>注解使用<code>@Import(AutoConfigurationImportSelector.calss)</code>批量导入组件</p><p>绑定了配置文件的一堆配置项</p><ul><li>SpringMVC的所有配置<code>spring.mvc</code></li><li>Web场景通用配置<code>spring.web</code></li><li>文件上传配置<code>spring.servlet.multipart</code></li><li>服务器的配置<code>server</code></li></ul><br/><hr><h3 id="5-数据访问"><a href="#5-数据访问" class="headerlink" title="5. 数据访问"></a>5. 数据访问</h3><h4 id="5-1-SpringBoot整合Spring、MyBatis、SpringMVC"><a href="#5-1-SpringBoot整合Spring、MyBatis、SpringMVC" class="headerlink" title="5.1 SpringBoot整合Spring、MyBatis、SpringMVC"></a>5.1 SpringBoot整合Spring、MyBatis、SpringMVC</h4><p>详情见：<a href="lzhengjy.gitee.io/2023/11/09/SpringBoot%E6%95%B4%E5%90%88MyBatis%E5%92%8CSpringMVC/">SpringBoot整合SSM</a></p><p>所有的<code>Mybatis配置</code>写在<code>application.properties</code>中</p><p>所有的sql写在对应xml文件中或者通过注解写在对应的mapper接口上</p><br/><h4 id="5-2-自动配置分析"><a href="#5-2-自动配置分析" class="headerlink" title="5.2 自动配置分析"></a>5.2 自动配置分析</h4><p><strong>jdbc场景的自动配置</strong></p><ul><li><code>mybatis-spring-boot-starter</code>导入 <code>spring-boot-starter-jdbc</code>，jdbc是操作数据库的场景</li><li>jdbc场景的几个自动装配<ul><li>org.springframework.boot.autoconfigure.jdbc.<strong>DataSourceAutoConfiguration</strong><ul><li>数据源的自动装配</li><li>所有和数据源有关的配置绑定在<code>DataSourceProperties</code>中</li><li>默认使用<code>HikariDataSource</code></li></ul></li><li>org.springframework.boot.autoconfigure.jdbc.<strong>JdbcTemplateAutoConfiguration</strong><ul><li>给容器中放了<code>JdbcTemplate</code>操作数据库</li></ul></li><li>org.springframework.boot.autoconfigure.jdbc.<strong>DataSourceTransactionManagerAutoConfiguration</strong><ul><li>支持事务管理</li></ul></li></ul></li></ul><br/><p><strong><code>MyBatisAutoConfiguration</code>配置了MyBatis的整合流程</strong></p><ul><li><code>mybatis-spring-boot-starter</code>导入了<code>mybatis-spring-boot-autoconfigure</code></li><li>默认加载两个自动配置类<ul><li>org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration</li><li>org.mybatis.spring.boot.autoconfigure.<strong>MybatisAutoConfiguration</strong><ul><li>必须在数据源配置好后才会配置</li><li>给容器中<code>SqlSessionFactory</code>组件创建和数据库的一次会话</li><li>给容器中<code>SqlSessionTemplate</code>操作数据库</li></ul></li><li>MyBatis的所有配置都绑定在<code>MybatisProperties</code>中</li></ul></li></ul><br/><hr><h3 id="6-基础特性"><a href="#6-基础特性" class="headerlink" title="6. 基础特性"></a>6. 基础特性</h3><h4 id="6-1-SpringApplication"><a href="#6-1-SpringApplication" class="headerlink" title="6.1. SpringApplication"></a>6.1. SpringApplication</h4><p><strong>自定义banner</strong></p><ul><li>类路径添加banner.txt或者设置spring.banner.location就可以定制banner了</li><li>spring.banner.location的默认值是classpath:banner.txt(类路径添加banner.txt)</li><li>自定义banner推荐网站：<a href="https://www.bootschool.net/ascii">Spring Boot自定义启动Banner在线生成工具</a></li><li>关闭banner,在application.properties中添加配置<code>spring.main.banner-mode=off</code></li></ul><br/><p><strong>测试</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt"> ________  ___  ___  _______   ________   ________<br>|\_____  \|\  \|\  \|\  ___ \ |\   ___  \|\   ____\<br> \|___/  /\ \  \\\  \ \   __/|\ \  \\ \  \ \  \___|<br>     /  / /\ \   __  \ \  \_|/_\ \  \\ \  \ \  \  ___<br>    /  /_/__\ \  \ \  \ \  \_|\ \ \  \\ \  \ \  \|\  \<br>   |\________\ \__\ \__\ \_______\ \__\\ \__\ \_______\<br>    \|_______|\|__|\|__|\|_______|\|__| \|__|\|_______|<br><br></code></pre></td></tr></table></figure><img src="./SpringBoot3学习笔记/image-20231121145636418.png" style="zoom:67%;" /><br/><p><strong>自定义 SpringApplication</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot306FeaturesApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        SpringApplication.run(Boot306FeaturesApplication.class, args);</span><br><br>        <span class="hljs-comment">// 自定义SpringApplication的底层设置</span><br>        <span class="hljs-type">SpringApplication</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(Boot306FeaturesApplication.class);<br>        <span class="hljs-comment">// 调整SpringApplication的参数</span><br><span class="hljs-comment">//        application.setDefaultProperties();</span><br><br>        <span class="hljs-comment">// 把banner关闭,优先级比配置文件低</span><br>        application.setBannerMode(Banner.Mode.OFF);<br>        <span class="hljs-comment">// 运行SpringApplication</span><br>        application.run(args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>通过FluentBuilderAPI来自定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里的environment和listeners的值不能为空</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationBuilder</span>()<br>        .main(Boot306FeaturesApplication.class)<br>        .sources(Boot306FeaturesApplication.class)<br>        .bannerMode(Banner.Mode.OFF)<br><span class="hljs-comment">//        .environment(null)</span><br><span class="hljs-comment">//        .listeners(null)</span><br>        .run(args);<br></code></pre></td></tr></table></figure><br/><h4 id="6-2-Profiles"><a href="#6-2-Profiles" class="headerlink" title="6.2 Profiles"></a>6.2 Profiles</h4><p>Profiles是一种配置集合，开发人员可以根据不同的开发环境、需求或者配置条件来定制构建过程</p><br/><p><strong>标识环境</strong></p><p>任何<code>@Componet</code>,<code>@Configuration</code>或<code>@ConfigurationProperties</code>可以使用<code>@Profile</code>标记，来指定何时被加载。容器中的组件都可以被@Profiles标记</p><br/><p><strong>激活环境</strong></p><p>通过配置文件来配置激活指定环境</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">production</span><br></code></pre></td></tr></table></figure><p>也可用在启动项目时使用命令行激活:<code>--spirng.profiles.active=dev</code></p><br/><p><strong>环境包含</strong></p><ul><li><p>激活指定的一个或多个环境：<code>spring.profiles.active=production</code></p></li><li><p>指定默认环境：<code>spring.profiles.default=default</code></p></li><li><p>包含指定环境，无论激活的是哪个环境，指定环境都会被激活生效：<code>spring.profiles.include=dev</code></p><ul><li><p>例如</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.include[0]</span>=<span class="hljs-string">common</span><br><span class="hljs-attr">spring.profiles.include[1]</span>=<span class="hljs-string">local</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>=</code>后面的都是自定义的环境名</p></li></ul><br/><p><strong>Profile分组</strong></p><p>创建prod组，指定包含db和mq配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.group.prod[0]</span>=<span class="hljs-string">db</span><br><span class="hljs-attr">spring.profiles.group.prod[1]</span>=<span class="hljs-string">mq</span><br></code></pre></td></tr></table></figure><p>使用<code>--spring.profiles.active=prod</code>，就会激活<code>prod,db,mp</code>配置文件</p><br/><p><strong>Profile配置文件</strong></p><ul><li><code>application.properties</code>：主配置文件，在任何环境下都会生效</li><li><code>application-&#123;profile&#125;.properties/yaml</code>：可以作为指定环境的配置文件，例如<ul><li><code>application-dev.properties</code></li><li><code>application-test.yaml</code></li></ul></li><li>激活这个环境，配置就会生效</li><li>配置的优先级：自定义环境的配置文件优先级大于主配置文件优先级，<code>profile优先级</code>&gt;<code>application</code></li></ul><br/><h4 id="6-3-外部化配置"><a href="#6-3-外部化配置" class="headerlink" title="6.3 外部化配置"></a>6.3 外部化配置</h4><p>线上应用如何快速修改配置，并应用最新配置？</p><ul><li>SpringBoot使用<strong>配置优先级 + 外部配置</strong>简化配置更新、简化运维</li><li>只需要在项目的jar包所在的文件夹下面在放一个<code>application.properties</code>最新配置文件，重启项目就能更新最新配置</li></ul><br/><p><strong>配置优先级</strong></p><ol><li><strong>默认属性</strong>（通过<code>SpringApplication.setDefaultProperties</code>指定的）</li><li>@PropertySource指定加载的配置（需要写在@Configuration类上才可生效）</li><li><strong>配置文件（pplication.properties&#x2F;yml等）</strong></li><li>RandomValuePropertySource支持的random.*配置（如：@Value(“${random.int}”)）</li><li>OS 环境变量</li><li>Java 系统属性（System.getProperties()）</li><li>JNDI 属性（来自java:comp&#x2F;env）</li><li>ServletContext 初始化参数</li><li>ServletConfig 初始化参数</li><li>SPRING_APPLICATION_JSON属性（内置在环境变量或系统属性中的 JSON）</li><li><strong>命令行参数</strong></li><li>测试属性。(@SpringBootTest进行测试时指定的属性)</li><li>测试类@TestPropertySource注解</li><li>Devtools 设置的全局属性。($HOME&#x2F;.config&#x2F;spring-boot)</li></ol><br/><p><strong>配置文件的优先级如下（后面的覆盖前面的）</strong></p><ol><li>jar包内的<code>application.properties.yml</code></li><li>jar包内的<code>application-&#123;profile&#125;.properties/yml</code></li><li>jar包外的<code>application.properties/yml</code></li><li>jar包外的<code>application-&#123;profile&#125;.properties/yml</code></li><li>如果<code>properties</code>和<code>yml</code>同时存在，<code>properties</code>优先</li></ol><br/><h4 id="6-4-单元测试"><a href="#6-4-单元测试" class="headerlink" title="6.4 单元测试"></a>6.4 单元测试</h4><p>SpringBoot提供一系列测试工具及注解方便我们进行测试</p><p>我们只需要导入<code>spring-boot-starter-test</code>即可整合测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br/><p>spring-boot-starter-test默认提供了下面的库供我们测试使用</p><ul><li>JUnit 5</li><li>Spring Test</li><li>AssertJ</li><li>Hamcrest</li><li>Mockito</li><li>JSONassert</li><li>JsonPath</li></ul><br/><p>如果要测试组件，在测试类中通过<code>@Autowired</code>导入需要测试的组件即可</p><br/><p><strong>注解</strong></p><p>JUnit 5 的注解相对于 JUnit 4 有所变化</p><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">JUnit官网</a></p><ul><li>**@Test :**表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li>**@ParameterizedTest :**表示方法是参数化测试，下方会有详细介绍</li><li>**@RepeatedTest :**表示方法可重复执行，下方会有详细介绍</li><li>**@DisplayName :**为测试类或者测试方法设置展示名称</li><li>**@BeforeEach :**表示在每个单元测试之前执行</li><li>**@AfterEach :**表示在每个单元测试之后执行</li><li>**@BeforeAll :**表示在所有单元测试之前执行</li><li>**@AfterAll :**表示在所有单元测试之后执行</li><li>**@Tag :**表示单元测试类别，类似于JUnit4中的@Categories</li><li>**@Disabled :**表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</li><li>**@Timeout :**表示测试方法运行如果超过了指定时间将会返回错误</li><li>**@ExtendWith :**为测试类或测试方法提供扩展类引用</li></ul><br/><p><strong>断言</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr><tr><td>assertArrayEquals</td><td>数组断言</td></tr><tr><td>assertAll</td><td>组合断言</td></tr><tr><td>assertThrows</td><td>异常断言</td></tr><tr><td>assertTimeout</td><td>超时断言</td></tr><tr><td>fail</td><td>快速失败</td></tr></tbody></table><br/><p><strong>参数化测试</strong></p><p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p><p>利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><ul><li>@ValueSource: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</li><li>@NullSource: 表示为参数化测试提供一个null的入参</li><li>@EnumSource: 表示为参数化测试提供一个枚举入参</li><li>@CsvFileSource：表示读取指定CSV文件内容作为参数化测试入参</li><li>@MethodSource：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流）</li></ul><br/> ]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合MyBatis和SpringMVC</title>
    <link href="/2023/11/09/SpringBoot%E6%95%B4%E5%90%88MyBatis%E5%92%8CSpringMVC/"/>
    <url>/2023/11/09/SpringBoot%E6%95%B4%E5%90%88MyBatis%E5%92%8CSpringMVC/</url>
    
    <content type="html"><![CDATA[<p>我们通过一个案例来演示SpringBoot整合MyBatis和SpringMVC<br>该案例通过前后端分离来完成，前端使用vue2加JavaScript实现</p><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><h4 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;!-- &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt; --&gt;<br>        &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;<br>        &lt;div class=&quot;thead&quot;&gt;<br>            &lt;div class=&quot;row bold&quot;&gt;<br>                &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;<br>                &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;<br>                &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;<br>                &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;div class=&quot;tbody&quot;&gt;<br>            &lt;div v-if=&quot;students.length &gt; 0&quot;&gt;<br>                &lt;div class=&quot;row&quot; v-for=&quot;stu in students&quot; :key=&quot;stu.id&quot;&gt;<br>                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;stu.id &#125;&#125;&lt;/div&gt;<br>                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;stu.name &#125;&#125;&lt;/div&gt;<br>                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;stu.sex &#125;&#125;&lt;/div&gt;<br>                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;stu.age&#125;&#125;&lt;/div&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import axios from &#x27;../utils/myaxios&#x27;<br>const options = &#123;<br>    mounted: function()&#123;<br>        this.sendReq()<br>    &#125;,<br>    data: function() &#123;<br>        return &#123;<br>            students: []<br>        &#125;;<br>    &#125;,<br>    methods: &#123;<br>        async sendReq() &#123;<br>            const resp = await axios.get(&quot;/api/students&quot;);<br>            console.log(resp.data);<br>            this.students = resp.data.data;<br>        &#125;<br>    &#125;<br>&#125;;<br>export default options;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>    div &#123;<br>        font-family: 华文行楷;<br>        font-size: 20px;<br>    &#125;<br><br>    .title &#123;<br>        margin-bottom: 10px;<br>        font-size: 30px;<br>        color: #333;<br>        text-align: center;<br>    &#125;<br><br>    .row &#123;<br>        background-color: #fff;<br>        display: flex;<br>        justify-content: center;<br>    &#125;<br><br>    .col &#123;<br>        border: 1px solid #f0f0f0;<br>        width: 15%;<br>        height: 35px;<br>        text-align: center;<br>        line-height: 35px;<br>    &#125;<br><br>    .bold .col &#123;<br>        background-color: #f1f1f1;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ul><li><p>v-if：条件渲染指令，根据表达式的值来动态控制元素的显示或隐藏， 当表达式中的值为true时，其里面的内容才会展现出来</p></li><li><p>v-else：条件渲染指令，当v-if中表达式的值为false时，其里面的内容才会展现出来，v-else需要和v-if搭配使用，不能单独存在</p></li><li><p>v-for：列表渲染指令，类似于Java中的foreach</p><ul><li>key：key属性主要用在Vue的虚拟DOM算法，在新旧nodes对比时辨识VNodes。如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试就地修改&#x2F;复用相同类型元素的算法；而使用key时，它会基于key的变化重新排列元素顺序，并且会移除&#x2F;销毁key不存在的元素</li></ul></li><li><p>import axios from ‘..&#x2F;utils&#x2F;myaxios’ ：这里的myaxios是自定义的axios</p></li><li><p>mounted：生命周期钩子函数，或自动执行其中的内容</p><ul><li>在Vue实例被挂载到真实的DOM元素后被调用</li><li>仅触发一次</li><li>应用场景：执行异步操作、注册事件监听器、调用第三方库或插件、执行其它初始化操作</li></ul></li><li><p>const resp &#x3D; await axios.get(“&#x2F;api&#x2F;students”)：像后端发送get请求并获取数据</p></li><li><p>this.students &#x3D; resp.data.data：把后端返回的对象中的数据获取到</p><ul><li><p>resp.data.data：由于后端统一了返回格式，resp.data只能获取到Result对象，resp.data.data才能获取到Result中的data数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code; <span class="hljs-comment">//编码：1成功，0和其它数字为失败</span><br>    <span class="hljs-keyword">private</span> String msg; <span class="hljs-comment">//错误信息</span><br>    <span class="hljs-keyword">private</span> T data; <span class="hljs-comment">//数据</span><br>    ......<br></code></pre></td></tr></table></figure></li></ul><br/></li></ul><h4 id="自定义axios-js"><a href="#自定义axios-js" class="headerlink" title="自定义axios.js"></a>自定义axios.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">const</span> _axios = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-comment">// baseURL: &#x27;http://localhost:8080&#x27;,</span><br>    <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span><br>&#125;);<br>_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// 比如在这里添加统一的 headers</span><br>      config.<span class="hljs-property">headers</span> = &#123;<br>          <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">&#x27;aaa.bbb.ccc&#x27;</span><br>      &#125;<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br>_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">400</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求参数不正确&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">400</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">401</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;跳转至登录页面&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">401</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;资源未找到&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">404</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> _axios;<br></code></pre></td></tr></table></figure><br/><h4 id="自定义axios-js-1"><a href="#自定义axios-js-1" class="headerlink" title="自定义axios.js"></a>自定义axios.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">const</span> _axios = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-comment">// baseURL: &#x27;http://localhost:8080&#x27;,</span><br>    <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span><br>&#125;);<br>_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// 比如在这里添加统一的 headers</span><br>      config.<span class="hljs-property">headers</span> = &#123;<br>          <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">&#x27;aaa.bbb.ccc&#x27;</span><br>      &#125;<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br>_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">400</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求参数不正确&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">400</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">401</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;跳转至登录页面&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">401</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;资源未找到&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">404</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> _axios;<br></code></pre></td></tr></table></figure><br/><h4 id="配置文件vue-config-js"><a href="#配置文件vue-config-js" class="headerlink" title="配置文件vue.config.js"></a>配置文件vue.config.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">7070</span>,<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>在这里配置的端口号和统一的URL前缀映射</p><br/><hr><h3 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h3><h4 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h4><p>创建一个简单的表即可，输入一些内容</p><p><img src="/./SpringBoot%E6%95%B4%E5%90%88MyBatis%E5%92%8CSpringMVC/20231109142648.png"></p><br/><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>lombok插件中的@Data注解可以帮我们生成set、get、构造方法、toString等方法</p></li><li><p>Java中的类的属性名要和数据库表中的对应，数据库表可以用下划线，Java在编译时会把它用驼峰命名法转换，例如Java中的teacherName对应数据库中的teacher_name</p></li><li><p>Java中的类属性要和数据库表中的字段对应，数据类型也要对应</p><table><thead><tr><th align="center">MySQL字段类型</th><th align="center">Java实体类属性</th></tr></thead><tbody><tr><td align="center">int、tinyint、smallint、mediumint</td><td align="center">int</td></tr><tr><td align="center">bigint</td><td align="center">long</td></tr><tr><td align="center">float</td><td align="center">float</td></tr><tr><td align="center">double</td><td align="center">double</td></tr><tr><td align="center">varchar、char、text</td><td align="center">String</td></tr><tr><td align="center">date</td><td align="center">java.sql.Date</td></tr><tr><td align="center">time、datetime</td><td align="center">java.sqlTimestamp</td></tr><tr><td align="center">bit</td><td align="center">boolean</td></tr></tbody></table></li></ul><br/><h4 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    StudentService studentService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/api/students&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;Student&gt;&gt; <span class="hljs-title function_">getAllStudent</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Student&gt; students = studentService.getAll();<br>        <span class="hljs-keyword">return</span> Result.success(students);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><br/><h4 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h4><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentService</span> &#123;<br>    List&lt;Student&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    StudentMapper studentMapper;<br><br>    <span class="hljs-meta">@Override</span><br><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Student&gt; students = studentMapper.getAll();<br>        <span class="hljs-keyword">return</span> students;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这里的接口不是必须的，但是使用接口能够带来挺多方便<ul><li>在尚未实现具体Service逻辑的情况下编写上层代码，如Controller对Service的调用</li><li>Spring默认是基于动态代理实现AOP的，动态代理需要接口</li><li>可以对Service进行多实现</li></ul></li><li>由于该案例只是简单的实现一下SpringBoot整合MyBatis和SpringMVC，并未在业务层做一些逻辑处理，只是简单获取数据并返回</li></ul><br/><h4 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentMapper</span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from student&quot;)</span><br>    List&lt;Student&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>@Mapper和@Repository都是在持久层的接口上添加注解。</li><li>@Mapper是属于mybatis的注解。在程序中，mybatis需要找到对应的mapper，在编译时候动态生成代理类，实现数据库查询功能</li><li>但是如果只是单独的使用@Mapper注解的话，在idea中进行自动装配的时候，会出现警告，提示找不到这个bean。但是这个不影响程序运行，可以直接忽略也可以添加@Repository注解。这样spring会扫描@Repository并识别这个bean，就不会出现这个警告。</li></ul><br/><h4 id="统一返回结果类"><a href="#统一返回结果类" class="headerlink" title="统一返回结果类"></a>统一返回结果类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer code; <span class="hljs-comment">//编码：1成功，0和其它数字为失败</span><br>    <span class="hljs-keyword">private</span> String msg; <span class="hljs-comment">//错误信息</span><br>    <span class="hljs-keyword">private</span> T data; <span class="hljs-comment">//数据</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        Result&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;T&gt;();<br>        result.code = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T object)</span> &#123;<br>        Result&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;T&gt;();<br>        result.data = object;<br>        result.code = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br>        result.msg = msg;<br>        result.code = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Serializable接口：一个对象序列化的接口，一个类只有实现了Serializable接口，它的对象才能被序列化<ul><li>序列化：序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据</li><li>把对象转换为字节序列的过程称为对象的序列化、把字节序列恢复为对象的过程称为对象的反序列化</li></ul></li><li>这里用的是泛型类，即在声明类时使用泛型</li></ul><br/><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/vue?serverTimezone=GMT%2B8&amp;useSSL=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;020427&quot;</span><br></code></pre></td></tr></table></figure><ul><li>这里配置了数据源</li></ul><br/><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#端口号</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-comment">#druid数据库连接池</span><br><span class="hljs-comment">#type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-comment">#清除缓存</span><br><span class="hljs-attr">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span><br><span class="hljs-comment">#配置mapper</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/*.xml</span><br></code></pre></td></tr></table></figure><ul><li>这里配置了端口号</li><li>mybatis.mapper-locations：用于将配置路径下的*.xml文件加载到mybatis中，这个案例中mapper文件下没有写xml文件，采用的是注解的方法，所以这里可以不用配置</li><li>spring.thymeleaf.cache：Spring Thymeleaf模板引擎的配置属性，用于指定是否启用模板缓存<ul><li>true：Thymeleaf会将解析过的模板缓存起来，以提高性能</li><li>false：每次请求都会重新解析模板</li></ul></li></ul><br/><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>启动前端项目<br>在vue项目下用命令行运行启动指令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> serve<br></code></pre></td></tr></table></figure><img src="./SpringBoot整合MyBatis和SpringMVC/20231109154830.png" style="zoom: 67%;" /><br/><p>后端正常在启动类启动就行了</p><p>最终正常前端从后端获取到了数据并展示在页面中</p><p><img src="/./SpringBoot%E6%95%B4%E5%90%88MyBatis%E5%92%8CSpringMVC/20231109155246.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue2基础知识</title>
    <link href="/2023/11/04/Vue2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/11/04/Vue2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一-Vue2基础"><a href="#一-Vue2基础" class="headerlink" title="一. Vue2基础"></a>一. Vue2基础</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><p><strong>安装脚手架</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue/cli<br></code></pre></td></tr></table></figure><ul><li>g 参数表示全局安装，这样在任意目录都可以使用 vue 脚本创建项目</li></ul><br/><p><strong>创建项目</strong></p><p>使用在需要创建项目的文件夹下打开命令行操作，输入指令回车后会跳转到vue创建项目的网站中去</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vue ui</span><br></code></pre></td></tr></table></figure><img src="./Vue2基础知识/20231104152637.png" style="zoom: 50%;" /><p>在这里可以进行vue项目的创建</p><img src="./Vue2基础知识/20231104153005.png" style="zoom:50%;" /><br/><p><strong>安装 devtools</strong></p><ul><li>devtools 插件网址：<a href="https://devtools.vuejs.org/guide/installation.html">https://devtools.vuejs.org/guide/installation.html</a></li></ul><img src="./Vue2基础知识/20231105145007.png" style="zoom: 50%;" /><br/><p><strong>运行vue</strong></p><p>在项目文件夹里打开终端输入指令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> serve<br></code></pre></td></tr></table></figure><img src="./Vue2基础知识/20231105145350.png" style="zoom: 67%;" /><img src="./Vue2基础知识/20231105145500.png" style="zoom:67%;" /><br/><p><strong>修改端口号</strong></p><ul><li>文档地址：<a href="https://webpack.js.org/configuration/dev-server/#devserverport">DevServer | webpack</a></li><li>在vue.config.js中添加一下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">7070</span><br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>添加代理</strong></p><p>为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理</p><ul><li><p>文档地址：<a href="https://webpack.js.org/configuration/dev-server/#devserverport">DevServer | webpack</a></p></li><li><p>打开 vue.config.js 添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">  <br><span class="hljs-attr">devServer</span>: &#123;<br>   <span class="hljs-attr">port</span>: <span class="hljs-number">7070</span>,<br>   <span class="hljs-attr">proxy</span>: &#123;<br>     <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>       <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>,<br>       <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>     &#125;<br>   &#125;<br> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><br/><p><strong>Vue项目结构</strong></p><p><img src="/./Vue2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20231105150531.png"></p><ul><li>assets - 静态资源</li><li>components - 可重用组件</li><li>router - 路由</li><li>store - 数据共享</li><li>views - 视图组件</li></ul><p>以后还会添加</p><ul><li>api - 跟后台交互，发送 fetch、xhr 请求，接收响应</li><li>plugins - 插件</li></ul><br/><hr><h3 id="2-Vue组件"><a href="#2-Vue组件" class="headerlink" title="2. Vue组件"></a>2. Vue组件</h3><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;&lt;/template&gt;<br><br>&lt;script&gt;&lt;/script&gt;<br><br>&lt;style&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><ul><li>template 模板部分，由它生成 html 代码</li><li>script 代码部分，控制模板的数据来源和行为</li><li>style 样式部分，一般不咋关心</li></ul><br/><p>先删除App.vue原有代码，来个 Hello, World 例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg: &quot;Hello, Vue!&quot;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>解释</p><ul><li>export default 导出组件对象，供 main.js 导入使用</li><li>这个对象有一个 data 方法，返回一个<strong>对象</strong>，给 template 提供数据</li><li><code>&#123;&#123;&#125;&#125;</code> 在 Vue 里称之为插值表达式，用来<strong>绑定</strong> data 方法返回的<strong>对象</strong>属性，<strong>绑定</strong>的含义是数据发生变化时，页面显示会同步变化</li></ul><img src="./Vue2基础知识/20231105152017.png" style="zoom:80%;" /><br/><h4 id="2-1-文本插值"><a href="#2-1-文本插值" class="headerlink" title="2.1 文本插值"></a>2.1 文本插值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;/h1&gt;<br>        &lt;h1&gt;&#123;&#123; age &gt; 60 ? &#x27;老年&#x27; : &#x27;青年&#x27; &#125;&#125;&lt;/h1&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const options = &#123;<br>    data: function () &#123;<br>        return &#123; name: &#x27;张三&#x27;, age: 70 &#125;;<br>    &#125;<br>&#125;;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li><code>&#123;&#123;&#125;&#125;</code> 里只能绑定一个属性，绑定多个属性需要用多个 <code>&#123;&#123;&#125;&#125;</code> 分别绑定</li><li>template 内只能有一个根元素</li><li>插值内可以进行简单的表达式计算</li></ul><img src="./Vue2基础知识/20231105154158.png" style="zoom:80%;" /><br/><h4 id="2-2-属性绑定"><a href="#2-2-属性绑定" class="headerlink" title="2.2 属性绑定"></a>2.2 属性绑定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;div&gt;&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;/div&gt;<br>        &lt;div&gt;&lt;input type=&quot;date&quot; v-bind:value=&quot;birthday&quot;&gt;&lt;/div&gt;<br>        &lt;div&gt;&lt;input type=&quot;text&quot; :value=&quot;age&quot;&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const options = &#123;<br>    data: function () &#123;<br>        return &#123; name: &#x27;王五&#x27;, birthday: &#x27;1995-05-01&#x27;, age: 20 &#125;;<br>    &#125;<br>&#125;;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>简写方式：可以省略 v-bind 只保留冒号</li></ul><img src="./Vue2基础知识/20231105154654.png" style="zoom:80%;" /><br/><h4 id="2-3-事件绑定"><a href="#2-3-事件绑定" class="headerlink" title="2.3 事件绑定"></a>2.3 事件绑定</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 事件绑定 --&gt;<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我执行m1&quot; v-on:click=&quot;m1&quot;&gt;&lt;/div&gt;<br>        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我执行m2&quot; @click=&quot;m2&quot;&gt;&lt;/div&gt;<br>        &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const options = &#123;<br>    data: function () &#123;<br>        return &#123; count: 0 &#125;;<br>    &#125;,<br>    methods: &#123;<br>        m1() &#123;<br>            this.count ++;<br>            console.log(&quot;m1&quot;)<br>        &#125;,<br>        m2() &#123;<br>            this.count --;<br>            console.log(&quot;m2&quot;)<br>        &#125;<br>    &#125;<br>&#125;;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>简写方式：可以把 v-on: 替换为 @</li><li>在 methods 方法中的 this 代表的是 data 函数返回的数据对象</li></ul><p><img src="/./Vue2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20231105213826.png"></p><br/><h4 id="2-4-双向绑定"><a href="#2-4-双向绑定" class="headerlink" title="2.4 双向绑定"></a>2.4 双向绑定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;div&gt;<br>            &lt;label for=&quot;&quot;&gt;请输入姓名&lt;/label&gt;<br>            &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>            &lt;label for=&quot;&quot;&gt;请输入年龄&lt;/label&gt;<br>            &lt;input type=&quot;text&quot; v-model=&quot;age&quot;&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>            &lt;label for=&quot;&quot;&gt;请选择性别&lt;/label&gt;<br>            男 &lt;input type=&quot;radio&quot; value=&quot;男&quot; v-model=&quot;sex&quot;&gt;<br>            女 &lt;input type=&quot;radio&quot; value=&quot;女&quot; v-model=&quot;sex&quot;&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>            &lt;label for=&quot;&quot;&gt;请选择爱好&lt;/label&gt;<br>            游泳 &lt;input type=&quot;checkbox&quot; value=&quot;游泳&quot; v-model=&quot;fav&quot;&gt;<br>            打球 &lt;input type=&quot;checkbox&quot; value=&quot;打球&quot; v-model=&quot;fav&quot;&gt;<br>            健身 &lt;input type=&quot;checkbox&quot; value=&quot;健身&quot; v-model=&quot;fav&quot;&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const options = &#123;<br>    data: function () &#123;<br>        return &#123; name: &#x27;&#x27;, age: null, sex:&#x27;男&#x27; , fav:[&#x27;打球&#x27;]&#125;;<br>    &#125;,<br>    methods: &#123;<br>    &#125;<br>&#125;;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>用 v-model 实现双向绑定，即 <ul><li>JavaScript 数据可以同步到表单标签</li><li>反过来用户在表单标签输入的新值也会同步到 JavaScript 这边</li></ul></li><li>双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了</li><li>复选框这种标签，双向绑定的 JavaScript 数据类型一般用数组</li></ul><img src="./Vue2基础知识/20231106132653.png" style="zoom:67%;" /><br/><h4 id="2-5-计算属性"><a href="#2-5-计算属性" class="headerlink" title="2.5 计算属性"></a>2.5 计算属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 计算属性 --&gt;<br>&lt;template&gt;<br>    &lt;div&gt;<br>//        &lt;h2&gt;&#123;&#123;fullName()&#125;&#125;&lt;/h2&gt;<br>        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;<br>        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;<br>        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const options = &#123;<br>    data: function () &#123;<br>        return &#123; firstName: &#x27;哥&#x27;, lastName: &#x27;正&#x27; &#125;;<br>    &#125;,<br>    /* methods: &#123;<br>        fullName() &#123;<br>            console.log(&#x27;进入了 fullName&#x27;)<br>            return this.lastName + this.firstName;<br>        &#125;<br>    &#125;,*/<br>    computed: &#123;<br>        fullName() &#123;<br>            console.log(&#x27;进入了 fullName&#x27;)<br>            return this.lastName + this.firstName;<br>        &#125;<br>    &#125;<br>&#125;;<br>export default options;<br></code></pre></td></tr></table></figure><ul><li>普通方法调用必须加 ()，没有缓存功能</li><li>计算属性使用时就把它当属性来用，不加 ()，有缓存功能：<ul><li>一次计算后，会将结果缓存，下次再计算时，只要数据没有变化，不会重新计算，直接返回缓存结果</li></ul></li></ul><img src="./Vue2基础知识/20231106134344.png" style="zoom:67%;" /><br/><hr><h3 id="3-axios"><a href="#3-axios" class="headerlink" title="3. axios"></a>3. axios</h3><p>axios 它的底层是用了 XMLHttpRequest（xhr）方式发送请求和接收响应，xhr 相对于之前讲过的 fetch api 来说，功能更强大，但由于是比较老的 api，不支持 Promise，axios 对 xhr 进行了封装，使之支持 Promise，并提供了对请求、响应的统一拦截功能</p><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install axios -S<br></code></pre></td></tr></table></figure><p>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>axios 默认导出一个对象，这里的 import 导入的就是它默认导出的对象</li></ul><p>方法</p><table><thead><tr><th>请求</th><th>备注</th></tr></thead><tbody><tr><td>axios.get(url[, config])</td><td></td></tr><tr><td>axios.delete(url[, config])</td><td></td></tr><tr><td>axios.head(url[, config])</td><td></td></tr><tr><td>axios.options(url[, config])</td><td></td></tr><tr><td>axios.post(url[, data[, config]])</td><td></td></tr><tr><td>axios.put(url[, data[, config]])</td><td></td></tr><tr><td>axios.patch(url[, data[, config]])</td><td></td></tr></tbody></table><ul><li>config - 选项对象、例如查询参数、请求头…</li><li>data - 请求体数据、最常见的是 json 格式数据</li><li>get、head 请求无法携带请求体，这应当是浏览器的限制所致（xhr、fetch api 均有限制）</li><li>options、delete 请求可以通过 config 中的 data 携带请求体</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import axios from &#x27;axios&#x27;<br>const options = &#123;<br>    methods: &#123;<br>        async sendReq() &#123;<br>            // 1. 演示 get, post<br>            const resp1 = await axios.get(&#x27;/api/a2&#x27;);<br>            const resp2 = await axios.post(&#x27;/api/a2&#x27;);<br><br>            // 2. 发送请求头<br>            const resp3 = await axios.post(&#x27;/api/a3&#x27;,&#123;&#125;,&#123;<br>                 headers:&#123;<br>                     Authorization:&#x27;abc&#x27;<br>                 &#125;<br>            &#125;);<br><br>            // 3. 发送请求时携带查询参数 ?name=xxx&amp;age=xxx<br>            const name = encodeURIComponent(&#x27;&amp;&amp;&amp;&#x27;);<br>            const age = 18;<br>            const resp4 = await axios.post(`/api/a4?name=$&#123;name&#125;&amp;age=$&#123;age&#125;`);<br><br>            // 不想自己拼串、处理特殊字符、就用下面的办法<br>            const resp5 = await axios.post(&#x27;/api/a4&#x27;, &#123;&#125;, &#123;<br>               params: &#123;<br>                    name:&#x27;&amp;&amp;&amp;&amp;&#x27;,<br>                    age: 20<br>               &#125;<br>            &#125;);<br><br>            // 4. 用请求体发数据，格式为 urlencoded<br>            const params1 = new URLSearchParams();<br>            params1.append(&quot;name&quot;, &quot;张三&quot;);<br>            params1.append(&quot;age&quot;, 24)<br><br>            const resp6 = await axios.post(&#x27;/api/a4&#x27;, params);<br><br>            // 5. 用请求体发数据，格式为 multipart<br>            const params2 = new FormData();<br>            params2.append(&quot;name&quot;, &quot;李四&quot;);<br>            params2.append(&quot;age&quot;, 30);<br>            const resp7 = await axios.post(&#x27;/api/a5&#x27;, params);<br><br>            // 6. 用请求体发数据，格式为 json<br>            const resp8 = await axios.post(&#x27;/api/a5json&#x27;, &#123;<br>                name: &#x27;王五&#x27;,<br>                age: 50<br>            &#125;);<br><br>            console.log(resp);<br>        &#125;<br>    &#125;<br>&#125;;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>创建实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> _axios = axios.<span class="hljs-title function_">create</span>(config);<br></code></pre></td></tr></table></figure><ul><li>axios 对象可以直接使用，但使用的是默认的设置</li><li>用 axios.create 创建的对象，可以覆盖默认设置，config 见下面说明</li></ul><p><strong>常见的 config 项有</strong></p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>baseURL</td><td>将自动加在 url 前面</td></tr><tr><td>headers</td><td>请求头，类型为简单对象</td></tr><tr><td>params</td><td>跟在 URL 后的请求参数，类型为简单对象或 URLSearchParams</td></tr><tr><td>data</td><td>请求体，类型有简单对象、FormData、URLSearchParams、File 等</td></tr><tr><td>withCredentials</td><td>跨域时是否携带 Cookie 等凭证，默认为 false</td></tr><tr><td>responseType</td><td>响应类型，默认为 json</td></tr></tbody></table><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> _axios = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>,<br>    <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span><br>&#125;);<br><span class="hljs-keyword">await</span> _axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/a6set&#x27;</span>)<br><span class="hljs-keyword">await</span> _axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/a6get&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>生产环境希望 xhr 请求不走代理，可以用 baseURL 统一修改</li><li>希望跨域请求携带 cookie，需要配置 withCredentials: true，服务器也要配置 allowCredentials &#x3D; true，否则浏览器获取跨域返回的 cookie 时会报错</li></ul><br/><p><strong>响应格式</strong></p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>data</td><td>响应体数据</td></tr><tr><td>status</td><td>状态码</td></tr><tr><td>headers</td><td>响应头</td></tr></tbody></table><ul><li>200 表示响应成功</li><li>400 请求数据不正确 age&#x3D;abc</li><li>401 身份验证没通过</li><li>403 没有权限</li><li>404 资源不存在</li><li>405 不支持请求方式 post</li><li>500 服务器内部错误</li></ul><br/><p>请求拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// 比如在这里添加统一的 headers</span><br>      config.<span class="hljs-property">headers</span> = &#123;<br>          <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">&#x27;aaa.bbb.ccc&#x27;</span><br>      &#125;<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>响应拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-comment">// 2xx 范围内走这里</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// 超出 2xx, 比如 4xx, 5xx 走这里</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><ul><li><p>这里的 _axios 是自己创建的axios对象</p></li><li><p>请求拦截器中第一个方法是请求正常的情况下要执行的拦截动作，第二个方法是请求拦截异常的情况下要执行的拦截动作</p></li><li><p>响应拦截器中第一个方法是响应正常的情况下要执行的拦截动作，第二个方法是响应拦截异常的情况下要执行的拦截动作</p></li><li><p>响应时出现的异常可以放在响应拦截器中的第二个方法中去，如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">400</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求参数不正确&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">400</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">401</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;跳转至登录页面&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">401</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;资源未找到&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">404</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure></li></ul><br/><p>把上面的代码抽取到一个js文件中去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">const</span> _axios = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-comment">// baseURL: &#x27;http://localhost:8080&#x27;,</span><br>    <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span><br>&#125;);<br>_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// 比如在这里添加统一的 headers</span><br>      config.<span class="hljs-property">headers</span> = &#123;<br>          <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">&#x27;aaa.bbb.ccc&#x27;</span><br>      &#125;<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br>_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">400</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求参数不正确&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">400</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">401</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;跳转至登录页面&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">401</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;资源未找到&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">404</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> _axios;<br></code></pre></td></tr></table></figure><hr><h2 id="二-Vue2进阶"><a href="#二-Vue2进阶" class="headerlink" title="二. Vue2进阶"></a>二. Vue2进阶</h2><h3 id="1-ElementUI"><a href="#1-ElementUI" class="headerlink" title="1. ElementUI"></a>1. ElementUI</h3><p>安装：在vue项目文件下打开命令行输入以下安装代码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install element-ui -S<br></code></pre></td></tr></table></figure><p>安装完后在package.json文件中会引入element-ui的依赖<br><img src="./Vue2基础知识/image-20231110144914074.png" style="zoom:67%;" /></p><br/><p>引入组件</p><p>把下面的代码放入main.js中，Vue.use(Element)要放在new Vue前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Element</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Element</span>)<br></code></pre></td></tr></table></figure><br/><h4 id="1-1-表格组件"><a href="#1-1-表格组件" class="headerlink" title="1.1 表格组件"></a>1.1 表格组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;el-table :data=&quot;students&quot;&gt;<br>            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;<br>            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;<br>            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;<br>            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;<br>        &lt;/el-table&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import axios from &#x27;../utils/myaxios&#x27;<br>const options = &#123;<br>    async mounted() &#123;<br>        const resp = await axios.get(&#x27;/api/students&#x27;);<br>        this.students = resp.data.data<br>    &#125;,<br>    data() &#123;<br>        return &#123;<br>            students: []<br>        &#125;<br>    &#125;<br>&#125;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>el-table：表格<ul><li>data：要展示的数据对象</li></ul></li><li>el-table-column：表格中的列<ul><li>label：命名</li><li>prop：数据对象对应的属性</li></ul></li></ul><img src="./Vue2基础知识/image-20231110152129499.png" style="zoom: 50%;" /><br/><h4 id="1-2-分页组件"><a href="#1-2-分页组件" class="headerlink" title="1.2 分页组件"></a>1.2 分页组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;el-table :data=&quot;students&quot;&gt;<br>            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;<br>            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;<br>            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;<br>            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;<br>        &lt;/el-table&gt;<br>        &lt;el-pagination <br>            :total=&quot;total&quot;<br>            :page-size=&quot;queryDto.size&quot;<br>            :current-page=&quot;queryDto.page&quot;<br>            layout=&quot;prev,pager,next,sizes,-&gt;,total&quot;<br>            :page-sizes=&quot;[5,10,15,20]&quot;<br>            @current-change=&quot;currentChange&quot;<br>            @size-change=&quot;sizeChange&quot;<br>        &gt;&lt;/el-pagination&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;../utils/myaxios&#x27;<br>const options = &#123;<br>    mounted() &#123;<br>        this.query();<br>    &#125;,<br>    methods: &#123;<br>        currentChange(page) &#123;<br>            this.queryDto.page = page;<br>            this.query();<br>        &#125;,<br>        sizeChange(size) &#123;<br>            this.queryDto.size = size;<br>            this.query();<br>        &#125;,<br>        async query() &#123;<br>            const resp = await axios.get(&#x27;/api/students/q&#x27;, &#123;<br>                params: this.queryDto<br>            &#125;);<br>            this.students = resp.data.data.list;<br>            this.total = resp.data.data.total;<br>        &#125;<br>    &#125;,<br>    data() &#123;<br>        return &#123;<br>            students: [],<br>            queryDto: &#123;<br>                page: 1,<br>                size: 5<br>            &#125;,<br>            total: 0<br>        &#125;<br>    &#125;<br>&#125;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li><p>el-pagination：element-ui分页组件</p><ul><li>有 : 和 没有 : 的区别，有:表示该属性的值会去data中去查找，没有则是给定固定值</li><li>total： 总数量</li><li>page-size：每页条目个数，可以自定义<ul><li>:page-sizes&#x3D;”[5,10,15,20]” ：自定义每页条目数</li></ul></li><li>layout：组件布局，子组件名用逗号分隔（决定页面显示哪些组件）sizes<code>, </code>prev<code>, </code>pager<code>, </code>next<code>, </code>jumper<code>, </code>-&gt;<code>, </code>total<code>, </code>slot</li><li>@current-change：current- page改变时会触发，这里通过调用自定义函数currentChange来改变data中的page，来实现数据的双向绑定</li><li>@size-change：page-size改变时会触发，这里通过调用自定义函数sizeChange来改变data中的size，来实现数据的双向绑定</li></ul></li><li><p>query()函数：把向前端的请求封装成方法，方便调用。刚开始加载页面时会调用（钩子函数中），页数改变时会调用（currentChange函数中），每页条目个数改变时会调用（sizeChange函数中）</p></li><li><p>this.students &#x3D; resp.data.data.list和this.total &#x3D; resp.data.data.total     因为后端返回的数据中的data是一个map集合</p></li></ul><p><img src="/./Vue2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20231110223807689.png"></p><br/><h4 id="1-3-分页搜索"><a href="#1-3-分页搜索" class="headerlink" title="1.3 分页搜索"></a>1.3 分页搜索</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;!-- 输入框，用于输入姓名 --&gt;<br>        &lt;el-input placeholder=&quot;请输入姓名&quot; size=&quot;mini&quot; v-model=&quot;queryDto.name&quot;&gt;&lt;/el-input&gt;<br>        <br>        &lt;!-- 下拉选择框，用于选择性别 --&gt;<br>        &lt;el-select placeholder=&quot;请选择性别&quot; size=&quot;mini&quot; v-model=&quot;queryDto.sex&quot;&gt;<br>            &lt;el-option value=&quot;&quot; label=&quot;无限制&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option value=&quot;男&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option value=&quot;女&quot;&gt;&lt;/el-option&gt;<br>        &lt;/el-select&gt;<br>        <br>        &lt;!-- 下拉选择框，用于选择年龄范围 --&gt;<br>        &lt;el-select placeholder=&quot;请选择年龄&quot; size=&quot;mini&quot; v-model=&quot;queryDto.age&quot;&gt;<br>            &lt;el-option value=&quot;&quot; label=&quot;无限制&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option value=&quot;0,20&quot; label=&quot;0到20&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option value=&quot;21,40&quot; label=&quot;21到40&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option value=&quot;41,60&quot; label=&quot;41到60&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option value=&quot;61,200&quot; label=&quot;61岁以上&quot;&gt;&lt;/el-option&gt;<br>        &lt;/el-select&gt;<br>        <br>        &lt;!-- 按钮，点击后进行搜索 --&gt;<br>        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;search()&quot;&gt;搜索&lt;/el-button&gt;<br>        <br>        &lt;!-- 表格，用于显示学生数据 --&gt;<br>        &lt;el-table :data=&quot;students&quot;&gt;<br>            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;<br>            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;<br>            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;<br>            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;<br>        &lt;/el-table&gt;<br>        <br>        &lt;!-- 分页器，用于切换页面和调整每页显示的数量 --&gt;<br>        &lt;el-pagination <br>            :total=&quot;total&quot;<br>            :page-size=&quot;queryDto.size&quot;<br>            :current-page=&quot;queryDto.page&quot;<br>            layout=&quot;prev,pager,next,sizes,-&gt;,total&quot;<br>            :page-sizes=&quot;[5,10,15,20]&quot;<br>            @current-change=&quot;currentChange&quot;<br>            @size-change=&quot;sizeChange&quot;<br>        &gt;&lt;/el-pagination&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;../utils/myaxios&#x27;<br>const options = &#123;<br>    // 组件挂载后立即执行查询<br>    mounted() &#123;<br>        this.query();<br>    &#125;,<br>    methods: &#123;<br>        // 搜索方法，执行查询<br>        search() &#123;<br>            this.query();<br>        &#125;,<br>        // 当前页改变时的处理方法<br>        currentChange(page) &#123;<br>            this.queryDto.page = page;<br>            this.query();<br>        &#125;,<br>        // 每页显示数量改变时的处理方法<br>        sizeChange(size) &#123;<br>            this.queryDto.size = size;<br>            this.query();<br>        &#125;,<br>        // 查询方法，从后端获取数据<br>        async query() &#123;<br>            const resp = await axios.get(&#x27;/api/students/q&#x27;, &#123;<br>                params: this.queryDto<br>            &#125;);<br>            this.students = resp.data.data.list;<br>            this.total = resp.data.data.total;<br>        &#125;<br>    &#125;,<br>    // 组件的初始数据<br>    data() &#123;<br>        return &#123;<br>            students: [], // 学生数据<br>            queryDto: &#123; // 查询参数<br>                name: &#x27;&#x27;,<br>                sex: &#x27;&#x27;,<br>                age: &#x27;&#x27;,<br>                page: 1,<br>                size: 5<br>            &#125;,<br>            total: 0 // 总数<br>        &#125;<br>    &#125;<br>&#125;<br>export default options;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>/* 设置输入框和选择框的宽度和边距 */<br>.el-input--mini,<br>.el-select--mini &#123;<br>    width: 193px;<br>    margin: 10px 10px 0 0;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ul><li>el-option中的value是传给后端的值，label是显示在前端页面的值，如果没有添加label属性则把value显示在前端页面</li><li>输入框和选择框都可以通过v-model实现数据的双向绑定</li></ul><p><img src="/./Vue2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20231112203941703.png"></p><p><img src="/./Vue2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20231112204017960.png"></p><p><img src="/./Vue2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20231112204043990.png"></p><br/><h4 id="1-4-级联选择器"><a href="#1-4-级联选择器" class="headerlink" title="1.4 级联选择器"></a>1.4 级联选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;!-- el-cascader 组件用于显示级联选择器 --&gt;<br>    &lt;el-cascader :options=&quot;ops&quot; clearable&gt;&lt;/el-cascader&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const options = &#123;<br>    data() &#123;<br>        return &#123;<br>            // ops 是级联选择器的选项数据<br>            ops:[<br>                // 第一级选项：菜品<br>                &#123;value:100 ,label:&#x27;菜品&#x27; ,children:[<br>                    // 第二级选项：湘菜<br>                    &#123;value:110, label:&#x27;湘菜&#x27;, children:[<br>                        // 第三级选项：剁椒鱼头<br>                        &#123;value:111, label:&#x27;剁椒鱼头&#x27;&#125;,<br>                        // 第三级选项：辣椒炒肉<br>                        &#123;value:112, label:&#x27;辣椒炒肉&#x27;&#125;<br>                    ]&#125;,<br>                    // 第二级选项：川菜<br>                    &#123;value:120, label:&#x27;川菜&#x27;, children:[<br>                        // 第三级选项：红烧兔头<br>                        &#123;value:121, label:&#x27;红烧兔头&#x27;&#125;,<br>                        // 第三级选项：宫保鸡丁<br>                        &#123;value:122, label:&#x27;宫保鸡丁&#x27;&#125;<br>                    ]&#125;,<br>                    // 第二级选项：粤菜<br>                    &#123;value:130, label:&#x27;粤菜&#x27;, children:[<br>                        // 第三级选项：白切鸡<br>                        &#123;value:131, label:&#x27;白切鸡&#x27;&#125;,<br>                        // 第三级选项：蜜汁叉烧<br>                        &#123;value:132, label:&#x27;蜜汁叉烧&#x27;&#125;<br>                    ]&#125;<br>                ]&#125;,<br>                // 第一级选项：饮品<br>                &#123;value:200 ,label:&#x27;饮品&#x27; ,children:[<br>                    // 第二级选项：饮料<br>                    &#123;value:210, label:&#x27;饮料&#x27;, children:[<br>                        // 第三级选项：王老吉<br>                        &#123;value:211, label:&#x27;王老吉&#x27;&#125;,<br>                        // 第三级选项：可乐<br>                        &#123;value:212, label:&#x27;可乐&#x27;&#125;,<br>                        // 第三级选项：雪碧<br>                        &#123;value:213, label:&#x27;雪碧&#x27;&#125;<br>                    ]&#125;,<br>                    // 第二级选项：啤酒<br>                    &#123;value:220, label:&#x27;啤酒&#x27;, children:[<br>                        // 第三级选项：雪花<br>                        &#123;value:221, label:&#x27;雪花&#x27;&#125;,<br>                        // 第三级选项：百威<br>                        &#123;value:222, label:&#x27;百威&#x27;&#125;<br>                    ]&#125;,<br>                    // 第二级选项：白酒<br>                    &#123;value:230, label:&#x27;白酒&#x27;, children:[<br>                        // 第三级选项：茅台<br>                        &#123;value:231, label:&#x27;茅台&#x27;&#125;,<br>                        // 第三级选项：江小白<br>                        &#123;value:232, label:&#x27;江小白&#x27;&#125;<br>                    ]&#125;<br>                ]&#125;,<br>            ]<br>        &#125;<br>    &#125;<br>&#125;;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/./Vue2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20231112212003863.png"></p><br/>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2023/11/01/JS/"/>
    <url>/2023/11/01/JS/</url>
    
    <content type="html"><![CDATA[<p>Javascript是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等</p><p>该笔记基于b站视频完成<a href="https://www.bilibili.com/video/BV1Tt4y1772f/?share_source=copy_web&vd_source=db8e7458ec195ac74979ce5478cbc624">Java开发所需的前端技术教学</a></p><h3 id="1-js入门案例"><a href="#1-js入门案例" class="headerlink" title="1. js入门案例"></a>1. js入门案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>js入门<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>1111<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;p1&quot;</span>);</span><br><span class="language-javascript">        a.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;3333333&quot;</span>;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="./JS/20231101150137.png" style="zoom: 50%;" /><p>document.getElementById()根据元素id获取元素对象</p><br/><p><strong>js文件的引用</strong></p><img src="./JS/20231101150530.png" style="zoom: 67%;" /><p>1.js文件的内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;p1&quot;</span>);<br>a.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;44444&quot;</span>;<br></code></pre></td></tr></table></figure><br/><hr><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><p><strong>let</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> 变量名 = 值;<br></code></pre></td></tr></table></figure><ul><li>let声明的变量可以多次赋值</li></ul><br/><p><strong>const</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> 变量名 = 值;<br></code></pre></td></tr></table></figure><ul><li>const修饰的为常量，只能赋值一次，不能再次赋值，但是值的内容可以改</li></ul><p><img src="/./JS/20231101153056.png"></p><br/><p><strong>var</strong></p><p>var声明的变量是可以多次赋值的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br>a = <span class="hljs-number">200</span>;<br></code></pre></td></tr></table></figure><br/><hr><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h3><h4 id="3-1-undefined和null"><a href="#3-1-undefined和null" class="headerlink" title="3.1 undefined和null"></a>3.1 undefined和null</h4><ul><li>执行表达式或函数，没有返回结果，出现undefined</li><li>访问数字不存在的元素，访问对象不存在的属性，出现undefined</li><li>定义变量没有初始化，出现undefined</li></ul><p>二者共同点</p><ul><li>都没有属性、方法</li><li>Nullish</li></ul><p>二者区别</p><ul><li>undefined由js产生</li><li>null由程序员提供</li></ul><img src="./JS/20231101154218.png" style="zoom:67%;" /><br/><h4 id="3-2-string"><a href="#3-2-string" class="headerlink" title="3.2 string"></a>3.2 string</h4><p>在JavaScript中可以用单引号、双引号、反引号定义字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">&#x27;spring&#x27;</span>;<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-string">&quot;spring&quot;</span>;<br><span class="hljs-keyword">let</span> s3 = <span class="hljs-string">`spring`</span>;<br></code></pre></td></tr></table></figure><br/>模板字符串（Template strings）<p>需求：拼接url的请求参数，如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/test?<span class="hljs-attribute">name</span>=zheng&amp;age=18<br>/test?<span class="hljs-attribute">name</span>=li&amp;age=20<br></code></pre></td></tr></table></figure><p>传统方法拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = ; <span class="hljs-comment">// zheng li ...</span><br><span class="hljs-keyword">let</span> age = ; <span class="hljs-comment">// 18 20 ...</span><br><span class="hljs-keyword">let</span> uri = <span class="hljs-string">&quot;/test?name=&quot;</span> + name + <span class="hljs-string">&quot;&amp;age=&quot;</span> + age;<br></code></pre></td></tr></table></figure><p>模板字符串方式，要用反引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = ; <span class="hljs-comment">// zheng li ...</span><br><span class="hljs-keyword">let</span> age = ; <span class="hljs-comment">// 18 20 ...</span><br><span class="hljs-keyword">let</span> uri = <span class="hljs-string">`/test?name=<span class="hljs-subst">$&#123;name&#125;</span>&amp;age=<span class="hljs-subst">$&#123;age&#125;</span>`</span>;<br></code></pre></td></tr></table></figure><img src="./JS/20231101160325.png" style="zoom:80%;" /><br/><h4 id="3-3-number和bigint"><a href="#3-3-number和bigint" class="headerlink" title="3.3 number和bigint"></a>3.3 number和bigint</h4><p>number 类型标识的是双精度浮动小数，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">10</span> / <span class="hljs-number">3</span>;   <span class="hljs-comment">// 结果 3.3333333333333335</span><br></code></pre></td></tr></table></figure><p>既然是浮点小数，那么可以除零</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">10</span> / <span class="hljs-number">0</span>;  <span class="hljs-comment">// 结果 Infinity 正无穷大</span><br>-<span class="hljs-number">10</span> / <span class="hljs-number">0</span>;  <span class="hljs-comment">// 结果 -Infinity 负无穷大</span><br></code></pre></td></tr></table></figure><p>浮点小数都有运算精度问题，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">2.0</span> - <span class="hljs-number">1.1</span>; <span class="hljs-comment">// 结果 0.8999999999999999</span><br></code></pre></td></tr></table></figure><p>字符串转数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;10&quot;</span>); <span class="hljs-comment">// 结果是数字 10 </span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;10.5&quot;</span>);<span class="hljs-comment">// 结果是数字 10, 去除了小数部分</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;10&quot;</span>) / <span class="hljs-number">3</span>; <span class="hljs-comment">// 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335</span><br><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">// 转换失败，结果是特殊值 NaN (Not a Number)</span><br></code></pre></td></tr></table></figure><p>要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">10n</span> / <span class="hljs-number">3n</span>;<span class="hljs-comment">// 结果 3n, 按整数除法处理</span><br></code></pre></td></tr></table></figure><br/><h4 id="3-4-boolean"><a href="#3-4-boolean" class="headerlink" title="3.4 boolean"></a>3.4 boolean</h4><ul><li>Truthy</li><li>Falsy</li></ul><p>在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】… 作为判断条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(b) &#123; <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;进入了&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231102124803.png" style="zoom:67%;" /><p>这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy</p><p>下面值都是 falsy</p><ul><li><code>false</code></li><li><code>Nullish (null, undefined)</code></li><li><code>0, 0n, NaN</code></li><li><code>&quot;&quot; &#39;&#39; ``</code>  即长度为零的字符串</li></ul><p>剩余的值绝大部分都是 truthy</p><p>有几个容易被当作 falsy 实际是 truthy 的</p><ul><li><code>&quot;false&quot;, &quot;0&quot;</code> 即字符串的 false 和 字符串的零</li><li><code>[]</code> 空数组</li><li><code>&#123;&#125;</code> 空对象</li></ul><br/><hr><h3 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h3><h4 id="4-1-定义函数"><a href="#4-1-定义函数" class="headerlink" title="4.1 定义函数"></a>4.1 定义函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> 函数名(参数) &#123;<br>    <span class="hljs-comment">// 函数体</span><br>    <span class="hljs-keyword">return</span> 结果;<br>&#125;<br></code></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">函数名(实参);<br></code></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);     <span class="hljs-comment">// 返回 3</span><br></code></pre></td></tr></table></figure><p>js 中的函数调用特点：对参数的<strong>类型</strong>和<strong>个数</strong>都没有限制，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);  <span class="hljs-comment">// 返回 ab</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);   <span class="hljs-comment">// 返回 9, 第三个参数没有被用到, 不会报错</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN</span><br></code></pre></td></tr></table></figure><p><img src="/./JS/20231102125835.png"></p><br/><h4 id="4-2-默认参数"><a href="#4-2-默认参数" class="headerlink" title="4.2 默认参数"></a>4.2 默认参数</h4><p>java 中（spring）要实现默认参数的效果得这么做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/page&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">page</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(defaultValue=&quot;1&quot;)</span> <span class="hljs-type">int</span> page, </span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(defaultValue=&quot;10&quot;)</span> <span class="hljs-type">int</span> size</span><br><span class="hljs-params">    )</span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">pagination</span>(<span class="hljs-params">page = <span class="hljs-number">1</span>, size = <span class="hljs-number">10</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(page, size);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 两个参数都默认</span><br><span class="hljs-title function_">pagination</span>();<br><span class="hljs-comment">// 第一个参数默认，第二个参数自己设置</span><br><span class="hljs-title function_">pagination</span>(<span class="hljs-literal">undefined</span>, <span class="hljs-number">100</span>);<br><span class="hljs-comment">// 第一个参数自己设置，第二个参数默认</span><br><span class="hljs-title function_">pagination</span>(<span class="hljs-number">100</span>);<br><span class="hljs-comment">// 两个参数的自己设置</span><br><span class="hljs-title function_">pagination</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><img src="./JS/20231102130659.png" style="zoom:80%;" /><br/><h4 id="4-3-匿名函数"><a href="#4-3-匿名函数" class="headerlink" title="4.3 匿名函数"></a>4.3 匿名函数</h4><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params">参数</span>) &#123;<br>    <span class="hljs-comment">// 函数体</span><br>    <span class="hljs-keyword">return</span> 结果;<br>&#125;)<br></code></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用场景——定义完毕立即调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;)(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><img src="./JS/20231102152417.png" style="zoom:67%;" /><p>使用场景——作为其它对象的方法</p><p>页面元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;p id = <span class="hljs-string">&quot;p1&quot;</span>&gt;点我啊&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>该元素有一个onclick方法，鼠标点击后会调用该方法，onclick方法初始化为null，需要赋值后才能使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;p1&quot;</span>).<span class="hljs-property">onclick</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标被单击了----&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><img src="./JS/20231102153423.png" style="zoom:67%;" /><br/><h4 id="4-4-箭头函数"><a href="#4-4-箭头函数" class="headerlink" title="4.4 箭头函数"></a>4.4 箭头函数</h4><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">(参数) =&gt; &#123;<br>    <span class="hljs-comment">// 函数体</span><br>    <span class="hljs-keyword">return</span> 结果;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果没有参数，()要保留&#96;&#96;</li><li>如果只有一个参数，()可以省略</li><li>如果函数体内只有一个一行代码，{}可以省略</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;p1&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;单击&quot;</span>);<br></code></pre></td></tr></table></figure><img src="./JS/20231102154038.png" style="zoom:67%;" /><br/><h4 id="4-5-函数是对象"><a href="#4-5-函数是对象" class="headerlink" title="4.5 函数是对象"></a>4.5 函数是对象</h4><p>以下形式在 js 中非常常见！</p><ol><li>可以参与赋值，例，具名函数也能参与赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">abc</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;函数是对象&quot;</span>);<br>&#125;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;p1&quot;</span>).<span class="hljs-property">onclick</span> = abc;<br></code></pre></td></tr></table></figure><ol start="2"><li>有属性、有方法，执行 <code>console.dir(abc)</code>，输出结果如下</li></ol><img src="./JS/20231102154731.png" style="zoom:67%;" /><ul><li><p>其中带有 f 标记的是方法，不带的是属性</p></li><li><p>带有 ➡ 符号的可以继续展开，限于篇幅省略了</p></li><li><p>带有 <code>[[ ]]</code> 的是内置属性，不能访问，只能查看</p></li><li><p>相对重要的是 <code>[[Prototype]]</code> 和 <code>[[Scopes]]</code></p></li></ul><ol start="3"><li>可以作为方法参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">fn</span>) &#123;          <span class="hljs-comment">// fn 将来可以是一个函数对象</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>)<br>    <span class="hljs-title function_">fn</span>();                 <span class="hljs-comment">// 调用函数对象</span><br>&#125;<br><br><span class="hljs-title function_">b</span>(a)<br></code></pre></td></tr></table></figure><img src="./JS/20231102205224.png" style="zoom:67%;" /><ol start="4"><li>可以作为方法返回值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">d</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;d&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br><br><span class="hljs-title function_">c</span>()()<br></code></pre></td></tr></table></figure><img src="./JS/20231102205343.png" style="zoom:67%;" /><br/><h4 id="4-6-函数的作用域"><a href="#4-6-函数的作用域" class="headerlink" title="4.6 函数的作用域"></a>4.6 函数的作用域</h4><p>看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> z = <span class="hljs-number">30</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 看这里</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y);<br>    &#125;<br>    <span class="hljs-title function_">b</span>();<br>&#125;<br><span class="hljs-title function_">a</span>();<br></code></pre></td></tr></table></figure><img src="./JS/20231102205917.png" style="zoom:67%;" /><img src="./JS/20231102205955.png" style="zoom:67%;" /><ul><li>以函数为分界线划定作用域，所有函数之外是全局作用域</li><li>查找变量时，由内向外查找<ul><li>在内层作用域找到变量，就会停止查找，不会再找外层</li><li>所有作用域都找不到变量，报错</li></ul></li><li>作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试</li></ul><br/><h4 id="4-7-闭包"><a href="#4-7-闭包" class="headerlink" title="4.7 闭包"></a>4.7 闭包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x,y);<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-title function_">a</span>()();  <span class="hljs-comment">// 在外面执行了 b</span><br></code></pre></td></tr></table></figure><img src="./JS/20231103144345.png" style="zoom:67%;" /><ul><li>函数定义时，它的作用域就已经确定好了，因此无论函数将来去哪里了，它都能从自己的作用域中找到当时的变量</li><li>闭包就是指<font color="red">函数能够访问自己作用域中的变量</font></li></ul><br/><h4 id="4-8-var与let的区别"><a href="#4-8-var与let的区别" class="headerlink" title="4.8 var与let的区别"></a>4.8 var与let的区别</h4><p>如果函数外层引用的是let变量，那么外层普通的{}也会作为域边界，最外层的let也占一个script作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x,y);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(b);<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103150435.png" style="zoom: 67%;" /><br/><p>如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x,y);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(b);<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103150522.png" style="zoom:67%;" /><br/><p>如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> e = <span class="hljs-number">10</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">var</span> e = <span class="hljs-number">20</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<span class="hljs-comment">// 打印 20</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<span class="hljs-comment">// 因为是同一个变量，还是打印 20</span><br></code></pre></td></tr></table></figure><img src="./JS/20231103150703.png" style="zoom:67%;" /><p>&lt;&gt;br&#x2F;&gt;</p><p>如果是 let，则视为两个作用域中的两个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> e = <span class="hljs-number">10</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">let</span> e = <span class="hljs-number">20</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<span class="hljs-comment">// 打印 20</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<span class="hljs-comment">// 打印 10</span><br></code></pre></td></tr></table></figure><img src="./JS/20231103150729.png" style="zoom:67%;" /><br/><p>要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> e = <span class="hljs-number">10</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> e = <span class="hljs-number">20</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>    &#125;<br>    <span class="hljs-title function_">b</span>();<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br></code></pre></td></tr></table></figure><br/><hr><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h3><h4 id="5-1-语法"><a href="#5-1-语法" class="headerlink" title="5.1 语法"></a>5.1 语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建数组</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// 获取数组元素</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">0</span>]);<br><br><span class="hljs-comment">// 修改数组元素</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 获取数组长度</span><br>arr.<span class="hljs-property">length</span>;<br><br><span class="hljs-comment">// 变量数据元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103151922.png" style="zoom:67%;" /><br/><h4 id="5-2-API"><a href="#5-2-API" class="headerlink" title="5.2 API"></a>5.2 API</h4><ul><li>push、shift、splice</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]; <br><br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);    <span class="hljs-comment">// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]</span><br>arr.<span class="hljs-title function_">shift</span>();<span class="hljs-comment">// 从数组头部(左侧)移除元素, 结果 [2,3,4]</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]</span><br></code></pre></td></tr></table></figure><img src="./JS/20231103152343.png" style="zoom:80%;" /><br/><ul><li>join</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>];<br><br>arr.<span class="hljs-title function_">join</span>(); <span class="hljs-comment">// 默认使用【,】作为连接符，结果 &#x27;a,b,c,d&#x27;</span><br>arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<span class="hljs-comment">// 结果 &#x27;abcd&#x27;</span><br>arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<span class="hljs-comment">// 结果 &#x27;a-b-c-d&#x27;</span><br></code></pre></td></tr></table></figure><img src="./JS/20231103152546.png" style="zoom: 80%;" /><br/><ul><li>map、filter、forEach</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">i</span>) &#123;   <span class="hljs-comment">// 代表的新旧元素之间的变换规则</span><br>    <span class="hljs-keyword">return</span> i * <span class="hljs-number">10</span><br>&#125;<br><br><span class="hljs-comment">// arr.map(a) // 具名函数，结果 [10,20,30,60]</span><br><br><span class="hljs-comment">// arr.map( (i) =&gt; &#123;return i * 10&#125; ); // 箭头函数</span><br>arr.<span class="hljs-title function_">map</span>( <span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> i * <span class="hljs-number">10</span> ); <span class="hljs-comment">// 箭头函数</span><br></code></pre></td></tr></table></figure><p><img src="/./JS/20231103152952.png"></p><br/><ul><li>传给 map 的函数，参数代表旧元素，返回值代表新元素</li></ul><p>map 的内部实现（伪代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">map</span>(<span class="hljs-params">a</span>) &#123; <span class="hljs-comment">// 参数是一个函数</span><br>    <span class="hljs-keyword">let</span> narr = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> o = arr[i]; <span class="hljs-comment">// 旧元素</span><br>        <span class="hljs-keyword">let</span> n = <span class="hljs-title function_">a</span>(o);   <span class="hljs-comment">// 新元素</span><br>        narr.<span class="hljs-title function_">push</span>(n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> narr;<br>&#125; <br></code></pre></td></tr></table></figure><p>filter 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>];<br>arr.<span class="hljs-title function_">filter</span>( <span class="hljs-function">(<span class="hljs-params">i</span>)=&gt;</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> ); <span class="hljs-comment">// 结果 [1,3]</span><br></code></pre></td></tr></table></figure><ul><li>传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素</li></ul><p>forEach 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>];<br><br><span class="hljs-comment">/*for(let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">    console.log(arr[i]);</span><br><span class="hljs-comment">&#125;*/</span><br><br>arr.<span class="hljs-title function_">forEach</span>( <span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) );<br></code></pre></td></tr></table></figure><p>两个称呼</p><ul><li>高阶函数，map，filter，forEach</li><li>回调函数，例如作为参数传入的函数</li></ul><br/><hr><h3 id="6-Object"><a href="#6-Object" class="headerlink" title="6. Object"></a>6. Object</h3><h4 id="6-1-语法"><a href="#6-1-语法" class="headerlink" title="6.1 语法"></a>6.1 语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    属性名: 值,<br>    方法名: 函数,<br>    get 属性名() &#123;&#125;,<br>    set 属性名(新值) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><br/><p>例1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>,<br>    <span class="hljs-attr">study</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;爱学习&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103153543.png" style="zoom: 80%;" /><br/><p>例2:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;小红&quot;</span>;<br><span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">let</span> study = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;小红爱学习&quot;</span>);<br>&#125;<br><span class="hljs-keyword">let</span> stu = &#123;name, age, study&#125;;<br></code></pre></td></tr></table></figure><img src="./JS/20231103153759.png" style="zoom:80%;" /><br/><p>例3：<font color="red">(重点)</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小刚&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;爱学习&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这种定义对象方法的方式只限于对象内部</li></ul><img src="./JS/20231103154051.png" style="zoom:80%;" /><br/><h4 id="6-2-get-和set-方法"><a href="#6-2-get-和set-方法" class="headerlink" title="6.2 get()和set()方法"></a>6.2 get()和set()方法</h4><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu = &#123;<br>    _name : <span class="hljs-literal">null</span>, <span class="hljs-comment">// 类似于java中的私有属性</span><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">name</span>() &#123; <span class="hljs-comment">// 定义get方法</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;进入了get&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span>;<br>    &#125;,<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">name</span>) &#123; <span class="hljs-comment">// 定义set方法</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;进入了set&quot;</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 赋值操作会调用set方法</span><br>stu.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;小白&quot;</span>;<br><br><span class="hljs-comment">// 调用操作会调用get方法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu.<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><img src="./JS/20231103155028.png" style="zoom: 80%;" /><ul><li>JavaScript中是没有私有属性这种概念的，在属性前加 ‘_’ 是一种习惯上的约定</li></ul><br/><h4 id="6-3-属性增删"><a href="#6-3-属性增删" class="headerlink" title="6.3 属性增删"></a>6.3 属性增删</h4><p>对比一下 Java 中的 Object</p><ul><li>Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的</li><li>JS 的对象，不需要什么模板，它的属性和方法可以随时加减</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>&#125;;<br>stu.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<span class="hljs-comment">// 添加属性</span><br><span class="hljs-keyword">delete</span> stu.<span class="hljs-property">age</span>;<span class="hljs-comment">// 删除属性</span><br><br>stu.<span class="hljs-property">study</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">// 添加方法</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;在学习&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103155830.png" style="zoom: 80%;" /><br/><p>添加 get，set，需要借助 Object.definePropery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu = &#123;<span class="hljs-attr">_name</span>:<span class="hljs-literal">null</span>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(stu, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span>;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">name</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>参数1：目标对象</li><li>参数2：属性名</li><li>参数3：get，set 的定义</li></ul><img src="./JS/20231103160031.png" style="zoom:80%;" /><br/><h4 id="6-4-this"><a href="#6-4-this" class="headerlink" title="6.4 this"></a>6.4 this</h4><p>先来对 Java 中的 this 有个理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMethod</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">(Student <span class="hljs-built_in">this</span>, String subject)</span> &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;在学习 &quot;</span> + subject);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br>        <br>        <span class="hljs-comment">// 下面的代码，本质上是执行 study(stu, &quot;java&quot;)，因此 this 就是 stu</span><br>        stu.study(<span class="hljs-string">&quot;java&quot;</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java 中的 this 是个隐式参数</li><li>Java 中，我们说 this 代表的就是调用方法的那个对象</li></ul><br/><p>js 中的 this 也是隐式参数，但它与函数运行时上下文相关</p><p>例如，一个“落单”的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">subject</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;在学习 &quot;</span> + subject)<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">study</span>(<span class="hljs-string">&quot;js&quot;</span>);  <span class="hljs-comment">// 输出 在学习 js</span><br></code></pre></td></tr></table></figure><p>这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串</p><img src="./JS/20231103164554.png" style="zoom:80%;" /><br/><p>同样的函数，如果作为对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;小白&quot;</span>,<br>    study<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况下，会将当前对象作为 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">stu.<span class="hljs-title function_">study</span>(<span class="hljs-string">&#x27;js&#x27;</span>); <span class="hljs-comment">// 输出 小白在学习 js</span><br></code></pre></td></tr></table></figure><img src="./JS/20231103164840.png" style="zoom: 80%;" /><br/><p>还可以动态改变 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;小黑&quot;</span>&#125;;<br>study.<span class="hljs-title function_">call</span>(stu, <span class="hljs-string">&quot;js&quot;</span>);<span class="hljs-comment">// 输出 小黑在学习 js</span><br></code></pre></td></tr></table></figure><p>这回 study 执行时，就把 call 的第一个参数 stu 作为 this</p><img src="./JS/20231103165105.png" style="zoom:80%;" /><br/><p>一个例外是，在<strong>箭头函数</strong>内出现的 this，以外层 this 理解 </p><p>用匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小花&quot;</span>,<br>    <span class="hljs-attr">friends</span>: [<span class="hljs-string">&quot;小白&quot;</span>,<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-string">&quot;小明&quot;</span>],<br>    <span class="hljs-title function_">play</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">friends</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;与&quot;</span> + e + <span class="hljs-string">&quot;在玩耍&quot;</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br>stu.<span class="hljs-title function_">play</span>()<br></code></pre></td></tr></table></figure><ul><li>this.name 所在的函数是【落单】的函数，因此 this 代表 window</li></ul><p>输出结果为<br><img src="./JS/20231103172439.png" style="zoom:67%;" /></p><br/><p>用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小花&quot;</span>,<br>    <span class="hljs-attr">friends</span>: [<span class="hljs-string">&quot;小白&quot;</span>,<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-string">&quot;小明&quot;</span>],<br>    <span class="hljs-title function_">play</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">friends</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;与&quot;</span> + e + <span class="hljs-string">&quot;在玩耍&quot;</span>);<br>        &#125;)<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象</li></ul><p>输出结果为<br><img src="./JS/20231103172557.png" style="zoom: 67%;" /></p><br/><p>不用箭头函数的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小花&quot;</span>,<br>    <span class="hljs-attr">friends</span>: [<span class="hljs-string">&quot;小白&quot;</span>,<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-string">&quot;小明&quot;</span>],<br>    <span class="hljs-title function_">play</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> me = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">friends</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(me.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;与&quot;</span> + e + <span class="hljs-string">&quot;在玩耍&quot;</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103172659.png" style="zoom:67%;" /><br/><h4 id="6-5-原型进程"><a href="#6-5-原型进程" class="headerlink" title="6.5 原型进程"></a>6.5 原型进程</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> father = &#123;<br>    <span class="hljs-attr">f1</span>: <span class="hljs-string">&#x27;父属性&#x27;</span>,<br>    <span class="hljs-attr">m1</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;父方法&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(father);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">f1</span>);  <span class="hljs-comment">// 打印 父属性</span><br>son.<span class="hljs-title function_">m1</span>();  <span class="hljs-comment">// 打印 父方法</span><br></code></pre></td></tr></table></figure><img src="./JS/20231103200011.png" style="zoom:80%;" /><ul><li>father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找</li><li>son 自己可以添加自己的属性和方法</li><li>son 里有特殊属性 <code>__proto__</code> 代表它的父对象，js 术语： son 的原型对象</li><li>不同浏览器对打印 son 的 <code>__proto__</code> 属性时显示不同<ul><li>Edge 打印 console.dir(son) 显示 <code>[[Prototype]]</code></li><li>Firefox 打印 console.dir(son) 显示 <code>&lt;prototype&gt;</code></li></ul></li></ul><br/><p><strong>基于函数的原型继承</strong></p><p>出于方便的原因，js 又提供了一种基于函数的原型继承</p><blockquote><p><strong>函数职责</strong></p><ol><li><p>负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法</p></li><li><p>函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象</p><p><strong>注意！</strong>名字有差异，这个属性的作用就是为新对象提供原型</p></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">cons</span>(<span class="hljs-params">f2</span>) &#123;<br>    <span class="hljs-comment">// 创建子对象(this), 给子对象提供属性和方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">f2</span> = f2;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">m2</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子方法&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// cons.prototype 就是父对象</span><br>cons.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">f1</span> = <span class="hljs-string">&quot;父属性&quot;</span>;<br>cons.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">m1</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;父方法&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>配合 new 关键字，创建子对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title function_">cons</span>(<span class="hljs-string">&quot;子属性&quot;</span>)<br></code></pre></td></tr></table></figure><p>子对象的 <code>__proto__</code> 就是函数的 <code>prototype</code> 属性</p><img src="./JS/20231103200447.png" style="zoom:80%;" /><br/><hr><h3 id="7-JSON"><a href="#7-JSON" class="headerlink" title="7. JSON"></a>7. JSON</h3><p>一个 json 对象可以长这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>一个 js 对象长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure><p>JSON和JS的区别</p><ol><li>本质不同<ul><li>json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货</li><li>js 对象是切切实实的对象，可以有属性方法</li></ul></li><li>语法细节不同<ul><li>json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组</li><li>json 中不能有除以上的其它 js 对象的特性，如方法等</li><li>json 中的属性必须用双引号引起来</li></ul></li></ol><p>json 字符串与 js 对象的转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(json字符串);  <span class="hljs-comment">// 返回js对象</span><br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(js对象);  <span class="hljs-comment">// 返回json字符串</span><br></code></pre></td></tr></table></figure><br/><hr><h3 id="8-运算符与表达式"><a href="#8-运算符与表达式" class="headerlink" title="8. 运算符与表达式"></a>8. 运算符与表达式</h3><ul><li><code>+ - * / % ** </code></li><li><code>+= -= *= /= %= **=</code></li><li><code>++ --</code></li><li>位运算、移位运算</li><li><code>== != &gt; &gt;= &lt; &lt;=</code></li><li><code>=== !==</code> </li><li><code>&amp;&amp; || !</code> </li><li><code>?? ?.</code> </li><li><code>...</code> </li><li>解构赋值</li></ul><br/><h4 id="8-1"><a href="#8-1" class="headerlink" title="8.1  &#x3D;&#x3D;&#x3D;"></a>8.1  &#x3D;&#x3D;&#x3D;</h4><p>严格相等运算符，用作逻辑判等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span> == <span class="hljs-number">1</span>    <span class="hljs-comment">// 返回 true </span><br><span class="hljs-number">1</span> == <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-comment">// 返回 true，会先将右侧的字符串转为数字，再做比较</span><br><span class="hljs-number">1</span> === <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-comment">// 返回 false，类型不等，直接返回 false</span><br></code></pre></td></tr></table></figure><p>typeof 查看某个值的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span><span class="hljs-comment">// 返回 &#x27;number&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-comment">// 返回 &#x27;string&#x27;</span><br></code></pre></td></tr></table></figure><img src="./JS/20231103204917.png" style="zoom:80%;" /><br/><h4 id="8-2"><a href="#8-2" class="headerlink" title="8.2 ||"></a>8.2 ||</h4><p>需求：如果参数 n 没有传递，给它一个【男】</p><p><strong>推荐</strong>做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">n = <span class="hljs-string">&#x27;男&#x27;</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><p>一些老旧代码中可能的做法（不推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">n</span>) &#123;<br>    n = n || <span class="hljs-string">&#x27;男&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><p>它的语法是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">值<span class="hljs-number">1</span> || 值<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2</p><img src="./JS/20231103205241.png" style="zoom:80%;" /><br/><h4 id="8-3-与"><a href="#8-3-与" class="headerlink" title="8.3 ??与?."></a>8.3 ??与?.</h4><p><strong>??</strong> </p><p>需求：如果参数n没有传递<font color="red">或者是nul</font>l，给他一个[男]</p><p>传统办法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">if</span>(n === <span class="hljs-literal">undefined</span> || n === <span class="hljs-literal">null</span>) &#123;<br>        n = <span class="hljs-string">&#x27;男&#x27;</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用??</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">n</span>) &#123;<br>n = n ?? <span class="hljs-string">&#x27;男&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103205850.png" style="zoom:80%;" /><br/><p><strong>?.</strong></p><p>需求：函数参数是一个对象，可能包含子属性</p><p>例如，参数可能是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu1 = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">address</span>: &#123;<br>        <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;北京&#x27;</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">let</span> stu2 = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> stu3 = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>,<br>    <span class="hljs-attr">address</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在要访问子属性（有问题）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">stu</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu.<span class="hljs-property">address</span>.<span class="hljs-property">city</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">stu</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu.<span class="hljs-property">address</span>?.<span class="hljs-property">city</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>用传统办法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">stu</span>) &#123;<br>    <span class="hljs-keyword">if</span>(stu.<span class="hljs-property">address</span> === <span class="hljs-literal">undefined</span> || stu.<span class="hljs-property">address</span> === <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">undefined</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu.<span class="hljs-property">address</span>.<span class="hljs-property">city</span>)<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103210444.png" style="zoom:80%;" /><br/><h4 id="8-4-…"><a href="#8-4-…" class="headerlink" title="8.4 …"></a>8.4 …</h4><p>展开运算符</p><p>作用1：打散数组，把元素传递给多个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a,b,c</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);<br>&#125;<br></code></pre></td></tr></table></figure><p>需求，把数组元素依次传递给函数参数</p><p>传统写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">test</span>(arr[<span class="hljs-number">0</span>],arr[<span class="hljs-number">1</span>],arr[<span class="hljs-number">2</span>]);<span class="hljs-comment">// 输出 1,2,3</span><br></code></pre></td></tr></table></figure><p>展开运算符写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">test</span>(...arr);<span class="hljs-comment">// 输出 1,2,3</span><br></code></pre></td></tr></table></figure><ul><li>打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素</li></ul><img src="./JS/20231103210859.png" style="zoom:80%;" /><br/><p>作用2：复制数组或对象</p><p>数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> arr2 = [...arr1];<span class="hljs-comment">// 复制数组</span><br></code></pre></td></tr></table></figure><p>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj1 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;;<br><br><span class="hljs-keyword">let</span> obj2 = &#123;...obj1&#125;;<span class="hljs-comment">// 复制对象</span><br></code></pre></td></tr></table></figure><img src="./JS/20231103215340.png" style="zoom:67%;" /><p><strong>注意</strong>：展开运算符复制属于浅拷贝，更深一层的数据采用了引用的形式，例如这里的city就是引用了原来的地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> o1 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attr">address</span>: &#123;<span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;北京&#x27;</span>&#125; &#125;<br><br><span class="hljs-keyword">let</span> o2 = &#123;...o1&#125;;<br></code></pre></td></tr></table></figure><img src="./JS/20231103215511.png" style="zoom:80%;" /><br/><p>作用3：合并数组或对象</p><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];<br><span class="hljs-keyword">let</span> a2 = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><br><span class="hljs-keyword">let</span> b1 = [...a1,...a2];<span class="hljs-comment">// 结果 [1,2,3,4]</span><br><span class="hljs-keyword">let</span> b2 = [...a2,<span class="hljs-number">5</span>,...a1]<span class="hljs-comment">// 结果 [3,4,5,1,2]</span><br></code></pre></td></tr></table></figure><img src="./JS/20231103215720.png" style="zoom:80%;" /><p>合并对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> o1 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>&#125;;<br><span class="hljs-keyword">let</span> o2 = &#123;<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;;<br><span class="hljs-keyword">let</span> o3 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>&#125;;<br><br><span class="hljs-keyword">let</span> n1 = &#123;...o1, ...o2&#125;;<span class="hljs-comment">// 结果 &#123;name:&#x27;张三&#x27;,age:18&#125;</span><br><br><span class="hljs-keyword">let</span> n2 = &#123;...o1, ...o2, ...o3&#125;; <span class="hljs-comment">// 结果&#123;name:&#x27;李四&#x27;,age:18&#125;</span><br></code></pre></td></tr></table></figure><ul><li>复制对象时出现同名属性，后面的会覆盖前面的</li></ul><img src="./JS/20231103220144.png" style="zoom:80%;" /><br/><h4 id="8-5"><a href="#8-5" class="headerlink" title="8.5 []{}"></a>8.5 []{}</h4><p>解构赋值</p><p><strong>[]</strong></p><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><br><span class="hljs-keyword">let</span> [a, b, c] = arr;<span class="hljs-comment">// 结果 a=1, b=2, c=3</span><br></code></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">[a,b,c]</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c) <span class="hljs-comment">// 结果 a=1, b=2, c=3</span><br>&#125;<br><br><span class="hljs-title function_">test</span>(arr);<br></code></pre></td></tr></table></figure><br/><p><strong>{}</strong></p><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;;<br><br><span class="hljs-keyword">let</span> &#123;name,age&#125; = obj;<span class="hljs-comment">// 结果 name=张三, age=18</span><br></code></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">&#123;name, age&#125;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, age); <span class="hljs-comment">// 结果 name=张三, age=18</span><br>&#125;<br><br><span class="hljs-title function_">test</span>(obj)<br></code></pre></td></tr></table></figure><br/><hr><h3 id="9-控制语句"><a href="#9-控制语句" class="headerlink" title="9. 控制语句"></a>9. 控制语句</h3><ul><li><code>if ... else</code></li><li><code>switch</code></li><li><code>while</code></li><li><code>do ... while</code></li><li><code>for</code> </li><li><code>for ... in</code> </li><li><code>for ... of</code> </li><li><code>try ... catch</code></li></ul><br/><h4 id="9-1-for-in"><a href="#9-1-for-in" class="headerlink" title="9.1 for in"></a>9.1 for in</h4><p>主要用来遍历对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> father = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>, <span class="hljs-attr">study</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> n <span class="hljs-keyword">in</span> father) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>其中 const n 代表遍历出来的属性名</p></li><li><p>注意1：方法名也能被遍历出来（它其实也算一种特殊属性）</p><img src="./JS/20231103221046.png" style="zoom: 80%;" /></li><li><p>注意2：遍历子对象时，父对象的属性会跟着遍历出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> son = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(father);<br>son.<span class="hljs-property">sex</span> = <span class="hljs-string">&quot;男&quot;</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> n <span class="hljs-keyword">in</span> son) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103221337.png" style="zoom:80%;" /></li><li><p>注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> n <span class="hljs-keyword">in</span> son) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n, son[n]);<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103221558.png" style="zoom:80%;" /><br/><h4 id="9-2-for-of"><a href="#9-2-for-of" class="headerlink" title="9.2 for of"></a>9.2 for of</h4><p>主要用来遍历数组，也可以是Map、Set等可迭代对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> i <span class="hljs-keyword">of</span> a1) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br><br><span class="hljs-keyword">let</span> a2 = [<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">22</span>&#125;<br>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> obj <span class="hljs-keyword">of</span> a2) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>, obj.<span class="hljs-property">age</span>);<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> &#123;name,age&#125; <span class="hljs-keyword">of</span> a2) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, age);<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103221953.png" style="zoom:80%;" /><br/><h4 id="9-3-try-catch"><a href="#9-3-try-catch" class="headerlink" title="9.3 try catch"></a>9.3 try catch</h4><p>对有可能出现异常的代码进行try catch处理，finally中放的代码一定会被执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> stu1 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>, <span class="hljs-attr">address</span>: &#123;<span class="hljs-attr">city</span>:<span class="hljs-string">&#x27;北京&#x27;</span>&#125;&#125;;<br><span class="hljs-keyword">let</span> stu2 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">stu</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu.<span class="hljs-property">address</span>.<span class="hljs-property">city</span>)   <br>    &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;出现了异常&#x27;</span>, e.<span class="hljs-property">message</span>)<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;finally&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="./JS/20231103222212.png" style="zoom:80%;" /><br/><hr><h3 id="10-node的安装"><a href="#10-node的安装" class="headerlink" title="10.node的安装"></a>10.node的安装</h3><p><strong>安装 nvm</strong></p><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p><p>安装注意事项</p><ol><li>要卸载掉现有的 nodejs</li><li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li><li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li><li>首次运行前设置好国内镜像地址</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">nvm node_mirror http:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>node/<br>nvm npm_mirror https:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>npm/<br></code></pre></td></tr></table></figure><p>首先查看有哪些可用版本</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">nvm list available<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">   CURRENT    </span>|<span class="hljs-string">     LTS      </span>|<span class="hljs-string">  OLD STABLE  </span>|<span class="hljs-string"> OLD UNSTABLE </span>|<br>|<span class="hljs-string">--------------</span>|<span class="hljs-string">--------------</span>|<span class="hljs-string">--------------</span>|<span class="hljs-string">--------------</span>|<br>|<span class="hljs-string">    21.1.0    </span>|<span class="hljs-string">    20.9.0    </span>|<span class="hljs-string">   0.12.18    </span>|<span class="hljs-string">   0.11.16    </span>|<br>|<span class="hljs-string">    21.0.0    </span>|<span class="hljs-string">   18.18.2    </span>|<span class="hljs-string">   0.12.17    </span>|<span class="hljs-string">   0.11.15    </span>|<br>|<span class="hljs-string">    20.8.1    </span>|<span class="hljs-string">   18.18.1    </span>|<span class="hljs-string">   0.12.16    </span>|<span class="hljs-string">   0.11.14    </span>|<br>|<span class="hljs-string">    20.8.0    </span>|<span class="hljs-string">   18.18.0    </span>|<span class="hljs-string">   0.12.15    </span>|<span class="hljs-string">   0.11.13    </span>|<br>|<span class="hljs-string">    20.7.0    </span>|<span class="hljs-string">   18.17.1    </span>|<span class="hljs-string">   0.12.14    </span>|<span class="hljs-string">   0.11.12    </span>|<br>|<span class="hljs-string">    20.6.1    </span>|<span class="hljs-string">   18.17.0    </span>|<span class="hljs-string">   0.12.13    </span>|<span class="hljs-string">   0.11.11    </span>|<br>|<span class="hljs-string">    20.6.0    </span>|<span class="hljs-string">   18.16.1    </span>|<span class="hljs-string">   0.12.12    </span>|<span class="hljs-string">   0.11.10    </span>|<br>|<span class="hljs-string">    20.5.1    </span>|<span class="hljs-string">   18.16.0    </span>|<span class="hljs-string">   0.12.11    </span>|<span class="hljs-string">    0.11.9    </span>|<br>|<span class="hljs-string">    20.5.0    </span>|<span class="hljs-string">   18.15.0    </span>|<span class="hljs-string">   0.12.10    </span>|<span class="hljs-string">    0.11.8    </span>|<br>|<span class="hljs-string">    20.4.0    </span>|<span class="hljs-string">   18.14.2    </span>|<span class="hljs-string">    0.12.9    </span>|<span class="hljs-string">    0.11.7    </span>|<br>|<span class="hljs-string">    20.3.1    </span>|<span class="hljs-string">   18.14.1    </span>|<span class="hljs-string">    0.12.8    </span>|<span class="hljs-string">    0.11.6    </span>|<br>|<span class="hljs-string">    20.3.0    </span>|<span class="hljs-string">   18.14.0    </span>|<span class="hljs-string">    0.12.7    </span>|<span class="hljs-string">    0.11.5    </span>|<br>|<span class="hljs-string">    20.2.0    </span>|<span class="hljs-string">   18.13.0    </span>|<span class="hljs-string">    0.12.6    </span>|<span class="hljs-string">    0.11.4    </span>|<br>|<span class="hljs-string">    20.1.0    </span>|<span class="hljs-string">   18.12.1    </span>|<span class="hljs-string">    0.12.5    </span>|<span class="hljs-string">    0.11.3    </span>|<br>|<span class="hljs-string">    20.0.0    </span>|<span class="hljs-string">   18.12.0    </span>|<span class="hljs-string">    0.12.4    </span>|<span class="hljs-string">    0.11.2    </span>|<br>|<span class="hljs-string">    19.9.0    </span>|<span class="hljs-string">   16.20.2    </span>|<span class="hljs-string">    0.12.3    </span>|<span class="hljs-string">    0.11.1    </span>|<br>|<span class="hljs-string">    19.8.1    </span>|<span class="hljs-string">   16.20.1    </span>|<span class="hljs-string">    0.12.2    </span>|<span class="hljs-string">    0.11.0    </span>|<br>|<span class="hljs-string">    19.8.0    </span>|<span class="hljs-string">   16.20.0    </span>|<span class="hljs-string">    0.12.1    </span>|<span class="hljs-string">    0.9.12    </span>|<br>|<span class="hljs-string">    19.7.0    </span>|<span class="hljs-string">   16.19.1    </span>|<span class="hljs-string">    0.12.0    </span>|<span class="hljs-string">    0.9.11    </span>|<br>|<span class="hljs-string">    19.6.1    </span>|<span class="hljs-string">   16.19.0    </span>|<span class="hljs-string">   0.10.48    </span>|<span class="hljs-string">    0.9.10    </span>|<br></code></pre></td></tr></table></figure><p>建议安装 LTS（长期支持版）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> install <span class="hljs-number">18</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>执行 nvm list 会列出已安装版本</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nvm list</span><br></code></pre></td></tr></table></figure><p>切换到 16.16.0</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> use <span class="hljs-number">18</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量</p><br/><p><strong>检查 npm</strong></p><p>npm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p><p>检查镜像</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">get</span> registry<br></code></pre></td></tr></table></figure><p>如果返回的不是 <code>https://registry.npm.taobao.org/</code>，需要做如下设置</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org/</span><br></code></pre></td></tr></table></figure><br/><p><strong>搭建前端服务器</strong></p><p>新建一个保存项目的 client 文件夹，进入文件夹执行</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install <span class="hljs-built_in">express</span> --<span class="hljs-built_in">save</span>-dev<br></code></pre></td></tr></table></figure><p>执行上面指令后会生成下面三个文件<br><img src="./JS/20231104142223.png" style="zoom:67%;" /></p><p>修改 package.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;module&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;express&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.18.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>其中 devDependencies 是 npm install –save-dev 添加的</li></ul><p>编写 main.js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;./&#x27;</span>))<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">7070</span>)<br></code></pre></td></tr></table></figure><p>执行 js 代码（运行前端服务器）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">main</span>.js<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stream流</title>
    <link href="/2023/10/24/Stream%E6%B5%81/"/>
    <url>/2023/10/24/Stream%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p>该笔记基于b站视频完成<a href="https://www.bilibili.com/video/BV1te411w722?vd_source=db8e7458ec195ac74979ce5478cbc624">Java-Stream流从入门到精通</a></p><p><strong>什么是Stream流</strong></p><p>Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据<br>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象<br>Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码<br>这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等<br>元素流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果<br></p><br/><p><strong>Stream流的作用</strong>：结合了Lambda表达式，简化了集合、数组的操作</p><p><strong>Stream流的使用步骤</strong></p><ol><li>先得到一条Stream流，并把数据放上去</li><li>利用Stream流中的API进行各种操作<ul><li>中间方法：过滤、转换方法调用完毕之后、还可以调用其他方法</li><li>终结方法：统计、打印    最后一步，调用完毕之后，不能再调用其他方法</li></ul></li></ol><br/><p><strong>把数据放到Stream流上去</strong></p><table><thead><tr><th align="center">获取方式</th><th align="center">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">单例集合</td><td align="center">default Stream<E> stream()</td><td align="left">Collection中的默认方法</td></tr><tr><td align="center">双列集合</td><td align="center">无</td><td align="left">无法直接使用Stream流</td></tr><tr><td align="center">数组</td><td align="center">public static<T> Stream<T> stream (T… values)</td><td align="left">Arrays工具类中的静态方法</td></tr><tr><td align="center">一堆零散的数据</td><td align="center">public static<T> Stream<T> of (T… values)</td><td align="left">Stream接口中你的静态方法</td></tr></tbody></table><br/><p>单例集合获取Stream流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用Stream流遍历集合中的元素</span><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br><br>list.stream().forEach(s -&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><br/><p>双列集合获取Stream流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建双列集合</span><br>HashMap&lt;String, Integer&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">// 添加数据</span><br>hm.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br>hm.put(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>);<br>hm.put(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">3</span>);<br>hm.put(<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">// 第一中获取Stream流方法</span><br>hm.keySet().stream().forEach(s -&gt; System.out.println(s));<br>hm.values().stream().forEach(x -&gt; System.out.println(x));<br><br><span class="hljs-comment">// 第二种</span><br>hm.entrySet().stream().forEach(y -&gt; System.out.println(y));<br></code></pre></td></tr></table></figure><br/><p>数组获取Stream流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>Arrays.stream(arr).forEach(s -&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><br/><p>一堆零散数据获取Stream流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 前提是这些数据的数据类型相同</span><br>Stream(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)..forEach(s -&gt; System.out.println(s));<br>Stream(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>)..forEach(s -&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><br/><p><strong>Stream流的中间方法</strong></p><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Stream<T>  <font color = "red">filter</font>(Predicate&lt;? super T&gt; predicate)</td><td align="left">过滤</td></tr><tr><td align="left">Stream<T>  <font color = "red">limit</font>(long maxSize)</td><td align="left">获取前面几个元素</td></tr><tr><td align="left">Stream<T>  <font color = "red">skip</font>(long n)</td><td align="left">跳过前面几个元素</td></tr><tr><td align="left">Stream<T>  <font color = "red">distinct</font>()</td><td align="left">元素去重，依赖于hashCode和equals方法</td></tr><tr><td align="left">static <T> Stream<T> <font color = "red">concat</font>(Stream a, Stream b)</td><td align="left">合并a和b两个流为一个流</td></tr><tr><td align="left">Stream<R>  <font color = "red">map</font>(Function&lt;T, R&gt; mapper)</td><td align="left">转换流中的数据类型</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>中间方法，返回新的Stream流，原来的Stream流只能使用一次，建议使用链式编程</li><li>修改Stream流中的数据，不会影响原来集合或者数据中的数据</li></ul><br/><p>filter、limit、skip</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;周芷若&quot;</span>, <span class="hljs-string">&quot;赵敏&quot;</span>, <span class="hljs-string">&quot;张强&quot;</span>, <span class="hljs-string">&quot;张三丰&quot;</span>, <span class="hljs-string">&quot;张翠山&quot;</span>, <span class="hljs-string">&quot;张良&quot;</span>, <span class="hljs-string">&quot;王二麻子&quot;</span>, <span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br><span class="hljs-comment">// filter 过滤  把张开头的留下，其余的数据过滤</span><br>list.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).forEach(s -&gt; System.out.println(s));<br><br><span class="hljs-comment">// limit: 获取前面几个元素skip: 跳过前面几个元素</span><br><span class="hljs-comment">// 获取&quot;张强&quot;, &quot;张三丰&quot;, &quot;张翠山&quot;</span><br><span class="hljs-comment">// 实现方法一：先获取前面6个元素，再跳过前面3个元素</span><br>list.stream().limit(<span class="hljs-number">6</span>).skip(<span class="hljs-number">3</span>).forEach(s -&gt; System.out.println(s));<br><span class="hljs-comment">// 实现方法二：先跳过前面3个，在获取前面3个</span><br>list.stream().skip(<span class="hljs-number">3</span>).limit(<span class="hljs-number">3</span>).forEach(s -&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><br/><p>distinct、concat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// distinct : 元素去重concat : 合并两个流</span><br>ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list1, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>);<br><br><span class="hljs-comment">// 去重输出</span><br>list1.stream().distinct().forEach(s -&gt; System.out.println(s));<br><br><span class="hljs-comment">// 合并两个流</span><br>ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list1, <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>);<br>Stream.concat(list1.stream(), list2.stream());<br></code></pre></td></tr></table></figure><br/><p>map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// map 转换流中的数据类型</span><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;张无忌-15&quot;</span>, <span class="hljs-string">&quot;周芷若-18&quot;</span>, <span class="hljs-string">&quot;赵敏-17&quot;</span>, <span class="hljs-string">&quot;张强-31&quot;</span>, <span class="hljs-string">&quot;张三丰-23&quot;</span>, <span class="hljs-string">&quot;张翠山-15&quot;</span>, <span class="hljs-string">&quot;张良-20&quot;</span>, <span class="hljs-string">&quot;王二麻子-25&quot;</span>, <span class="hljs-string">&quot;谢广坤-40&quot;</span>);<br><span class="hljs-comment">// 需求：只获取里面的年龄并进行打印</span><br>list.stream()<br>    .map(s -&gt; Integer.parseInt(s.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">1</span>]))<br>    .forEach(s -&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><br/><p><strong>Stream流的终结方法</strong></p><table><thead><tr><th align="center">名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void forEach(Consumer action)</td><td align="center">遍历</td></tr><tr><td align="center">long count()</td><td align="center">统计</td></tr><tr><td align="center">toArray()</td><td align="center">收集流中的数据，放到数组中</td></tr><tr><td align="center">collect(Collector collector)</td><td align="center">收集流中的数据，放到集合中</td></tr></tbody></table><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;周芷若&quot;</span>, <span class="hljs-string">&quot;赵敏&quot;</span>, <span class="hljs-string">&quot;张强&quot;</span>, <span class="hljs-string">&quot;张三丰&quot;</span>, <span class="hljs-string">&quot;张翠山&quot;</span>, <span class="hljs-string">&quot;张良&quot;</span>, <span class="hljs-string">&quot;王二麻子&quot;</span>, <span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br><span class="hljs-comment">// 使用forEach遍历集合</span><br>list.stream().forEach(a -&gt; System.out.println(s));<br><br><span class="hljs-comment">// 使用count统计个数</span><br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> list.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).count();<br>System.out.println(count);<br><br><span class="hljs-comment">// 收集流流中的数据，放到数组中 toArray</span><br>Object[] arr1 = list.stream().toArray();<br><span class="hljs-comment">// 指定数组数据类型</span><br>String[] arr2 = list.stream().toArray(value -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[value]);<br></code></pre></td></tr></table></figure><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;张无忌-男-15&quot;</span>, <span class="hljs-string">&quot;周芷若-女-18&quot;</span>, <span class="hljs-string">&quot;赵敏-女--17&quot;</span>, <span class="hljs-string">&quot;张强-男-31&quot;</span>, <span class="hljs-string">&quot;张三丰-男-23&quot;</span>, <span class="hljs-string">&quot;张翠山-女-15&quot;</span>, <span class="hljs-string">&quot;张良-男-20&quot;</span>, <span class="hljs-string">&quot;王二麻子-男-25&quot;</span>, <span class="hljs-string">&quot;谢广坤-男-40&quot;</span>);<br><br><span class="hljs-comment">// 把所有的男性收集起来,收集到List集合中</span><br>List&lt;String&gt; newList = list.stream()<br>    .filter(s -&gt; <span class="hljs-string">&quot;男&quot;</span>.equals(s.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">1</span>]))<br>    .collect(Collectors.toList());<br><br><span class="hljs-comment">// 把所有的男性收集起来,收集到Set集合中</span><br>List&lt;String&gt; newSet = list.stream()<br>    .filter(s -&gt; <span class="hljs-string">&quot;男&quot;</span>.equals(s.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">1</span>]))<br>    .collect(Collectors.toSet());<br><br><span class="hljs-comment">// 区别：Set集合会去重</span><br><br><span class="hljs-comment">// 把所有的男性收集起来,收集到Map集合中,键：姓名，值：年龄</span><br>Map&lt;String, Integer&gt; newMap = list.stream()<br>    .filter(s -&gt; <span class="hljs-string">&quot;男&quot;</span>.equals(s.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">1</span>]))<br>    .collect(Collectors.toMap(<br>    s -&gt; s.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">0</span>],<br>        s -&gt; Integer.parseInt(s.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">3</span>])<br>));<br><span class="hljs-comment">// toMap()中，第一个参数是键，第二个参数是值</span><br><br></code></pre></td></tr></table></figure><br/><p><strong>总结</strong></p><ol><li><p>Stream流的作用</p><p>结合了Lambda表达式，简化集合、数组的操作</p></li><li><p>Stream流的使用步骤</p><ul><li>获取Stream流对象</li><li>使用中间方法处理数据</li><li>使用终结方法处理数据</li></ul></li><li><p>如何获取Stream流对象</p><ul><li>单列集合：Collection中的默认方法Stream</li><li>双列集合：不能直接获取，要转为单列集合</li><li>数组：Arrays工具类中的静态方法Stream</li><li>零散的数据：Stream接口中的静态方法of</li></ul></li><li><p>常见方法</p><ul><li>中间方法：filter、limit、skip、distinct、concat、map</li><li>终结方法：forEach、count、collect</li></ul></li></ol><br/><p><strong>练习题</strong></p><p>定义一个集合，并添加一些整数1,2,3,4,5,6,7,8,9,10<br>过滤奇数，只留下偶数<br>并将结果存下来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);<br>List&lt;Integer&gt; collect = list.stream()<br>        .filter(s -&gt; s % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>        .collect(Collectors.toList());<br>System.out.println(collect);<br></code></pre></td></tr></table></figure><br/><p>创建一个ArrayList集合，并添加一下字符串，字符串中前面是姓名，后面是年龄<br>“张三，23”<br>“李四，24”<br>“王五，25”<br>保留年龄大于等于24岁的人，并将结果收集到Map集合中，姓名为键，年龄为值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list,<span class="hljs-string">&quot;张三，23&quot;</span>,<span class="hljs-string">&quot;李四，24&quot;</span>,<span class="hljs-string">&quot;王五，25&quot;</span>);<br>Map&lt;String, Integer&gt; map = list.stream()<br>        .filter(s -&gt; Integer.parseInt((s.split(<span class="hljs-string">&quot;，&quot;</span>)[<span class="hljs-number">1</span>])) &gt;= <span class="hljs-number">24</span>)<br>        .collect(Collectors.toMap(<br>                        s -&gt; (s.split(<span class="hljs-string">&quot;，&quot;</span>)[<span class="hljs-number">0</span>]),<br>                        s -&gt; Integer.parseInt(s.split(<span class="hljs-string">&quot;，&quot;</span>)[<span class="hljs-number">1</span>])));<br>System.out.println(map);<br></code></pre></td></tr></table></figure><br/><p>现在有两个ArrayList集合，<br>第一个集合中：存储6名男演员的名字和年龄，第二个集合中：存储6名女演员的名字和年龄<br>姓名和年龄中间用逗号隔开。如：”张三，23”<br>要求完成如下的操作：</p><ol><li>男演员只要名字为3个字的前两人</li><li>女演员只要姓杨的，并且不要第一个</li><li>把过滤后的男演员姓名和女演员姓名合并到一起</li><li>将上一步的演员信息封装成Actor对象</li><li>将所有的演员对象都保存到List集合中</li></ol><p>演员类属性: name, age</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; manList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(manList,<span class="hljs-string">&quot;蔡坤坤，24&quot;</span>,<span class="hljs-string">&quot;叶齁咸，23&quot;</span>,<span class="hljs-string">&quot;刘不甜，22&quot;</span>,<span class="hljs-string">&quot;吴签，24&quot;</span>,<span class="hljs-string">&quot;谷嘉，30&quot;</span>,<span class="hljs-string">&quot;肖凉凉，27&quot;</span>);<br>ArrayList&lt;String&gt; womenList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(womenList,<span class="hljs-string">&quot;赵小颖，35&quot;</span>,<span class="hljs-string">&quot;杨颖，36&quot;</span>,<span class="hljs-string">&quot;高圆圆，43&quot;</span>,<span class="hljs-string">&quot;张天天，31&quot;</span>,<span class="hljs-string">&quot;刘诗，35&quot;</span>,<span class="hljs-string">&quot;杨小幂，33&quot;</span>);<br><br><span class="hljs-comment">// 男演员只要名字为3个字的前两人</span><br>Stream&lt;String&gt; menStream = manList.stream().filter(s -&gt; s.split(<span class="hljs-string">&quot;，&quot;</span>)[<span class="hljs-number">0</span>].length() == <span class="hljs-number">3</span>).limit(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// 女演员只要姓杨的，并且不要第一个</span><br>Stream&lt;String&gt; womenStream = womenList.stream().filter(s -&gt; s.split(<span class="hljs-string">&quot;，&quot;</span>)[<span class="hljs-number">0</span>].startsWith(<span class="hljs-string">&quot;杨&quot;</span>)).skip(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 把过滤后的男演员和女演员合并到一起</span><br>List&lt;Actor&gt; actorList = Stream.concat(menStream, womenStream)<br>        .map(s -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Actor</span>(s.split(<span class="hljs-string">&quot;，&quot;</span>)[<span class="hljs-number">0</span>]<br>                , Integer.parseInt(s.split(<span class="hljs-string">&quot;，&quot;</span>)[<span class="hljs-number">1</span>])))<br>        .collect(Collectors.toList());<br>System.out.println(actorList);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Actor类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Actor</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Actor</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Actor</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Actor&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不可变集合</title>
    <link href="/2023/10/22/%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88/"/>
    <url>/2023/10/22/%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>该笔记基于b站视频完成<a href="https://www.bilibili.com/video/BV1te411w722?vd_source=db8e7458ec195ac74979ce5478cbc624">Java-Stream流从入门到精通</a></p><p><strong>什么是不可变集合？</strong></p><img src="./不可变集合/20231022161920.png" style="zoom:67%;" /><p><strong>不可变集合就是不能修改的集合</strong></p><p>应用场景:</p><ul><li>如果某个数据不能被修改，把它防御性的拷贝到不可变集合中是一个很好的实践</li><li>当集合对象被不可信的库调用的时候，不可变形式是安全的</li></ul><p>简单理解就是不想让别人修改集合中的内容<br>例如扑克牌，集合中存储扑克牌的种类和数量是不可变的</p><p><img src="/./%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88/20231022162002.png"></p><br/><p><strong>创建不可变集合的书写格式</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">static <E> List<E> of (E…elements)</td><td align="center">创建一个具有指定元素的List集合对象</td></tr><tr><td align="center">static <E> Set<E> of (E…elements)</td><td align="center">创建一个具有指定元素的Set集合对象</td></tr><tr><td align="center">static &lt;E,V&gt; Map&lt;E,V&gt; of (E…elements)</td><td align="center">创建一个具有指定元素的Map集合对象</td></tr></tbody></table><p>创建不可变List集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一旦创建完成之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span><br>List&lt;String&gt; list = List.of(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;赵六&quot;</span>); <span class="hljs-comment">// 该方法在jdk1.9及以后才有</span><br></code></pre></td></tr></table></figure><br><p>创建不可变Set集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一旦创建完成之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span><br><span class="hljs-comment">// Map中的元素不能重复</span><br>Set&lt;String&gt; set = Set.of(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;赵六&quot;</span>); <span class="hljs-comment">// 该方法在jdk1.9及以后才有</span><br></code></pre></td></tr></table></figure><br/><p>创建不可变Map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一旦创建完成之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span><br><span class="hljs-comment">/** </span><br><span class="hljs-comment">Map中的键位不能重复</span><br><span class="hljs-comment">Map里面的of方法，参数是有上限的，最多只能传递20个参数，也就是10对键值对，因为形参列表中只能有一个可变参数</span><br><span class="hljs-comment">如果我们要创建多个键值对对象，数量大于10个，在Map接口中还有一个方法ofEntries，把键和值看做一个整体来作为可变形参</span><br><span class="hljs-comment">*/</span><br>Map.of(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;上海&quot;</span>); <span class="hljs-comment">// 张三是key，北京是value；李四是key，上海是value</span><br></code></pre></td></tr></table></figure><br/><p>Map的ofEntries</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建Map的不可变集合，键值对数量超过10</span><br><span class="hljs-comment">// 1.创建一个普通的Map集合</span><br>HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>map.put(<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>);<br>map.put(<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>);<br>map.put(<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>);<br>map.put(<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>);<br>map.put(<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>);<br>map.put(<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>);<br>map.put(<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>);<br>map.put(<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;i&quot;</span>);<br>map.put(<span class="hljs-string">&quot;10&quot;</span>,<span class="hljs-string">&quot;j&quot;</span>);<br>map.put(<span class="hljs-string">&quot;11&quot;</span>,<span class="hljs-string">&quot;k&quot;</span>);<br><br><span class="hljs-comment">// 2.利用上面的数据来获取一个不可变集合</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">方法一</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 获取到所有的键值对对象(Entry对象)</span><br><span class="hljs-comment">Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="hljs-comment">// 把entries变成一个数组</span><br><span class="hljs-comment">Map.Entry[] arr1 = new Map.Entry(0);</span><br><span class="hljs-comment">// toArray方法在底层会比较集合的长度和数组长度两者的大小</span><br><span class="hljs-comment">// 如果集合的长度 &gt; 数组的长度 : 数据在集合中放不下，此时会根据实际数据个数，查询创建数组</span><br><span class="hljs-comment">Map.Entry[] arr2 = entries.toArray(arr1);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 不可变的Map集合</span><br><span class="hljs-comment">Map map = Map.ofEntries(arr2);</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 方法二</span><br><span class="hljs-comment">//Map&lt;Object, Object&gt; map = Map.ofEntries(map.entrySet().toArray(new Map.Entry[0]));</span><br><br><span class="hljs-comment">// 方法上：jdk 10 才开始有</span><br>Map&lt;String, String&gt; map = Map.copyOf(map);<br><br></code></pre></td></tr></table></figure><br/><p><strong>总结</strong></p><ol><li><p>不可变集合的特点</p><p>定义完成后不可以修改，或者添加、删除</p></li><li><p>创建不可变集合</p><p>List、Set、Map接口中，都存在of方法可以创建不可变集合</p></li><li><p>三种方式的细节</p><ul><li>List：直接用</li><li>Set：元素不能重复</li><li>Map：元素不能重复，键值对数量最多是10个，超过10个用ofEntries方法</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公共字段自动填充</title>
    <link href="/2023/10/21/%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/"/>
    <url>/2023/10/21/%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/</url>
    
    <content type="html"><![CDATA[<p>在做项目的时候，很多数据库表会有<font color="red">相同字段</font>，例如很多表都会记下数据的<font color="red">创造时间、修改时间、创造者、修改者</font>，便于后期维护。如果每次对数据的增加和修改操作都需要手动添加后修改这些字段，则会有大量的相同代码，也影响了代码的可读性。为此，我们可以利用<font color="red">反射机制和AOP（面向切面编程）</font>，对这些公共字段进行<font color="red">统一处理</font></p><br/><img src="./公共字段自动填充/20231021231450.png" style="zoom:67%;" /><img src="./公共字段自动填充/20231021231417.png" style="zoom: 67%;" /><table><thead><tr><th align="center">序号</th><th align="center">含义</th><th align="center">数据类型</th><th align="center">操作</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">创建时间</td><td align="center">datetime</td><td align="center">insert</td></tr><tr><td align="center">2</td><td align="center">创建人id</td><td align="center">bigint</td><td align="center">insert</td></tr><tr><td align="center">3</td><td align="center">修改时间</td><td align="center">datetime</td><td align="center">insert、update</td></tr><tr><td align="center">4</td><td align="center">修改人id</td><td align="center">bigint</td><td align="center">insert、update</td></tr></tbody></table><p><strong>解决方案</strong></p><ul><li>自定义注解AutoFill，用于标识需要进行公共字段自动填充的方法</li><li>自定义切面类AutoFillAspect，统一拦截加入了AutoFill注解的方法，通过反射为公共字段赋值</li><li>在Mapper的方法上加入AutoFill注解</li></ul><p>技术点： 枚举、注解、AOP、反射</p><br/><p><strong>自定义注解AutoFill</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 自定义注解，用于识别某个方法需要进行功能字段自动填充</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoFill &#123;<br>    <span class="hljs-comment">// 指定数据库操作的类型   update  insert</span><br>    OperationType <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据库操作类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">OperationType</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新操作</span><br><span class="hljs-comment">     */</span><br>    UPDATE,<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入操作</span><br><span class="hljs-comment">     */</span><br>    INSERT<br>&#125;<br></code></pre></td></tr></table></figure><p>OperationType 是自定义的枚举类</p><p>@Target 和 @Retention，可以用来修饰注解，是注解的注解，被称为元注解</p><p><strong>@Target :  目标，即该注解可以声明在哪些目标元素之前，也可理解为注释类型的程序元素的种类</strong></p><ul><li>ElementType.PACKAGE：该注解只能声明在一个包名前</li><li>ElementType.ANNOTATION_TYPE：该注解只能声明在一个注解类型前</li><li>ElementType.TYPE：该注解只能声明在一个类前</li><li>ElementType.CONSTRUCTOR：该注解只能声明在一个类的构造方法前</li><li>ElementType.LOCAL_VARIABLE：该注解只能声明在一个局部变量前</li><li>ElementType.METHOD：该注解只能声明在一个类的方法前</li><li>ElementType.PARAMETER：该注解只能声明在一个方法参数前</li><li>ElementType.FIELD：该注解只能声明在一个类的字段前</li></ul><p>**@Retention ：保留，可以理解为如何保留，即告诉编译程序如何处理，也可理解为注解类的生命周期 **</p><ul><li>RetentionPolicy.SOURCE  : 注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃</li><li>RetentionPolicy.CLASS  : 注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期</li><li>RetentionPolicy.RUNTIME  : 注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在</li></ul><br/><p><strong>自定义切面类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java">**<br> * <span class="hljs-meta">@description</span>: 自定义切面<br> */<br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoFillAspect</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>: 切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.sky.annotation.AutoFill)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoFillPointCut</span><span class="hljs-params">()</span>&#123;&#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>: 前置通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(&quot;autoFillPointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoFill</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始进行公共字段自动填充---&quot;</span>);<br><br>        <span class="hljs-comment">// 获取到当前被拦截的方法上的数据库操作类型</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature(); <span class="hljs-comment">// 方法签名对象</span><br>        <span class="hljs-type">AutoFill</span> <span class="hljs-variable">autoFill</span> <span class="hljs-operator">=</span> signature.getMethod().getAnnotation(AutoFill.class); <span class="hljs-comment">// 获得方法上的注解对象</span><br>        <span class="hljs-type">OperationType</span> <span class="hljs-variable">operationType</span> <span class="hljs-operator">=</span> autoFill.value(); <span class="hljs-comment">// 获得数据库操作类型</span><br><br>        <span class="hljs-comment">// 获取到当前被拦截的方法的参数--实体对象</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-keyword">if</span> (args == <span class="hljs-literal">null</span> || args.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 在写新增和修改方法时，把实体放在第一个参数</span><br><br>        <span class="hljs-comment">// 准备赋值的数据</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">currentId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br><br>        <span class="hljs-comment">// 根据当前不同的操作类型，为对应的属性通过反射来赋值</span><br>        <span class="hljs-keyword">if</span> (operationType == OperationType.INSERT) &#123;<br>            <span class="hljs-comment">// 为4个字段赋值</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setCreateTime</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateTime</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateUser</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setCreateUser</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);<br><br>                <span class="hljs-comment">// 通过反射为对象属性赋值</span><br>                setCreateTime.invoke(entity,now);<br>                setCreateUser.invoke(entity,currentId);<br>                setUpdateTime.invoke(entity,now);<br>                setUpdateUser.invoke(entity,currentId);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operationType == OperationType.UPDATE) &#123;<br>            <span class="hljs-comment">// 为2个字段赋值</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateTime</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateUser</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);<br><br>                <span class="hljs-comment">// 通过反射为对象属性赋值</span><br>                setUpdateTime.invoke(entity,now);<br>                setUpdateUser.invoke(entity,currentId);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在执行update和save方法前就需要对公共字段赋值，所以这里使用的是前置通知<br>@Pointcut(“@annotation(com.sky.annotation.AutoFill)”)，com.sky.annotation.AutoFill 是自定义注解AutoFill类的位置<br>update方法只需要为2个公共字段赋值，save方法需要为4个公共字段赋值</p><br/><p><strong>在Mapper的方法上加入AutoFill注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoFill(value = OperationType.INSERT)</span><br><span class="hljs-meta">@Insert(&quot;insert into employee (name, username, password, phone, sex, id_number, status, create_time, update_time, create_user, update_user) &quot; +</span><br><span class="hljs-meta">            &quot;values &quot; +</span><br><span class="hljs-meta">            &quot;(#&#123;name&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;phone&#125;,#&#123;sex&#125;,#&#123;idNumber&#125;,#&#123;status&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;,#&#123;updateUser&#125;)&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Employee employee)</span>;<br><br><br><span class="hljs-meta">@AutoFill(value = OperationType.UPDATE)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Employee employee)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lambda表达式</title>
    <link href="/2023/10/18/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/10/18/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="1-什么是Lambda表达式"><a href="#1-什么是Lambda表达式" class="headerlink" title="1. 什么是Lambda表达式"></a>1. 什么是Lambda表达式</h3><p>Lambda表达式是一个<font color="red">匿名函数</font>,我们可以把Lambda表达式理解为是<font color="red">一段可以传递的代码</font>(将代码像数据一样传递)。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升</p><br/><p><strong>简单案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(o1, o2) -&gt; Integer.compare(o1, o2);<br></code></pre></td></tr></table></figure><p><strong>格式</strong></p><p>-&gt;:lambda操作符或箭头操作符<br>-&gt;的左边:lambda形参列表，对应着要重写的接口中的抽象方法的形参列表<br>-&gt;的右边:Lambda体，对应着接口的实现类要重写的方法的方法体</p><br/><h3 id="2-Lambda表达式的语法"><a href="#2-Lambda表达式的语法" class="headerlink" title="2. Lambda表达式的语法"></a>2. Lambda表达式的语法</h3><p><strong>语法格式一：无参，无返回值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;小白学Java&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;;<br>r1. run();<br><br>System.out.println(<span class="hljs-string">&quot;*************************&quot;</span>);<br><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>     System.out.println(<span class="hljs-string">&quot;小白学Lambda&quot;</span>);<br>&#125;;<br>r2.run();<br></code></pre></td></tr></table></figure><br/><p><strong>语法格式二：需要一个传输，但是没有返回值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    Consumer&lt;String&gt; con = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accpet</span><span class="hljs-params">(String s)</span> &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;;<br>con.accpet(<span class="hljs-string">&quot;谎言和誓言的区别是什么？&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*************************&quot;</span>);<br><br>Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;<br>   System.out.println(s);<br>&#125;;<br>con1.accept(<span class="hljs-string">&quot;一个是说的人当真了，一个是听的人当真了&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>语法格式三：数据类型可以省略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    Consumer&lt;String&gt; con = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;() &#123;<br>           System.out.println(s);<br>&#125;;<br>con.accpet(<span class="hljs-string">&quot;如果大学可以重来，你最想重来的事是什么？&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*************************&quot;</span>);<br><br>Consumer&lt;String&gt; con1 = (s) -&gt; &#123;<br>    System.out.println(s);<br>&#125;;<br>con1.accept(<span class="hljs-string">&quot;多去其它地方玩玩，别一直搁长沙玩&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>语法格式四：形参列表只有一个的时候，小括号也可以省略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>Consumer&lt;String&gt; con1 = s -&gt; &#123;<br>    System.out.println(s);<br>&#125;;<br>con1.accept(<span class="hljs-string">&quot;多去其它地方玩玩，别一直搁长沙玩&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><br/><hr><h3 id="3-函数式接口"><a href="#3-函数式接口" class="headerlink" title="3. 函数式接口"></a>3. 函数式接口</h3><p><font color="red">如果接口中只声明有一个抽象方法，则此接口就称为函数式接口</font>，因为只有给函数式接口提供实现类对象时，我们才能使用Lambda表达式</p><p>jdk1.8中声明的函数式接口都在java.uti.function包下</p><br/><p><strong>四大核心函数式接口</strong></p><table><thead><tr><th align="center">函数式接口</th><th align="center">称谓</th><th align="center">参数类型</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">Consumer<T></td><td align="center">消费型接口</td><td align="center">T</td><td align="center">对类型为T的对象应用操作，包含方法：void accept(T t)</td></tr><tr><td align="center">Supplier<T></td><td align="center">供给型接口</td><td align="center">无</td><td align="center">返回类型为T的对象，包括方法：T get()</td></tr><tr><td align="center">Function&lt;T,R&gt;</td><td align="center">函数型接口</td><td align="center">T</td><td align="center">对类型为T的对象应用操作，并返回结果。结果是R类型的对象，包含方法R apply(T t)</td></tr><tr><td align="center">Predicate<T></td><td align="center">判断型接口</td><td align="center">T</td><td align="center">确定类型为T的对象是否满足某约束，并返回boolean值，包含方法boolean test(T t)</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM-基础篇</title>
    <link href="/2023/10/17/JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2023/10/17/JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="一-JVM"><a href="#一-JVM" class="headerlink" title="一. JVM"></a>一. JVM</h2><h3 id="1-初识JVM"><a href="#1-初识JVM" class="headerlink" title="1. 初识JVM"></a>1. 初识JVM</h3><p><strong>什么是JVM？</strong></p><p><font color="red">JVM</font> 全程 Java Virtual Machine，中文译名<font color="red">Java虚拟机</font><br>JVM本质上是一个运行在计算机上的程序，他的&lt;&#x2F;职责是运行<font color="red">Java字节码文件</font><br><img src="./JVM-基础篇/20231017143311.png" style="zoom: 50%;" /></p><br/><h3 id="2-JVM的功能"><a href="#2-JVM的功能" class="headerlink" title="2. JVM的功能"></a>2. JVM的功能</h3><ul><li>解释和运行<ul><li>对字节码文件中的指令，实时的解释成机器码，让计算机执行</li></ul></li><li>内存管理<ul><li>自动为对象、方法等分配内存</li><li>自动的垃圾回收机制，回收不再利用的对象</li></ul></li><li>即时编译<ul><li>对热点代码进行优化，提升执行效率</li></ul></li></ul><br/><p><strong>即时编译</strong></p><ul><li><p>Java语言如果不做任何优化，性能不如C、C++等语言</p><img src="./JVM-基础篇/20231017144235.png" style="zoom: 50%;" /></li><li><p>Java需要实时解释，主要是为了支持跨平台特性</p></li><li><p>由于JVM需要实时解释虚拟机指令，不做任何优化性能不如直接运行机器码的C、C++等语言</p><img src="./JVM-基础篇/20231017144309.png" style="zoom: 50%;" /></li></ul><br/><p><strong>常见的JVM</strong></p><table><thead><tr><th align="center">名称</th><th align="center">作者</th><th align="center">支持版本</th><th align="center">社区活跃度 （github star）</th><th align="center">特性</th><th align="center">适用场景</th></tr></thead><tbody><tr><td align="center">HotSpot  (Oracle JDK版)</td><td align="center">Oracle</td><td align="center">所有版本</td><td align="center">高(闭源)</td><td align="center">使用最广泛，稳定可靠，社区活跃 JIT支持 Oracle JDK默认虚拟机</td><td align="center">默认</td></tr><tr><td align="center">otSpot  (Open JDK版)</td><td align="center">Oracle</td><td align="center">所有版本</td><td align="center">中(16.1k)</td><td align="center">同上 开源，Open JDK默认虚拟机</td><td align="center">默认 对JDK有二次开发需求</td></tr><tr><td align="center">GraalVM</td><td align="center">Oracle</td><td align="center">11, 17,19 企业版支持8</td><td align="center">高（18.7k）</td><td align="center">多语言支持 高性能、JIT、AOT支持</td><td align="center">微服务、云原生架构 需要多语言混合编程</td></tr><tr><td align="center">Dragonwell JDK 龙井</td><td align="center">Alibaba</td><td align="center">标准版 8,11,17 扩展版11,17</td><td align="center">低(3.9k)</td><td align="center">基于OpenJDK的增强 高性能、bug修复、安全性提升 JWarmup、ElasticHeap、Wisp特性支</td><td align="center">电商、物流、金融领域 对性能要求比较高</td></tr><tr><td align="center">Eclipse OpenJ9</td><td align="center">IBM</td><td align="center">8,11,17,19,20</td><td align="center">低(3.1k)</td><td align="center">高性能、可扩展 JIT、AOT特性支持</td><td align="center">微服务、云原生架构</td></tr></tbody></table><br/><p><strong>HotSpot的发展历程</strong></p><img src="./JVM-基础篇/20231017145327.png" style="zoom: 67%;" /><br/><p><strong>总结</strong></p><ol><li><p>JVM到底是什么？</p><p>JVM 全称是 Java Virtual Machine，中文译名 Java虚拟机，是一个运行在计算 机上的程序，他的职责是运行Java字节码文件</p></li><li><p>JVM的三大核心功能是什么？</p><p>JVM 包含内存管理、解释执行虚拟机指令、即时编译三大功能。</p></li><li><p>常见的JVM虚拟机有哪些？</p><p>常见的JVM有HotSpot、GraalVM、OpenJ9等，另外DragonWell龙井JDK也 提供了一款功能增强版的JVM。其中使用最广泛的是HotSpot虚拟机</p></li></ol><br/><hr><h2 id="二-字节码文件详解"><a href="#二-字节码文件详解" class="headerlink" title="二. 字节码文件详解"></a>二. 字节码文件详解</h2><h3 id="1-Java虚拟机的组成"><a href="#1-Java虚拟机的组成" class="headerlink" title="1.  Java虚拟机的组成"></a>1.  Java虚拟机的组成</h3><p><img src="/./JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/20231018133846.png"></p><br/><hr><h3 id="2-字节码文件的组成"><a href="#2-字节码文件的组成" class="headerlink" title="2. 字节码文件的组成"></a>2. 字节码文件的组成</h3><p>字节码文件中保存了源代码编译之后的内容，以二进制的方式存储，无法直接用记事本打开阅读<br>推荐使用 jclasslib工具查看字节码文件,Github地址： <a href="https://github.com/ingokegel/jclasslib">https://github.com/ingokegel/jclasslib</a></p><img src="./JVM-基础篇/20231026135449.png" style="zoom:80%;" /><br/><p><strong>字节码文件一般包含5个部分</strong></p><ul><li><p>基础信息</p><p>魔数、字节码文件对应的Java版本号 访问标识(public final等等) 父类和接口</p><p><img src="/./JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/20231026135908.png"></p></li><li><p>常量池</p><p>保存了字符串常量、类或接口名、字段名 主要在字节码指令中使</p><p><img src="/./JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/20231026135928.png"></p></li><li><p>字段</p><p>当前类或接口声明的字段信息</p><p><img src="/./JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/20231026140014.png"></p></li><li><p>方法</p><p>当前类或接口声明的方法信息 字节码指令</p><p><img src="/./JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/20231026140032.png"></p></li><li><p>属性</p><p>类的属性，比如源码的文件名 内部类的列表等</p><p><img src="/./JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/20231026140135.png"></p></li></ul><br/><hr><h3 id="3-基本信息"><a href="#3-基本信息" class="headerlink" title="3. 基本信息"></a>3. 基本信息</h3><p><strong>Magis魔数</strong></p><p><img src="/./JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/20231026150614.png"></p><ul><li>文件是无法通过文件扩展名来确定文件类型的，文件扩展名可以随意修改，不影响文件的内容</li><li>软件使用文件的头几个字节（文件头）去校验文件的类型，如果软件不支持该种类型就会出错</li><li>Java字节码文件中，将文件头称为magic魔数</li></ul><table><thead><tr><th align="center">文件类型</th><th align="center">字节数</th><th align="center">文件头</th></tr></thead><tbody><tr><td align="center">JPEG(jpg)</td><td align="center">3</td><td align="center">FFD8FF</td></tr><tr><td align="center">PNG(png)</td><td align="center">4</td><td align="center">89504E47(文件尾也有要求)</td></tr><tr><td align="center">bmp</td><td align="center">2</td><td align="center">424D</td></tr><tr><td align="center">XML(xml)</td><td align="center">5</td><td align="center">3C3F786D6C</td></tr><tr><td align="center">AVI(avi)</td><td align="center">4</td><td align="center">41564920</td></tr><tr><td align="center">Java字节码文件(.class)</td><td align="center">4</td><td align="center">CAFEBABE</td></tr></tbody></table><br/><p><strong>主副版本号</strong></p><ul><li><font color ="red">主副版本号指的是编译字节码文件的JDK版本号</font>，主版本号用来标识大版本号，JDK1.0-1.1使用了 45.0-45.3，JDK1.2是46之后每升级一个大版本就加1；副版本号是当主版本号相同时作为区分不同 版本的标识，一般只需要关心主版本号</li><li>版本号的作用主要是判断当前字节码的版本和运行时的JDK是否兼容</li></ul><img src="./JVM-基础篇/20231026161923.png" style="zoom: 67%;" /><p>1.2之后大版本号计算方法就是: 主版本号 – 44 比如主版本号52就是JDK1.8</p><br/><p>主版本号不兼容导致的错误</p><p><img src="/./JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/20231026162108.png"></p><p>解决方案</p><ul><li>升级JDK版本 </li><li>将第三方依赖的版本号降低或者更换依赖，以满足JDK版本的要求</li></ul><br/><hr><h3 id="4-常量池"><a href="#4-常量池" class="headerlink" title="4. 常量池"></a>4. 常量池</h3><img src="./JVM-基础篇/20231027105433.png" style="zoom:67%;" /><ul><li>字节码文件中常量池的作用：避免相同的内容重复定义，节省空间</li><li>常量池中的数据都有一个编号，编号从1开始，在字段或字节码指令中可以通过编号快速找到对应的数据</li><li>字节码指令通过编号引用到常量池的过程称为<font color ="red">符号引用</font></li></ul><br/><hr><h3 id="5-方法"><a href="#5-方法" class="headerlink" title="5. 方法"></a>5. 方法</h3><ul><li>字节码中的方法区域是存放字节码指令的核心位置，字节码指令的内容存放在方法的Code属性中</li><li>操作数栈是临时存放数据的地方，局部变量表是存放方法中的局部变量的位置</li></ul><p><strong>解析int i &#x3D; 0; int j &#x3D; i + 1;</strong></p><img src="./JVM-基础篇/20231027163754.png" style="zoom:67%;" /><ul><li>iconst_0: 把0放入操作上栈</li><li>istore_1: 从操作数栈取出放入 局部变量表1号位置</li><li>iload_1: 将局部变量表1中的数 据放入操作数栈</li><li>iconst_1: 将常量1放入操作数栈</li><li>iadd: 将操作数栈顶部的两个 数据进行累加,结果放入栈中</li><li>istore_2: 将相加后的结果取出放入局部变量表2号位置</li><li>return: 方法结束、返回</li></ul><br/><p><strong>解析i &#x3D; 0; i &#x3D; i++;</strong></p><img src="./JVM-基础篇/20231027164322.png" style="zoom:67%;" /><br/><p><strong>解析i &#x3D; 0; i &#x3D; ++i;</strong></p><img src="./JVM-基础篇/20231027164338.png" style="zoom: 67%;" /><br/><p><strong>int i &#x3D; 0; i &#x3D; i++;最终i的值是多少?</strong></p><p>最终i的值是0，通过分析字节码文件发现，i++ 是先把0取出来放入操作数栈中，接下来在局部变量表中对i进行加1，i变成了1，最近再将之前操作数栈中的0取出来放入i，最后i就变成了0</p><br/><hr><h3 id="6-字节码文件常用工具"><a href="#6-字节码文件常用工具" class="headerlink" title="6. 字节码文件常用工具"></a>6. 字节码文件常用工具</h3><ul><li>javap -v 命令</li><li>jclasslib插件</li><li>阿里arthas</li></ul><br/><p><strong>javao -v命令</strong></p><ul><li>javap是JDK自带的反编译工具，可以通过控制台查看字节码文件的内容。适合在服务器上查看字节码文件内 容</li><li>直接输入javap查看所有参数</li><li>输入javap -v 字节码文件名称 查看具体的字节码信息。（如果jar包需要先使用 jar –xvf 命令解压）</li></ul><br/><p><strong>jclasslibidea插件</strong></p><p>jclasslib也有Idea插件版本，建议开发时使用Idea插件版本，可以在代码编译之后实时看到字节码 文件内容</p><p>首先应该下载并安装插件<br><img src="./JVM-基础篇/20231028121044.png" style="zoom: 50%;" /></p><br/><p>编译完代码后即可打开字节码文件<br><img src="/./JVM-%E5%9F%BA%E7%A1%80%E7%AF%87/20231028121407.png"></p><img src="./JVM-基础篇/20231028121602.png" style="zoom:67%;" /><br/><p><strong>阿里arthas</strong></p><ul><li>Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修 改应用代码的情况下，对业务问题进行诊断，大大提升线上问题排查效率</li><li>官网：<a href="https://arthas.aliyun.com/doc/">https://arthas.aliyun.com/doc/</a></li><li>dump 类的全限定名：dump已加载类的字节码文件到特定目录</li><li>ad 类的全限定名： 反编译已加载类的源码</li></ul><img src="./JVM-基础篇/20231028122520.png" style="zoom:67%;" /><br/><hr><h2 id="三-类的生命周期"><a href="#三-类的生命周期" class="headerlink" title="三. 类的生命周期"></a>三. 类的生命周期</h2><img src="./JVM-基础篇/20231028133012.png" style="zoom:67%;" /><img src="./JVM-基础篇/20231028133121.png" style="zoom: 50%;" /><br/><h3 id="1-加载阶段"><a href="#1-加载阶段" class="headerlink" title="1.  加载阶段"></a>1.  加载阶段</h3><ol><li><p>加载(Loading)阶段第一步是<font color="red">类加载器</font>根据类的全限定名通过不同的渠道以二进制流的方式获取字节码信息。 程序员可以使用Java代码拓展的不同的渠道<br><img src="./JVM-基础篇/20231028133906.png" style="zoom:67%;" /></p></li><li><p>类加载器在加载完类之后，Java虚拟机会将字节码中的信息保存到方法区中<br><img src="./JVM-基础篇/20231028133928.png" style="zoom:67%;" /></p></li><li><p>类加载器在加载完类之后，Java虚拟机会将字节码中的信息保存到内存的方法区中。 生成一个InstanceKlass对象，保存类的所有信息，里边还包含实现特定功能比如多态的信息<br><img src="./JVM-基础篇/20231028133958.png" style="zoom:67%;" /></p></li><li><p>同时，Java虚拟机还会在堆中生成一份与方法区中数据类似的java.lang.Class对象。 作用是在Java代码中去获取类的信息以及存储静态字段的数据（JDK8及之后)<br><img src="./JVM-基础篇/20231028134029.png" style="zoom:67%;" /></p></li></ol><br/><p>对于开发者来说，只需要访问堆中的Class对象而不需要访问方法区中所有信息,<font color="red">这样Java虚拟机就能很好地控制开发者访问数据的范围</font></p><img src="./JVM-基础篇/20231028134100.png" style="zoom:67%;" /><br/><hr><h3 id="2-连接阶段"><a href="#2-连接阶段" class="headerlink" title="2. 连接阶段"></a>2. 连接阶段</h3><img src="./JVM-基础篇/20231028141240.png" style="zoom:67%;" /><br/><p><strong>验证</strong></p><p>连接的第一个环节是验证，验证的主要目的是检查Java字节码文件是否遵守了《Java虚拟机规范》中的约束。这个阶段一般不需要程序员参与<br>主要包含4个部分</p><ol><li>文件格式验证，比如文件是否以0xCAFEBABE开头，主次版本号是否满足当前Java虚拟机版本要求</li><li>元信息验证，例如类必须有父类（super不能为空）</li><li>验证程序执行指令的语义，比如方法内的指令执行到一半强行跳转到其他方法中去</li><li>符号引用验证，例如是否访问了其他类中private的方法等</li></ol><br/><p><strong>准备</strong></p><p>准备阶段为静态变量（static）分配内存并设置初始值<br><img src="./JVM-基础篇/20231028142605.png" style="zoom:67%;" /></p><p>准备阶段只会给静态变量赋初始值，而每一种基本数据类型和引用数据类型都有其初始值</p><table><thead><tr><th align="center">数据类型</th><th align="center">初始值</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">o</td></tr><tr><td align="center">long</td><td align="center">0L</td></tr><tr><td align="center">short</td><td align="center">0</td></tr><tr><td align="center">char</td><td align="center">‘\u0000’</td></tr><tr><td align="center">byte</td><td align="center">0</td></tr><tr><td align="center">boolean</td><td align="center">false</td></tr><tr><td align="center">double</td><td align="center">0.0</td></tr><tr><td align="center">引用数据类型</td><td align="center">null</td></tr></tbody></table><br/><p>final修饰的基本数据类型的静态变量，准备阶段直接会将代码中的值进行赋值<br><img src="./JVM-基础篇/20231028142623.png" style="zoom:67%;" /></p><br/><p><strong>解析</strong></p><ul><li>解析阶段主要是将常量池中的符号引用替换为直接引用</li><li>直接引用不在使用编号，而是使用内存中地址进行访问具体的数据</li></ul><br/><hr><h3 id="3-初始化阶段"><a href="#3-初始化阶段" class="headerlink" title="3. 初始化阶段"></a>3. 初始化阶段</h3>]]></content>
    
    
    <categories>
      
      <category>JVM篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="/2023/09/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2023/09/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>什么也没有！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
